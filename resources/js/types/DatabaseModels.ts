/*
* This file was generated by a tool.
* Rerun sql-ts to regenerate this file.
*/
export interface _prisma_migrationsEntity {
  'applied_steps_count'?: number;
  'checksum': string;
  'finished_at'?: Date | null;
  'id': string;
  'logs'?: string | null;
  'migration_name': string;
  'rolled_back_at'?: Date | null;
  'started_at'?: Date;
}
export interface ClientEntity {
  'address'?: string | null;
  'email'?: string | null;
  'id'?: number;
  'invoiceId': number;
  'name': string;
  'phone'?: string | null;
}
export interface InvoiceEntity {
  'createdAt'?: Date;
  'creator': string;
  'currency': string;
  'dueDate': Date;
  'id'?: number;
  'invoiceNumber': string;
  'notes': string;
  'rates': string;
  'status': string;
  'subTotal': number;
  'total': number;
  'totalAmountReceived': number;
  'type': string;
  'vat': number;
}
export interface InvoiceItemEntity {
  'discount': string;
  'id'?: number;
  'invoiceId': number;
  'itemName': string;
  'quantity': string;
  'unitPrice': string;
}
export interface PaymentEntity {
  'amountPaid': number;
  'datePaid': Date;
  'id'?: number;
  'invoiceId': number;
  'note': string;
  'paidBy': string;
  'paymentMethod': string;
}
export interface ProfileEntity {
  'businessName': string;
  'contactAddress': string;
  'email': string;
  'id'?: number;
  'logo': string;
  'name': string;
  'phone': string;
  'userId': number;
  'website': string;
}
export interface UserEntity {
  'createdAt'?: Date;
  'email': string;
  'id'?: number;
  'name'?: string | null;
  'password': string;
}
export interface _wp_db7_formsEntity {
  'form_date'?: Date;
  'form_id'?: string;
  'form_post_id': string;
  'form_value': string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_db7_formsEntity {
  'form_date'?: Date;
  'form_id'?: string;
  'form_post_id': string;
  'form_value': string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}

/* Stores action information. */
export interface actionsEntity {

  /* Primary Key: Unique actions ID. */
  'aid'?: string;

  /* The callback function that executes when the action runs. */
  'callback'?: string;

  /* Label of the action. */
  'label'?: string;

  /* Parameters to be passed to the callback function. */
  'parameters': any;

  /* The object that that action acts on (node, user, comment, system or custom types.) */
  'type'?: string;
}

/* Stores distributed authentication mapping. */
export interface authmapEntity {

  /* Primary Key: Unique authmap ID. */
  'aid'?: number;

  /* Unique authentication name. */
  'authname'?: string;

  /* Module which is controlling the authentication. */
  'module'?: string;

  /* User’s users.uid. */
  'uid'?: number;
}

/* Stores details about batches (processes that run in... */
export interface batchEntity {

  /* A serialized array containing the processing data for the batch. */
  'batch'?: any | null;

  /* Primary Key: Unique batch ID. */
  'bid': number;

  /* A Unix timestamp indicating when this batch was submitted for processing. Stale batches are purged at cron time. */
  'timestamp': number;

  /* A string token generated against the current user’s session id and the batch id, used to ensure that only the user who submitted the batch can effectively access it. */
  'token': string;
}

/* Store custom defined beautytip styles. */
export interface beautytips_custom_stylesEntity {

  /* Controls roundness of corners (integer) */
  'corner_radius'?: string | null;

  /* css class of beautytip popup. */
  'css_class'?: string | null;

  /* The color of the text. */
  'css_color'?: string | null;

  /* The font family of the text. */
  'css_font_family'?: string | null;

  /* The font size of the text. */
  'css_font_size'?: string | null;

  /* The font weight of the text. */
  'css_font_weight'?: string | null;

  /* background color (string - html color) */
  'fill'?: string | null;

  /* The unique id for the custom beautytip style. */
  'id'?: number;

  /* The unique name for this style. */
  'name'?: string | null;

  /* space between content and border (number in px) */
  'padding'?: string | null;

  /* Whether the shadow should be on, off, or default. */
  'shadow'?: string | null;

  /* Size of popup shadow (integer) */
  'shadow_blur'?: string | null;

  /* Color of popup shadow (string - html color) */
  'shadow_color'?: string | null;

  /* thickness of spike (integer) */
  'spike_girth'?: string | null;

  /* length of spike (integer) */
  'spike_length'?: string | null;

  /* color of border (string - html color) */
  'stroke_style'?: string | null;

  /* width of border (integer) */
  'stroke_width'?: string | null;

  /* width of popup (number in px) */
  'width'?: string | null;
}

/* Store custom defined beautytips. */
export interface beautytips_custom_tipsEntity {

  /* The animation that will occurs when the beautytips turns off. */
  'animation_off'?: string | null;

  /* The animation that will occurs when the beautytips turns on. */
  'animation_on'?: string | null;

  /* The content that will be displayed. Depends on content type. */
  'content'?: string | null;

  /* What kind of content will be grabbed for the display. */
  'content_type'?: string | null;
  'disable_link'?: number;

  /* The element to which this beautytips will be applied. */
  'element': string;

  /* Whether or not this tip is enabled */
  'enabled'?: number | null;

  /* The unique id for the custom beautytip. */
  'id'?: number;

  /* Contains a list of paths on which to include/exclude the beautytip, depending on "visibility" setting. */
  'pages': string;

  /* The position order in which this beautytip should display. */
  'positions'?: string | null;
  'shrink'?: number;

  /* The style of the beautytip. */
  'style'?: string | null;

  /* The event that will turn the beautytips off. */
  'trigger_off'?: string | null;

  /* The event that will turn the beautytips on. */
  'trigger_on'?: string | null;

  /* Flag to indicate how to show beautytips on pages. (0 = Show on all pages except listed pages, 1 = Show only on listed pages, 2 = Use custom PHP code to determine visibility) */
  'visibility'?: number;
}

/* Stores block settings, such as region and visibility... */
export interface blockEntity {

  /* Primary Key: Unique block ID. */
  'bid'?: number;

  /* Binary flag to indicate block cache mode. (-2: Custom cache, -1: Do not cache, 1: Cache per role, 2: Cache per user, 4: Cache per page, 8: Block cache global) See DRUPAL_CACHE_* constants in ../includes/common.inc for more detailed information. */
  'cache'?: number;

  /* Flag to indicate how users may control visibility of the block. (0 = Users cannot control, 1 = On by default, but can be hidden, 2 = Hidden by default, but can be shown) */
  'custom'?: number;

  /* Unique ID for block within a module. */
  'delta'?: string;

  /* The module from which the block originates; for example, ’user’ for the Who’s Online block, and ’block’ for any custom blocks. */
  'module'?: string;

  /* Contents of the "Pages" block; contains either a list of paths on which to include/exclude the block or PHP code, depending on "visibility" setting. */
  'pages': string;

  /* Theme region within which the block is set. */
  'region'?: string;

  /* Block enabled status. (1 = enabled, 0 = disabled) */
  'status'?: number;

  /* The theme under which the block settings apply. */
  'theme'?: string;

  /* Custom title for the block. (Empty string will use block default title, <none> will remove the title, text will cause block to use specified title.) */
  'title'?: string;

  /* Flag to indicate how to show blocks on pages. (0 = Show on all pages except listed pages, 1 = Show only on listed pages, 2 = Use custom PHP code to determine visibility) */
  'visibility'?: number;

  /* Block weight within region. */
  'weight'?: number;
}

/* Stores contents of custom-made blocks. */
export interface block_customEntity {

  /* The block’s block.bid. */
  'bid'?: number;

  /* Block contents. */
  'body'?: string | null;

  /* The filter_format.format of the block body. */
  'format'?: string | null;

  /* Block description. */
  'info'?: string;
}

/* Sets up display criteria for blocks based on content types */
export interface block_node_typeEntity {

  /* The block’s unique delta within module, from block.delta. */
  'delta': string;

  /* The block’s origin module, from block.module. */
  'module': string;

  /* The machine-readable name of this type from node_type.type. */
  'type': string;
}

/* Sets up access permissions for blocks based on user roles */
export interface block_roleEntity {

  /* The block’s unique delta within module, from block.delta. */
  'delta': string;

  /* The block’s origin module, from block.module. */
  'module': string;

  /* The user’s role ID from users_roles.rid. */
  'rid': number;
}

/* Stores blocked IP addresses. */
export interface blocked_ipsEntity {

  /* Primary Key: unique ID for IP addresses. */
  'iid'?: number;

  /* IP address */
  'ip'?: string;
}

/* Generic cache table for caching things not separated out... */
export interface cacheEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for Administration menu to store client-side... */
export interface cache_admin_menuEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for the Block module to store already built... */
export interface cache_blockEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for data required to bootstrap Drupal, may be... */
export interface cache_bootstrapEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Generic cache table for caching things not separated out... */
export interface cache_fieldEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for the Filter module to store already... */
export interface cache_filterEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for the form system to store recently built... */
export interface cache_formEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table used to store information about image... */
export interface cache_imageEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for the the results of retreived XML... */
export interface cache_media_xmlEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for the menu system to store router... */
export interface cache_menuEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table used to store compressed pages for anonymous... */
export interface cache_pageEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for path alias lookup. */
export interface cache_pathEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for the rules engine to store configured items. */
export interface cache_rulesEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for token information. */
export interface cache_tokenEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for the Update module to store information... */
export interface cache_updateEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Generic cache table for caching things not separated out... */
export interface cache_viewsEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for views to store pre-rendered queries,... */
export interface cache_views_dataEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}
export interface cck_field_settingsEntity {

  /* The name of the bundle, NULL for field settings. */
  'bundle'?: string | null;

  /* The name of the entity type, NULL for field settings. */
  'entity_type'?: string;

  /* The name of the field. */
  'field_name': string;

  /* The name of the language, NULL for field settings. */
  'language'?: string | null;

  /* The name of the setting that CCK is managing (default_value_php, allowed_values_php, etc). */
  'setting': string;

  /* The custom value for this setting. */
  'setting_option'?: string | null;

  /* The type of setting that CCK is managing (field, instance, widget, display). */
  'setting_type': string;
}

/* Stores CKEditor input format assignments */
export interface ckeditor_input_formatEntity {

  /* Drupal filter format ID */
  'format'?: string;

  /* Name of the CKEditor role */
  'name'?: string;
}

/* Stores CKEditor profile settings */
export interface ckeditor_settingsEntity {

  /* Name of the CKEditor profile */
  'name'?: string;

  /* Profile settings */
  'settings'?: string | null;
}

/* Stores comments and associated data. */
export interface commentEntity {

  /* The time that the comment was last edited, as a Unix timestamp. */
  'changed'?: number;

  /* Primary Key: Unique comment ID. */
  'cid'?: number;

  /* The time that the comment was created, as a Unix timestamp. */
  'created'?: number;

  /* The comment author’s home page address from the comment form, if user is anonymous, and the ’Anonymous users may/must leave their contact information’ setting is turned on. */
  'homepage'?: string | null;

  /* The author’s host name. */
  'hostname'?: string;

  /* The languages.language of this comment. */
  'language'?: string;

  /* The comment author’s e-mail address from the comment form, if user is anonymous, and the ’Anonymous users may/must leave their contact information’ setting is turned on. */
  'mail'?: string | null;

  /* The comment author’s name. Uses users.name if the user is logged in, otherwise uses the value typed into the comment form. */
  'name'?: string | null;

  /* The node.nid to which this comment is a reply. */
  'nid'?: number;

  /* The comment.cid to which this comment is a reply. If set to 0, this comment is not a reply to an existing comment. */
  'pid'?: number;

  /* The published status of a comment. (0 = Not Published, 1 = Published) */
  'status'?: number;

  /* The comment title. */
  'subject'?: string;

  /* The vancode representation of the comment’s place in a thread. */
  'thread': string;

  /* The users.uid who authored the comment. If set to 0, this comment was created by an anonymous user. */
  'uid'?: number;
}

/* A special cache used to store CSS that must be non-volatile. */
export interface ctools_css_cacheEntity {

  /* The CSS ID this cache object belongs to. */
  'cid': string;

  /* CSS being stored. */
  'css'?: string | null;

  /* The filename this CSS is stored in. */
  'filename'?: string | null;

  /* Whether or not this CSS needs to be filtered. */
  'filter'?: number | null;
}

/* A special cache used to store objects that are being... */
export interface ctools_object_cacheEntity {

  /* Serialized data being stored. */
  'data'?: string | null;

  /* The name of the object this cache is attached to. */
  'name': string;

  /* The type of the object this cache is attached to; this essentially represents the owner so that several sub-systems can use this cache. */
  'obj': string;

  /* The session ID this cache object belongs to. */
  'sid': string;

  /* The time this cache was created or updated. */
  'updated'?: number;
}

/* Stores configured date formats for each locale. */
export interface date_format_localeEntity {

  /* The date format string. */
  'format': string;

  /* A languages.language for this format to be used with. */
  'language': string;

  /* The date format type, e.g. medium. */
  'type': string;
}

/* Stores configured date format types. */
export interface date_format_typeEntity {

  /* Whether or not this is a system provided format. */
  'locked'?: number;

  /* The human readable name of the format type. */
  'title': string;

  /* The date format type, e.g. medium. */
  'type': string;
}

/* Stores configured date formats. */
export interface date_formatsEntity {

  /* The date format identifier. */
  'dfid'?: number;

  /* The date format string. */
  'format': string;

  /* Whether or not this format can be modified. */
  'locked'?: number;

  /* The date format type, e.g. medium. */
  'type': string;
}
export interface field_configEntity {

  /* Boolean indicating whether the module that implements the field type is enabled. */
  'active'?: number;
  'cardinality'?: number;

  /* Serialized data containing the field properties that do not warrant a dedicated column. */
  'data': any;
  'deleted'?: number;

  /* The name of this field. Non-deleted field names are unique, but multiple deleted fields can have the same name. */
  'field_name': string;

  /* The primary identifier for a field */
  'id'?: number;

  /* @TODO */
  'locked'?: number;

  /* The module that implements the field type. */
  'module'?: string;

  /* Boolean indicating whether the module that implements the storage backend is enabled. */
  'storage_active'?: number;

  /* The module that implements the storage backend. */
  'storage_module'?: string;

  /* The storage backend for the field. */
  'storage_type': string;
  'translatable'?: number;

  /* The type of this field. */
  'type': string;
}
export interface field_config_instanceEntity {
  'bundle'?: string;
  'data': any;
  'deleted'?: number;
  'entity_type'?: string;

  /* The identifier of the field attached by this instance */
  'field_id': number;
  'field_name'?: string;

  /* The primary identifier for a field instance */
  'id'?: number;
}

/* Data storage for field 2 (body) */
export interface field_data_bodyEntity {
  'body_format'?: string | null;
  'body_summary'?: string | null;
  'body_value'?: string | null;

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 1 (comment_body) */
export interface field_data_comment_bodyEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;
  'comment_body_format'?: string | null;
  'comment_body_value'?: string | null;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 10 (field_event_date) */
export interface field_data_field_event_dateEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_event_date_value'?: Date | null;
  'field_event_date_value2'?: Date | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 21 (field_facebook_sharing_copy) */
export interface field_data_field_facebook_sharing_copyEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_facebook_sharing_copy_format'?: string | null;
  'field_facebook_sharing_copy_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 22 (field_facebook_sharing_fbhl) */
export interface field_data_field_facebook_sharing_fbhlEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_facebook_sharing_fbhl_format'?: string | null;
  'field_facebook_sharing_fbhl_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 23 (field_facebook_sharing_fbweb) */
export interface field_data_field_facebook_sharing_fbwebEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_facebook_sharing_fbweb_format'?: string | null;
  'field_facebook_sharing_fbweb_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 15 (field_google_map) */
export interface field_data_field_google_mapEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_google_map_format'?: string | null;
  'field_google_map_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 20 (field_has_more_button) */
export interface field_data_field_has_more_buttonEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_has_more_button_value'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 4 (field_image) */
export interface field_data_field_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* Alternative image text, for the image’s ’alt’ attribute. */
  'field_image_alt'?: string | null;

  /* The file_managed.fid being referenced in this field. */
  'field_image_fid'?: number | null;

  /* The height of the image in pixels. */
  'field_image_height'?: number | null;

  /* Image title text, for the image’s ’title’ attribute. */
  'field_image_title'?: string | null;

  /* The width of the image in pixels. */
  'field_image_width'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 12 (field_nt_detail_page_banner) */
export interface field_data_field_nt_detail_page_bannerEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* Alternative image text, for the image’s ’alt’ attribute. */
  'field_nt_detail_page_banner_alt'?: string | null;

  /* The file_managed.fid being referenced in this field. */
  'field_nt_detail_page_banner_fid'?: number | null;

  /* The height of the image in pixels. */
  'field_nt_detail_page_banner_height'?: number | null;

  /* Image title text, for the image’s ’title’ attribute. */
  'field_nt_detail_page_banner_title'?: string | null;

  /* The width of the image in pixels. */
  'field_nt_detail_page_banner_width'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 5 (field_nt_post_image) */
export interface field_data_field_nt_post_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* Alternative image text, for the image’s ’alt’ attribute. */
  'field_nt_post_image_alt'?: string | null;

  /* The file_managed.fid being referenced in this field. */
  'field_nt_post_image_fid'?: number | null;

  /* The height of the image in pixels. */
  'field_nt_post_image_height'?: number | null;

  /* Image title text, for the image’s ’title’ attribute. */
  'field_nt_post_image_title'?: string | null;

  /* The width of the image in pixels. */
  'field_nt_post_image_width'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 19 (field_nt_post_page_carousel) */
export interface field_data_field_nt_post_page_carouselEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_nt_post_page_carousel_data'?: string | null;
  'field_nt_post_page_carousel_fid'?: number | null;
  'field_nt_post_page_carousel_title'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 18 (field_nt_post_title) */
export interface field_data_field_nt_post_titleEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_nt_post_title_format'?: string | null;
  'field_nt_post_title_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 6 (field_nt_tags) */
export interface field_data_field_nt_tagsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_nt_tags_tid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 11 (field_nt_thumb_description) */
export interface field_data_field_nt_thumb_descriptionEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_nt_thumb_description_format'?: string | null;
  'field_nt_thumb_description_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 7 (field_nt_thumb_image) */
export interface field_data_field_nt_thumb_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* Alternative image text, for the image’s ’alt’ attribute. */
  'field_nt_thumb_image_alt'?: string | null;

  /* The file_managed.fid being referenced in this field. */
  'field_nt_thumb_image_fid'?: number | null;

  /* The height of the image in pixels. */
  'field_nt_thumb_image_height'?: number | null;

  /* Image title text, for the image’s ’title’ attribute. */
  'field_nt_thumb_image_title'?: string | null;

  /* The width of the image in pixels. */
  'field_nt_thumb_image_width'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 3 (field_tags) */
export interface field_data_field_tagsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_tags_tid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 16 (field_testing_html_enclosing) */
export interface field_data_field_testing_html_enclosingEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_testing_html_enclosing_format'?: string | null;
  'field_testing_html_enclosing_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 24 (field_twpost) */
export interface field_data_field_twpostEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_twpost_format'?: string | null;
  'field_twpost_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 17 (field_youtube_video_id) */
export interface field_data_field_youtube_video_idEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_youtube_video_id_format'?: string | null;
  'field_youtube_video_id_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 25 (meta_description) */
export interface field_data_meta_descriptionEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* The language for this data item. */
  'language'?: string;
  'meta_description_metatags_quick'?: string | null;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 26 (meta_keywords) */
export interface field_data_meta_keywordsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* The language for this data item. */
  'language'?: string;
  'meta_keywords_metatags_quick'?: string | null;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Revision archive storage for field 2 (body) */
export interface field_revision_bodyEntity {
  'body_format'?: string | null;
  'body_summary'?: string | null;
  'body_value'?: string | null;

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 1 (comment_body) */
export interface field_revision_comment_bodyEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;
  'comment_body_format'?: string | null;
  'comment_body_value'?: string | null;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 10 (field_event_date) */
export interface field_revision_field_event_dateEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_event_date_value'?: Date | null;
  'field_event_date_value2'?: Date | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 21 (field_facebook... */
export interface field_revision_field_facebook_sharing_copyEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_facebook_sharing_copy_format'?: string | null;
  'field_facebook_sharing_copy_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 22 (field_facebook... */
export interface field_revision_field_facebook_sharing_fbhlEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_facebook_sharing_fbhl_format'?: string | null;
  'field_facebook_sharing_fbhl_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 23 (field_facebook... */
export interface field_revision_field_facebook_sharing_fbwebEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_facebook_sharing_fbweb_format'?: string | null;
  'field_facebook_sharing_fbweb_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 15 (field_google_map) */
export interface field_revision_field_google_mapEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_google_map_format'?: string | null;
  'field_google_map_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 20 (field_has_more... */
export interface field_revision_field_has_more_buttonEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_has_more_button_value'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 4 (field_image) */
export interface field_revision_field_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* Alternative image text, for the image’s ’alt’ attribute. */
  'field_image_alt'?: string | null;

  /* The file_managed.fid being referenced in this field. */
  'field_image_fid'?: number | null;

  /* The height of the image in pixels. */
  'field_image_height'?: number | null;

  /* Image title text, for the image’s ’title’ attribute. */
  'field_image_title'?: string | null;

  /* The width of the image in pixels. */
  'field_image_width'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 12 (field_nt_detail... */
export interface field_revision_field_nt_detail_page_bannerEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* Alternative image text, for the image’s ’alt’ attribute. */
  'field_nt_detail_page_banner_alt'?: string | null;

  /* The file_managed.fid being referenced in this field. */
  'field_nt_detail_page_banner_fid'?: number | null;

  /* The height of the image in pixels. */
  'field_nt_detail_page_banner_height'?: number | null;

  /* Image title text, for the image’s ’title’ attribute. */
  'field_nt_detail_page_banner_title'?: string | null;

  /* The width of the image in pixels. */
  'field_nt_detail_page_banner_width'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 5 (field_nt_post_image) */
export interface field_revision_field_nt_post_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* Alternative image text, for the image’s ’alt’ attribute. */
  'field_nt_post_image_alt'?: string | null;

  /* The file_managed.fid being referenced in this field. */
  'field_nt_post_image_fid'?: number | null;

  /* The height of the image in pixels. */
  'field_nt_post_image_height'?: number | null;

  /* Image title text, for the image’s ’title’ attribute. */
  'field_nt_post_image_title'?: string | null;

  /* The width of the image in pixels. */
  'field_nt_post_image_width'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 19 (field_nt_post_page... */
export interface field_revision_field_nt_post_page_carouselEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_nt_post_page_carousel_data'?: string | null;
  'field_nt_post_page_carousel_fid'?: number | null;
  'field_nt_post_page_carousel_title'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 18 (field_nt_post_title) */
export interface field_revision_field_nt_post_titleEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_nt_post_title_format'?: string | null;
  'field_nt_post_title_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 6 (field_nt_tags) */
export interface field_revision_field_nt_tagsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_nt_tags_tid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 11 (field_nt_thumb... */
export interface field_revision_field_nt_thumb_descriptionEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_nt_thumb_description_format'?: string | null;
  'field_nt_thumb_description_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 7 (field_nt_thumb_image) */
export interface field_revision_field_nt_thumb_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* Alternative image text, for the image’s ’alt’ attribute. */
  'field_nt_thumb_image_alt'?: string | null;

  /* The file_managed.fid being referenced in this field. */
  'field_nt_thumb_image_fid'?: number | null;

  /* The height of the image in pixels. */
  'field_nt_thumb_image_height'?: number | null;

  /* Image title text, for the image’s ’title’ attribute. */
  'field_nt_thumb_image_title'?: string | null;

  /* The width of the image in pixels. */
  'field_nt_thumb_image_width'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 3 (field_tags) */
export interface field_revision_field_tagsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_tags_tid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 16 (field_testing_html... */
export interface field_revision_field_testing_html_enclosingEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_testing_html_enclosing_format'?: string | null;
  'field_testing_html_enclosing_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 24 (field_twpost) */
export interface field_revision_field_twpostEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_twpost_format'?: string | null;
  'field_twpost_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 17 (field_youtube... */
export interface field_revision_field_youtube_video_idEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_youtube_video_id_format'?: string | null;
  'field_youtube_video_id_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 25 (meta_description) */
export interface field_revision_meta_descriptionEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* The language for this data item. */
  'language'?: string;
  'meta_description_metatags_quick'?: string | null;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 26 (meta_keywords) */
export interface field_revision_meta_keywordsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* The language for this data item. */
  'language'?: string;
  'meta_keywords_metatags_quick'?: string | null;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Stores configuration options for file displays. */
export interface file_displayEntity {

  /* A combined string (FILE_TYPE__VIEW_MODE__FILE_FORMATTER) identifying a file display configuration. For integration with CTools Exportables, stored as a single string rather than as a compound primary key. */
  'name': string;

  /* A serialized array of name value pairs that store the formatter settings for the display. */
  'settings'?: any | null;

  /* The status of the display. (1 = enabled, 0 = disabled) */
  'status'?: number;

  /* Weight of formatter within the display chain for the associated file type and view mode. A file is rendered using the lowest weighted enabled display configuration that matches the file type and view mode and that is capable of displaying the file. */
  'weight'?: number;
}

/* Stores information for uploaded files. */
export interface file_managedEntity {

  /* File ID. */
  'fid'?: number;

  /* The file’s MIME type. */
  'filemime'?: string;

  /* Name of the file with no path components. This may differ from the basename of the URI if the file is renamed to avoid overwriting an existing file. */
  'filename'?: string;

  /* The size of the file in bytes. */
  'filesize'?: number;

  /* A field indicating the status of the file. Two status are defined in core: temporary (0) and permanent (1). Temporary files older than DRUPAL_MAXIMUM_TEMP_FILE_AGE will be removed during a cron run. */
  'status'?: number;

  /* UNIX timestamp for when the file was added. */
  'timestamp'?: number;

  /* The type of this file. */
  'type'?: string;

  /* The users.uid of the user who is associated with the file. */
  'uid'?: number;

  /* The URI to access the file (either local or remote). */
  'uri'?: string;
}

/* Track where a file is used. */
export interface file_usageEntity {

  /* The number of times this file is used by this object. */
  'count'?: number;

  /* File ID. */
  'fid': number;

  /* The primary key of the object using the file. */
  'id'?: number;

  /* The name of the module that is using the file. */
  'module'?: string;

  /* The name of the object type in which the file is used. */
  'type'?: string;
}

/* Table that maps filters (HTML corrector) to text formats ... */
export interface filterEntity {

  /* Foreign key: The filter_format.format to which this filter is assigned. */
  'format': string;

  /* The origin module of the filter. */
  'module'?: string;

  /* Name of the filter being referenced. */
  'name'?: string;

  /* A serialized array of name value pairs that store the filter settings for the specific format. */
  'settings'?: any | null;

  /* Filter enabled status. (1 = enabled, 0 = disabled) */
  'status'?: number;

  /* Weight of filter within format. */
  'weight'?: number;
}

/* Stores text formats: custom groupings of filters, such as... */
export interface filter_formatEntity {

  /* Flag to indicate whether format is cacheable. (1 = cacheable, 0 = not cacheable) */
  'cache'?: number;

  /* Primary Key: Unique machine name of the format. */
  'format': string;

  /* Name of the text format (Filtered HTML). */
  'name'?: string;

  /* The status of the text format. (1 = enabled, 0 = disabled) */
  'status'?: number;

  /* Weight of text format to use when listing. */
  'weight'?: number;
}

/* Flood controls the threshold of events, such as the... */
export interface floodEntity {

  /* Name of event (e.g. contact). */
  'event'?: string;

  /* Expiration timestamp. Expired events are purged on cron run. */
  'expiration'?: number;

  /* Unique flood event ID. */
  'fid'?: number;

  /* Identifier of the visitor, such as an IP address or hostname. */
  'identifier'?: string;

  /* Timestamp of the event. */
  'timestamp'?: number;
}

/* A record of which users have read which nodes. */
export interface historyEntity {

  /* The node.nid that was read. */
  'nid'?: number;

  /* The Unix timestamp at which the read occurred. */
  'timestamp'?: number;

  /* The users.uid that read the node nid. */
  'uid'?: number;
}

/* Stores configuration options for image effects. */
export interface image_effectsEntity {

  /* The configuration data for the effect. */
  'data': any;

  /* The primary identifier for an image effect. */
  'ieid'?: number;

  /* The image_styles.isid for an image style. */
  'isid'?: number;

  /* The unique name of the effect to be executed. */
  'name': string;

  /* The weight of the effect in the style. */
  'weight'?: number;
}

/* Stores configuration options for image styles. */
export interface image_stylesEntity {

  /* The primary identifier for an image style. */
  'isid'?: number;

  /* The style name. */
  'name': string;
}

/* Stores fids that have been included in the media tag in... */
export interface media_filter_usageEntity {

  /* The media file_managed.fid. */
  'fid'?: number;

  /* The timestamp the fid was last recorded by media_filter() */
  'timestamp'?: number;
}

/* Stores the user preference for whether to list as table... */
export interface media_list_typeEntity {

  /* The type of display (table or images). */
  'type'?: string;

  /* The user.uid of the user. */
  'uid'?: number;
}

/* Stores the settings for media types. */
export interface media_typeEntity {

  /* If this is a base type (i.e. cannot be deleted) */
  'base'?: number;

  /* The label of the media type. */
  'label'?: string;

  /* The machine name of the media type. */
  'name'?: string;

  /* Callback to determine if provided media is of this type. */
  'type_callback'?: string | null;

  /* A serialized array of name value pairs that will be passed to the callback function */
  'type_callback_args'?: string | null;

  /* Weight of media type. Determines which one wins when claiming a piece of media (first wins) */
  'weight'?: number;
}

/* Holds definitions for top-level custom menus (for example... */
export interface menu_customEntity {

  /* Menu description. */
  'description'?: string | null;

  /* Primary Key: Unique key for menu. This is used as a block delta so length is 32. */
  'menu_name'?: string;

  /* Menu title; displayed at top of block. */
  'title'?: string;
}

/* Contains the individual links within a menu. */
export interface menu_linksEntity {

  /* A flag to indicate that the user has manually created or edited the link (1 = customized, 0 = not customized). */
  'customized'?: number;

  /* The depth relative to the top level. A link with plid == 0 will have depth == 1. */
  'depth'?: number;

  /* Flag for whether this link should be rendered as expanded in menus - expanded links always have their child links displayed, instead of only when the link is in the active trail (1 = expanded, 0 = not expanded) */
  'expanded'?: number;

  /* A flag to indicate if the link points to a full URL starting with a protocol, like http:// (1 = external, 0 = internal). */
  'external'?: number;

  /* Flag indicating whether any links have this link as a parent (1 = children exist, 0 = no children). */
  'has_children'?: number;

  /* A flag for whether the link should be rendered in menus. (1 = a disabled menu item that may be shown on admin screens, -1 = a menu callback, 0 = a normal, visible link) */
  'hidden'?: number;

  /* The Drupal path or external path this link points to. */
  'link_path'?: string;

  /* The text displayed for the link, which may be modified by a title callback stored in menu_router. */
  'link_title'?: string;

  /* The menu name. All links with the same menu name (such as ’navigation’) are part of the same menu. */
  'menu_name'?: string;

  /* The menu link ID (mlid) is the integer primary key. */
  'mlid'?: number;

  /* The name of the module that generated this link. */
  'module'?: string;

  /* A serialized array of options to be passed to the url() or l() function, such as a query string or HTML attributes. */
  'options'?: any | null;

  /* The first mlid in the materialized path. If N = depth, then pN must equal the mlid. If depth > 1 then p(N-1) must equal the plid. All pX where X > depth must equal zero. The columns p1 .. p9 are also called the parents. */
  'p1'?: number;

  /* The second mlid in the materialized path. See p1. */
  'p2'?: number;

  /* The third mlid in the materialized path. See p1. */
  'p3'?: number;

  /* The fourth mlid in the materialized path. See p1. */
  'p4'?: number;

  /* The fifth mlid in the materialized path. See p1. */
  'p5'?: number;

  /* The sixth mlid in the materialized path. See p1. */
  'p6'?: number;

  /* The seventh mlid in the materialized path. See p1. */
  'p7'?: number;

  /* The eighth mlid in the materialized path. See p1. */
  'p8'?: number;

  /* The ninth mlid in the materialized path. See p1. */
  'p9'?: number;

  /* The parent link ID (plid) is the mlid of the link above in the hierarchy, or zero if the link is at the top level in its menu. */
  'plid'?: number;

  /* For links corresponding to a Drupal path (external = 0), this connects the link to a menu_router.path for joins. */
  'router_path'?: string;

  /* Flag that indicates that this link was generated during the update from Drupal 5. */
  'updated'?: number;

  /* Link weight among links in the same menu at the same depth. */
  'weight'?: number;
}

/* Maps paths to various callbacks (access, page and title) */
export interface menu_routerEntity {

  /* A serialized array of arguments for the access callback. */
  'access_arguments'?: any | null;

  /* The callback which determines the access to this router path. Defaults to user_access. */
  'access_callback'?: string;

  /* Only for local tasks (tabs) - the context of a local task to control its placement. */
  'context'?: number;

  /* The name of the function that sends the result of the page_callback function to the browser. */
  'delivery_callback'?: string;

  /* A description of this item. */
  'description': string;

  /* A numeric representation of how specific the path is. */
  'fit'?: number;

  /* The file to include for this element, usually the page callback function lives in this file. */
  'include_file'?: string | null;

  /* A serialized array of function names (like node_load) to be called to load an object corresponding to a part of the current path. */
  'load_functions': any;

  /* Number of parts in this router path. */
  'number_parts'?: number;

  /* A serialized array of arguments for the page callback. */
  'page_arguments'?: any | null;

  /* The name of the function that renders the page. */
  'page_callback'?: string;

  /* Primary Key: the Drupal path this entry describes */
  'path'?: string;

  /* The position of the block (left or right) on the system administration page for this item. */
  'position'?: string;

  /* Only for local tasks (tabs) - the router path of the parent page (which may also be a local task). */
  'tab_parent'?: string;

  /* Router path of the closest non-tab parent page. For pages that are not local tasks, this will be the same as the path. */
  'tab_root'?: string;

  /* A serialized array of arguments for the theme callback. */
  'theme_arguments'?: string;

  /* A function which returns the name of the theme that will be used to render this page. If left empty, the default theme will be used. */
  'theme_callback'?: string;

  /* The title for the current page, or the title for the tab if this is a local task. */
  'title'?: string;

  /* A serialized array of arguments for the title callback. If empty, the title will be used as the sole argument for the title callback. */
  'title_arguments'?: string;

  /* A function which will alter the title. Defaults to t() */
  'title_callback'?: string;

  /* A serialized array of function names (like user_uid_optional_to_arg) to be called to replace a part of the router path with another string. */
  'to_arg_functions': any;

  /* Numeric representation of the type of the menu item, like MENU_LOCAL_TASK. */
  'type'?: number;

  /* Weight of the element. Lighter weights are higher up, heavier weights go down. */
  'weight'?: number;
}

/* Path based meta tags */
export interface metatags_quick_path_basedEntity {

  /* Entity id */
  'id'?: number;

  /* Language code */
  'lang': string;

  /* The path of the page to apply meta tags to */
  'path': string;
}

/* The base table for nodes. */
export interface nodeEntity {

  /* The Unix timestamp when the node was most recently saved. */
  'changed'?: number;

  /* Whether comments are allowed on this node: 0 = no, 1 = closed (read only), 2 = open (read/write). */
  'comment'?: number;

  /* The Unix timestamp when the node was created. */
  'created'?: number;

  /* The languages.language of this node. */
  'language'?: string;

  /* The primary identifier for a node. */
  'nid'?: number;

  /* Boolean indicating whether the node should be displayed on the front page. */
  'promote'?: number;

  /* Boolean indicating whether the node is published (visible to non-administrators). */
  'status'?: number;

  /* Boolean indicating whether the node should be displayed at the top of lists in which it appears. */
  'sticky'?: number;

  /* The title of this node, always treated as non-markup plain text. */
  'title'?: string;

  /* The translation set id for this node, which equals the node id of the source post in each set. */
  'tnid'?: number;

  /* A boolean indicating whether this translation page needs to be updated. */
  'translate'?: number;

  /* The node_type.type of this node. */
  'type'?: string;

  /* The users.uid that owns this node; initially, this is the user that created it. */
  'uid'?: number;

  /* The current node_revision.vid version identifier. */
  'vid'?: number | null;
}

/* Identifies which realm/grant pairs a user must possess in... */
export interface node_accessEntity {

  /* The grant ID a user must possess in the specified realm to gain this row’s privileges on the node. */
  'gid'?: number;

  /* Boolean indicating whether a user with the realm/grant pair can delete this node. */
  'grant_delete'?: number;

  /* Boolean indicating whether a user with the realm/grant pair can edit this node. */
  'grant_update'?: number;

  /* Boolean indicating whether a user with the realm/grant pair can view this node. */
  'grant_view'?: number;

  /* The node.nid this record affects. */
  'nid'?: number;

  /* The realm in which the user must possess the grant ID. Each node access node can define one or more realms. */
  'realm'?: string;
}

/* Maintains statistics of node and comments posts to show ... */
export interface node_comment_statisticsEntity {

  /* The comment.cid of the last comment. */
  'cid'?: number;

  /* The total number of comments on this node. */
  'comment_count'?: number;

  /* The name of the latest author to post a comment on this node, from comment.name. */
  'last_comment_name'?: string | null;

  /* The Unix timestamp of the last comment that was posted within this node, from comment.changed. */
  'last_comment_timestamp'?: number;

  /* The user ID of the latest author to post a comment on this node, from comment.uid. */
  'last_comment_uid'?: number;

  /* The node.nid for which the statistics are compiled. */
  'nid'?: number;
}

/* Stores information about each saved version of a node. */
export interface node_revisionEntity {

  /* Whether comments are allowed on this node (at the time of this revision): 0 = no, 1 = closed (read only), 2 = open (read/write). */
  'comment'?: number;

  /* The log entry explaining the changes in this version. */
  'log': string;

  /* The node this version belongs to. */
  'nid'?: number;

  /* Boolean indicating whether the node (at the time of this revision) should be displayed on the front page. */
  'promote'?: number;

  /* Boolean indicating whether the node (at the time of this revision) is published (visible to non-administrators). */
  'status'?: number;

  /* Boolean indicating whether the node (at the time of this revision) should be displayed at the top of lists in which it appears. */
  'sticky'?: number;

  /* A Unix timestamp indicating when this version was created. */
  'timestamp'?: number;

  /* The title of this version. */
  'title'?: string;

  /* The users.uid that created this version. */
  'uid'?: number;

  /* The primary identifier for this version. */
  'vid'?: number;
}

/* Stores information about all defined node types. */
export interface node_typeEntity {

  /* The base string used to construct callbacks corresponding to this node type. */
  'base': string;

  /* A boolean indicating whether this type is defined by a module (FALSE) or by a user via Add content type (TRUE). */
  'custom'?: number;

  /* A brief description of this type. */
  'description': string;

  /* A boolean indicating whether the node type is disabled. */
  'disabled'?: number;

  /* Boolean indicating whether this type uses the node.title field. */
  'has_title': number;

  /* Help information shown to the user when creating a node of this type. */
  'help': string;

  /* A boolean indicating whether the administrator can change the machine name of this type. */
  'locked'?: number;

  /* A boolean indicating whether this type has been modified by an administrator; currently not used in any way. */
  'modified'?: number;

  /* The module defining this node type. */
  'module': string;

  /* The human-readable name of this type. */
  'name'?: string;

  /* The original machine-readable name of this node type. This may be different from the current type name if the locked field is 0. */
  'orig_type'?: string;

  /* The label displayed for the title field on the edit form. */
  'title_label'?: string;

  /* The machine-readable name of this type. */
  'type': string;
}

/* Prev/Next node */
export interface prev_next_nodeEntity {
  'changed': number;
  'next_nid': number;
  'nid': number;
  'prev_nid': number;
}

/* Stores items in queues. */
export interface queueEntity {

  /* Timestamp when the item was created. */
  'created'?: number;

  /* The arbitrary data for the item. */
  'data'?: any | null;

  /* Timestamp when the claim lease expires on the item. */
  'expire'?: number;

  /* Primary Key: Unique item ID. */
  'item_id'?: number;

  /* The queue name. */
  'name'?: string;
}

/* Stores custom RDF mappings for user defined content types... */
export interface rdf_mappingEntity {

  /* The name of the bundle a mapping applies to. */
  'bundle': string;

  /* The serialized mapping of the bundle type and fields to RDF terms. */
  'mapping'?: any | null;

  /* The name of the entity type a mapping applies to (node, user, comment, etc.). */
  'type': string;
}

/* Each record is a function, class, or interface name and... */
export interface registryEntity {

  /* Name of the file. */
  'filename': string;

  /* Name of the module the file belongs to. */
  'module'?: string;

  /* The name of the function, class, or interface. */
  'name'?: string;

  /* Either function or class or interface. */
  'type'?: string;

  /* The order in which this module’s hooks should be invoked relative to other modules. Equal-weighted modules are ordered by name. */
  'weight'?: number;
}

/* Files parsed to build the registry. */
export interface registry_fileEntity {

  /* Path to the file. */
  'filename': string;

  /* sha-256 hash of the file’s contents when last parsed. */
  'hash': string;
}

/* Stores user roles. */
export interface roleEntity {

  /* Unique role name. */
  'name'?: string;

  /* Primary Key: Unique role ID. */
  'rid'?: number;

  /* The weight of this role in listings and the user interface. */
  'weight'?: number;
}

/* Stores the permissions assigned to user roles. */
export interface role_permissionEntity {

  /* The module declaring the permission. */
  'module'?: string;

  /* A single permission granted to the role identified by rid. */
  'permission'?: string;

  /* Foreign Key: role.rid. */
  'rid': number;
}
export interface rules_configEntity {

  /* Whether to use a permission to control access for using components. */
  'access_exposed'?: number;

  /* Boolean indicating whether the configuration is active. Usage depends on how the using module makes use of it. */
  'active'?: number;

  /* Everything else, serialized. */
  'data'?: any | null;

  /* Dirty configurations fail the integrity check, e.g. due to missing dependencies. */
  'dirty'?: number;

  /* The internal identifier for any configuration. */
  'id'?: number;

  /* The label of the configuration. */
  'label'?: string;

  /* The name of the providing module if the entity has been defined in code. */
  'module'?: string | null;

  /* The name of the configuration. */
  'name': string;

  /* The name of the plugin of this configuration. */
  'plugin': string;

  /* The exportable status of the entity. */
  'status'?: number;

  /* Weight of the configuration. Usage depends on how the using module makes use of it. */
  'weight'?: number;
}
export interface rules_dependenciesEntity {

  /* The primary identifier of the configuration. */
  'id': number;

  /* The name of the module that is required for the configuration. */
  'module': string;
}

/* Stores scheduled tasks. */
export interface rules_schedulerEntity {

  /* The scheduled configuration’s name. */
  'config'?: string;

  /* The Unix timestamp of when the task is to be scheduled. */
  'date': number;

  /* The user defined string identifying this task. */
  'identifier'?: string | null;

  /* The whole, serialized evaluation state. */
  'state'?: string | null;

  /* The scheduled task’s id. */
  'tid'?: number;
}
export interface rules_tagsEntity {

  /* The primary identifier of the configuration. */
  'id': number;

  /* The tag string associated with this configuration */
  'tag': string;
}
export interface rules_triggerEntity {

  /* The name of the event on which the configuration should be triggered. */
  'event'?: string;

  /* The primary identifier of the configuration. */
  'id': number;
}

/* Stores items that will be searched. */
export interface search_datasetEntity {

  /* List of space-separated words from the item. */
  'data': string;

  /* Set to force node reindexing. */
  'reindex'?: number;

  /* Search item ID, e.g. node ID for nodes. */
  'sid'?: number;

  /* Type of item, e.g. node. */
  'type': string;
}

/* Stores the search index, associating words, items and... */
export interface search_indexEntity {

  /* The numeric score of the word, higher being more important. */
  'score'?: number | null;

  /* The search_dataset.sid of the searchable item to which the word belongs. */
  'sid'?: number;

  /* The search_dataset.type of the searchable item to which the word belongs. */
  'type': string;

  /* The search_total.word that is associated with the search item. */
  'word'?: string;
}

/* Stores items (like nodes) that link to other nodes, used... */
export interface search_node_linksEntity {

  /* The text used to link to the node.nid. */
  'caption'?: string | null;

  /* The node.nid that this item links to. */
  'nid'?: number;

  /* The search_dataset.sid of the searchable item containing the link to the node. */
  'sid'?: number;

  /* The search_dataset.type of the searchable item containing the link to the node. */
  'type'?: string;
}

/* Stores search totals for words. */
export interface search_totalEntity {

  /* The count of the word in the index using Zipf’s law to equalize the probability distribution. */
  'count'?: number | null;

  /* Primary Key: Unique word in the search index. */
  'word'?: string;
}

/* Table for holding semaphores, locks, flags, etc. that... */
export interface semaphoreEntity {

  /* A Unix timestamp with microseconds indicating when the semaphore should expire. */
  'expire': number;

  /* Primary Key: Unique name. */
  'name'?: string;

  /* A value for the semaphore. */
  'value'?: string;
}

/* Stores IDs. */
export interface sequencesEntity {

  /* The value of the sequence. */
  'value'?: number;
}

/* Drupal’s session handlers read and write into the... */
export interface sessionsEntity {

  /* The time of this user’s last post. This is used when the site has specified a minimum_cache_lifetime. See cache_get(). */
  'cache'?: number;

  /* The IP address that last used this session ID (sid). */
  'hostname'?: string;

  /* The serialized contents of $_SESSION, an array of name/value pairs that persists across page requests by this session ID. Drupal loads $_SESSION from here at the start of each request and saves it at the end. */
  'session'?: any | null;

  /* A session ID. The value is generated by Drupal’s session handlers. */
  'sid': string;

  /* Secure session ID. The value is generated by Drupal’s session handlers. */
  'ssid'?: string;

  /* The Unix timestamp when this session last requested a page. Old records are purged by PHP automatically. */
  'timestamp'?: number;

  /* The users.uid corresponding to a session, or 0 for anonymous user. */
  'uid': number;
}

/* Stores information about sets of shortcuts links. */
export interface shortcut_setEntity {

  /* Primary Key: The menu_links.menu_name under which the set’s links are stored. */
  'set_name'?: string;

  /* The title of the set. */
  'title'?: string;
}

/* Maps users to shortcut sets. */
export interface shortcut_set_usersEntity {

  /* The shortcut_set.set_name that will be displayed for this user. */
  'set_name'?: string;

  /* The users.uid for this set. */
  'uid'?: number;
}

/* A list of all modules, themes, and theme engines that are... */
export interface systemEntity {

  /* Boolean indicating whether this module is loaded during Drupal’s early bootstrapping phase (e.g. even before the page cache is consulted). */
  'bootstrap'?: number;

  /* The path of the primary file for this item, relative to the Drupal root; e.g. modules/node/node.module. */
  'filename'?: string;

  /* A serialized array containing information from the module’s .info file; keys can include name, description, package, version, core, dependencies, and php. */
  'info'?: any | null;

  /* The name of the item; e.g. node. */
  'name'?: string;

  /* A theme’s ’parent’ . Can be either a theme or an engine. */
  'owner'?: string;

  /* The module’s database schema version number. -1 if the module is not installed (its tables do not exist); 0 or the largest N of the module’s hook_update_N() function that has either been run or existed when the module was first installed. */
  'schema_version'?: number;

  /* Boolean indicating whether or not this item is enabled. */
  'status'?: number;

  /* The type of the item, either module, theme, or theme_engine. */
  'type'?: string;

  /* The order in which this module’s hooks should be invoked relative to other modules. Equal-weighted modules are ordered by name. */
  'weight'?: number;
}

/* Maintains denormalized information about node/term... */
export interface taxonomy_indexEntity {

  /* The Unix timestamp when the node was created. */
  'created'?: number;

  /* The node.nid this record tracks. */
  'nid'?: number;

  /* Boolean indicating whether the node is sticky. */
  'sticky'?: number | null;

  /* The term ID. */
  'tid'?: number;
}

/* Stores term information. */
export interface taxonomy_term_dataEntity {

  /* A description of the term. */
  'description'?: string | null;

  /* The filter_format.format of the description. */
  'format'?: string | null;

  /* The term name. */
  'name'?: string;

  /* Primary Key: Unique term ID. */
  'tid'?: number;

  /* The taxonomy_vocabulary.vid of the vocabulary to which the term is assigned. */
  'vid'?: number;

  /* The weight of this term in relation to other terms. */
  'weight'?: number;
}

/* Stores the hierarchical relationship between terms. */
export interface taxonomy_term_hierarchyEntity {

  /* Primary Key: The taxonomy_term_data.tid of the term’s parent. 0 indicates no parent. */
  'parent'?: number;

  /* Primary Key: The taxonomy_term_data.tid of the term. */
  'tid'?: number;
}

/* Stores vocabulary information. */
export interface taxonomy_vocabularyEntity {

  /* Description of the vocabulary. */
  'description'?: string | null;

  /* The type of hierarchy allowed within the vocabulary. (0 = disabled, 1 = single, 2 = multiple) */
  'hierarchy'?: number;

  /* The vocabulary machine name. */
  'machine_name'?: string;

  /* The module which created the vocabulary. */
  'module'?: string;

  /* Name of the vocabulary. */
  'name'?: string;

  /* Primary Key: Unique vocabulary ID. */
  'vid'?: number;

  /* The weight of this vocabulary in relation to other vocabularies. */
  'weight'?: number;
}

/* A list of URL aliases for Drupal paths; a user may visit... */
export interface url_aliasEntity {

  /* The alias for this path; e.g. title-of-the-story. */
  'alias'?: string;

  /* The language this alias is for; if ’und’, the alias will be used for unknown languages. Each Drupal path can have an alias for each supported language. */
  'language'?: string;

  /* A unique path alias identifier. */
  'pid'?: number;

  /* The Drupal path this alias is for; e.g. node/12. */
  'source'?: string;
}

/* Stores user data. */
export interface usersEntity {

  /* Timestamp for previous time user accessed the site. */
  'access'?: number;

  /* Timestamp for when user was created. */
  'created'?: number;

  /* A serialized array of name value pairs that are related to the user. Any form values posted during user edit are stored and are loaded into the $user object during user_load(). Use of this field is discouraged and it will likely disappear in a future... */
  'data'?: any | null;

  /* E-mail address used for initial account creation. */
  'init'?: string | null;

  /* User’s default language. */
  'language'?: string;

  /* Timestamp for user’s last login. */
  'login'?: number;

  /* User’s e-mail address. */
  'mail'?: string | null;

  /* Unique user name. */
  'name'?: string;

  /* User’s password (hashed). */
  'pass'?: string;

  /* Foreign key: file_managed.fid of user’s picture. */
  'picture'?: number;

  /* User’s signature. */
  'signature'?: string;

  /* The filter_format.format of the signature. */
  'signature_format'?: string | null;

  /* Whether the user is active(1) or blocked(0). */
  'status'?: number;

  /* User’s default theme. */
  'theme'?: string;

  /* User’s time zone. */
  'timezone'?: string | null;

  /* Primary Key: Unique user ID. */
  'uid'?: number;
}

/* Maps users to roles. */
export interface users_rolesEntity {

  /* Primary Key: role.rid for role. */
  'rid'?: number;

  /* Primary Key: users.uid for user. */
  'uid'?: number;
}

/* Named variable/value pairs created by Drupal core or any... */
export interface variableEntity {

  /* The name of the variable. */
  'name'?: string;

  /* The value of the variable. */
  'value': any;
}

/* Track file id for converted files. */
export interface video_outputEntity {

  /* Referenced job id if any. */
  'job_id'?: number | null;

  /* Original file identifier. */
  'original_fid': number;

  /* Converted file fid. */
  'output_fid'?: number;

  /* Video identifier. */
  'vid': number;
}

/* The preset table. */
export interface video_presetEntity {

  /* A brief description of this preset. */
  'description'?: string | null;

  /* The name of this preset. */
  'name'?: string;

  /* The primary identifier for a video preset. */
  'pid'?: number;

  /* Serialized preset settings. */
  'settings'?: any | null;
}

/* Store video transcoding queue. */
export interface video_queueEntity {

  /* Transcoding completed timestamp */
  'completed'?: number;

  /* A serialized array of converted files. */
  'data'?: any | null;

  /* The dimensions of the output video. */
  'dimensions'?: string | null;

  /* Stores the video duration in Sec. */
  'duration'?: string | null;

  /* The entity_id being referenced in this field. */
  'entity_id'?: number;

  /* The entity_type of the video. */
  'entity_type'?: string | null;

  /* The file_managed.fid being referenced in this field. */
  'fid'?: number;

  /* Start timestamp of transcodings */
  'started'?: number;

  /* Status of the transcoding, possible values are 1, 5, 10, 20 */
  'status'?: number;

  /* Timestamp of last status update, used to track stuck videos */
  'statusupdated'?: number;

  /* Video id, the primary identifier */
  'vid'?: number;
}

/* Table to store thumbnails associated with each video. */
export interface video_thumbnailsEntity {

  /* fid of thumbnail. */
  'thumbnailfid': number;

  /* fid of original video. */
  'videofid': number;
}

/* Stores information about each display attached to a view. */
export interface views_displayEntity {

  /* A serialized array of options for this display; it contains options that are generally only pertinent to that display plugin type. */
  'display_options'?: string | null;

  /* The type of the display. Usually page, block or embed, but is pluggable so may be other things. */
  'display_plugin'?: string;

  /* The title of the display, viewable by the administrator. */
  'display_title'?: string;

  /* An identifier for this display; usually generated from the display_plugin, so should be something like page or page_1 or block_2, etc. */
  'id'?: string;

  /* The order in which this display is loaded. */
  'position'?: number | null;

  /* The view this display is attached to. */
  'vid'?: number;
}

/* Stores the general data for a view. */
export interface views_viewEntity {

  /* What table this view is based on, such as node, user, comment, or term. */
  'base_table'?: string;

  /* Stores the drupal core version of the view. */
  'core'?: number | null;

  /* A description of the view for the admin interface. */
  'description'?: string | null;

  /* A human readable name used to be displayed in the admin interface */
  'human_name'?: string | null;

  /* The unique name of the view. This is the primary field views are loaded from, and is used so that views may be internal and not necessarily in the database. May only be alphanumeric characters plus underscores. */
  'name'?: string;

  /* A tag used to group/sort views in the admin interface */
  'tag'?: string | null;

  /* The view ID of the field, defined by the database. */
  'vid'?: number;
}

/* Table that contains logs of all system events. */
export interface watchdogEntity {

  /* Hostname of the user who triggered the event. */
  'hostname'?: string;

  /* Link to view the result of the event. */
  'link'?: string | null;

  /* URL of the origin of the event. */
  'location': string;

  /* Text of log message to be passed into the t() function. */
  'message': string;

  /* URL of referring page. */
  'referer'?: string | null;

  /* The severity level of the event; ranges from 0 (Emergency) to 7 (Debug) */
  'severity'?: number;

  /* Unix timestamp of when event occurred. */
  'timestamp'?: number;

  /* Type of log message, for example "user" or "page not found." */
  'type'?: string;

  /* The users.uid of the user who triggered the event. */
  'uid'?: number;

  /* Serialized array of variables that match the message string and that is passed into the t() function. */
  'variables': any;

  /* Primary Key: Unique watchdog event ID. */
  'wid'?: number;
}

/* Stores action information. */
export interface actionsEntity {

  /* Primary Key: Unique actions ID. */
  'aid'?: string;

  /* The callback function that executes when the action runs. */
  'callback'?: string;

  /* Label of the action. */
  'label'?: string;

  /* Parameters to be passed to the callback function. */
  'parameters': any;

  /* The object that that action acts on (node, user, comment, system or custom types.) */
  'type'?: string;
}

/* Stores search index correlations for advanced help topics. */
export interface advanced_help_indexEntity {

  /* The language this search index relates to. */
  'language'?: string;

  /* The module that owns this topic. */
  'module'?: string;

  /* The primary key to give to the search engine for this topic. */
  'sid'?: number;

  /* The topic id. */
  'topic'?: string;
}

/* Stores distributed authentication mapping. */
export interface authmapEntity {

  /* Primary Key: Unique authmap ID. */
  'aid'?: number;

  /* Unique authentication name. */
  'authname'?: string;

  /* Module which is controlling the authentication. */
  'module'?: string;

  /* User’s users.uid. */
  'uid'?: number;
}

/* Stores details about batches (processes that run in... */
export interface batchEntity {

  /* A serialized array containing the processing data for the batch. */
  'batch'?: any | null;

  /* Primary Key: Unique batch ID. */
  'bid': number;

  /* A Unix timestamp indicating when this batch was submitted for processing. Stale batches are purged at cron time. */
  'timestamp': number;

  /* A string token generated against the current user’s session id and the batch id, used to ensure that only the user who submitted the batch can effectively access it. */
  'token': string;
}

/* Stores block settings, such as region and visibility... */
export interface blockEntity {

  /* Primary Key: Unique block ID. */
  'bid'?: number;

  /* Binary flag to indicate block cache mode. (-2: Custom cache, -1: Do not cache, 1: Cache per role, 2: Cache per user, 4: Cache per page, 8: Block cache global) See DRUPAL_CACHE_* constants in ../includes/common.inc for more detailed information. */
  'cache'?: number;

  /* Flag to indicate how users may control visibility of the block. (0 = Users cannot control, 1 = On by default, but can be hidden, 2 = Hidden by default, but can be shown) */
  'custom'?: number;

  /* Unique ID for block within a module. */
  'delta'?: string;

  /* The module from which the block originates; for example, ’user’ for the Who’s Online block, and ’block’ for any custom blocks. */
  'module'?: string;

  /* Contents of the "Pages" block; contains either a list of paths on which to include/exclude the block or PHP code, depending on "visibility" setting. */
  'pages': string;

  /* Theme region within which the block is set. */
  'region'?: string;

  /* Block enabled status. (1 = enabled, 0 = disabled) */
  'status'?: number;

  /* The theme under which the block settings apply. */
  'theme'?: string;

  /* Custom title for the block. (Empty string will use block default title, <none> will remove the title, text will cause block to use specified title.) */
  'title'?: string;

  /* Flag to indicate how to show blocks on pages. (0 = Show on all pages except listed pages, 1 = Show only on listed pages, 2 = Use custom PHP code to determine visibility) */
  'visibility'?: number;

  /* Block weight within region. */
  'weight'?: number;
}

/* Stores contents of custom-made blocks. */
export interface block_customEntity {

  /* The block’s block.bid. */
  'bid'?: number;

  /* Block contents. */
  'body'?: string | null;

  /* The filter_format.format of the block body. */
  'format'?: string | null;

  /* Block description. */
  'info'?: string;
}

/* Sets up display criteria for blocks based on content types */
export interface block_node_typeEntity {

  /* The block’s unique delta within module, from block.delta. */
  'delta': string;

  /* The block’s origin module, from block.module. */
  'module': string;

  /* The machine-readable name of this type from node_type.type. */
  'type': string;
}

/* Sets up access permissions for blocks based on user roles */
export interface block_roleEntity {

  /* The block’s unique delta within module, from block.delta. */
  'delta': string;

  /* The block’s origin module, from block.module. */
  'module': string;

  /* The user’s role ID from users_roles.rid. */
  'rid': number;
}

/* Stores blocked IP addresses. */
export interface blocked_ipsEntity {

  /* Primary Key: unique ID for IP addresses. */
  'iid'?: number;

  /* IP address */
  'ip'?: string;
}

/* Generic cache table for caching things not separated out... */
export interface cacheEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for Administration menu to store client-side... */
export interface cache_admin_menuEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for the Block module to store already built... */
export interface cache_blockEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for data required to bootstrap Drupal, may be... */
export interface cache_bootstrapEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Generic cache table for caching things not separated out... */
export interface cache_fieldEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for the Filter module to store already... */
export interface cache_filterEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for the form system to store recently built... */
export interface cache_formEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table used to store information about image... */
export interface cache_imageEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table to store library information. */
export interface cache_librariesEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for the the results of retreived XML... */
export interface cache_media_xmlEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for the menu system to store router... */
export interface cache_menuEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table used to store compressed pages for anonymous... */
export interface cache_pageEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for path alias lookup. */
export interface cache_pathEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for token information. */
export interface cache_tokenEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for the Update module to store information... */
export interface cache_updateEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Generic cache table for caching things not separated out... */
export interface cache_viewsEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}

/* Cache table for views to store pre-rendered queries,... */
export interface cache_views_dataEntity {

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A Unix timestamp indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or 0 for never. */
  'expire'?: number;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;
}
export interface cck_field_settingsEntity {

  /* The name of the bundle, NULL for field settings. */
  'bundle'?: string | null;

  /* The name of the entity type, NULL for field settings. */
  'entity_type'?: string;

  /* The name of the field. */
  'field_name': string;

  /* The name of the language, NULL for field settings. */
  'language'?: string | null;

  /* The name of the setting that CCK is managing (default_value_php, allowed_values_php, etc). */
  'setting': string;

  /* The custom value for this setting. */
  'setting_option'?: string | null;

  /* The type of setting that CCK is managing (field, instance, widget, display). */
  'setting_type': string;
}

/* Stores CKEditor input format assignments */
export interface ckeditor_input_formatEntity {

  /* Drupal filter format ID */
  'format'?: string;

  /* Name of the CKEditor role */
  'name'?: string;
}

/* Stores CKEditor profile settings */
export interface ckeditor_settingsEntity {

  /* Name of the CKEditor profile */
  'name'?: string;

  /* Profile settings */
  'settings'?: string | null;
}

/* Stores comments and associated data. */
export interface commentEntity {

  /* The time that the comment was last edited, as a Unix timestamp. */
  'changed'?: number;

  /* Primary Key: Unique comment ID. */
  'cid'?: number;

  /* The time that the comment was created, as a Unix timestamp. */
  'created'?: number;

  /* The comment author’s home page address from the comment form, if user is anonymous, and the ’Anonymous users may/must leave their contact information’ setting is turned on. */
  'homepage'?: string | null;

  /* The author’s host name. */
  'hostname'?: string;

  /* The languages.language of this comment. */
  'language'?: string;

  /* The comment author’s e-mail address from the comment form, if user is anonymous, and the ’Anonymous users may/must leave their contact information’ setting is turned on. */
  'mail'?: string | null;

  /* The comment author’s name. Uses users.name if the user is logged in, otherwise uses the value typed into the comment form. */
  'name'?: string | null;

  /* The node.nid to which this comment is a reply. */
  'nid'?: number;

  /* The comment.cid to which this comment is a reply. If set to 0, this comment is not a reply to an existing comment. */
  'pid'?: number;

  /* The published status of a comment. (0 = Not Published, 1 = Published) */
  'status'?: number;

  /* The comment title. */
  'subject'?: string;

  /* The vancode representation of the comment’s place in a thread. */
  'thread': string;

  /* The users.uid who authored the comment. If set to 0, this comment was created by an anonymous user. */
  'uid'?: number;
}

/* A special cache used to store CSS that must be non-volatile. */
export interface ctools_css_cacheEntity {

  /* The CSS ID this cache object belongs to. */
  'cid': string;

  /* CSS being stored. */
  'css'?: string | null;

  /* The filename this CSS is stored in. */
  'filename'?: string | null;

  /* Whether or not this CSS needs to be filtered. */
  'filter'?: number | null;
}

/* A special cache used to store objects that are being... */
export interface ctools_object_cacheEntity {

  /* Serialized data being stored. */
  'data'?: any | null;

  /* The name of the object this cache is attached to. */
  'name': string;

  /* The type of the object this cache is attached to; this essentially represents the owner so that several sub-systems can use this cache. */
  'obj': string;

  /* The session ID this cache object belongs to. */
  'sid': string;

  /* The time this cache was created or updated. */
  'updated'?: number;
}

/* Stores configured date formats for each locale. */
export interface date_format_localeEntity {

  /* The date format string. */
  'format': string;

  /* A languages.language for this format to be used with. */
  'language': string;

  /* The date format type, e.g. medium. */
  'type': string;
}

/* Stores configured date format types. */
export interface date_format_typeEntity {

  /* Whether or not this is a system provided format. */
  'locked'?: number;

  /* The human readable name of the format type. */
  'title': string;

  /* The date format type, e.g. medium. */
  'type': string;
}

/* Stores configured date formats. */
export interface date_formatsEntity {

  /* The date format identifier. */
  'dfid'?: number;

  /* The date format string. */
  'format': string;

  /* Whether or not this format can be modified. */
  'locked'?: number;

  /* The date format type, e.g. medium. */
  'type': string;
}
export interface fboauth_usersEntity {
  'fbid'?: string;
  'uid'?: number;
}
export interface field_configEntity {

  /* Boolean indicating whether the module that implements the field type is enabled. */
  'active'?: number;
  'cardinality'?: number;

  /* Serialized data containing the field properties that do not warrant a dedicated column. */
  'data': any;
  'deleted'?: number;

  /* The name of this field. Non-deleted field names are unique, but multiple deleted fields can have the same name. */
  'field_name': string;

  /* The primary identifier for a field */
  'id'?: number;

  /* @TODO */
  'locked'?: number;

  /* The module that implements the field type. */
  'module'?: string;

  /* Boolean indicating whether the module that implements the storage backend is enabled. */
  'storage_active'?: number;

  /* The module that implements the storage backend. */
  'storage_module'?: string;

  /* The storage backend for the field. */
  'storage_type': string;
  'translatable'?: number;

  /* The type of this field. */
  'type': string;
}
export interface field_config_instanceEntity {
  'bundle'?: string;
  'data': any;
  'deleted'?: number;
  'entity_type'?: string;

  /* The identifier of the field attached by this instance */
  'field_id': number;
  'field_name'?: string;

  /* The primary identifier for a field instance */
  'id'?: number;
}

/* Data storage for field 1 (comment_body) */
export interface field_data_comment_bodyEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;
  'comment_body_format'?: string | null;
  'comment_body_value'?: string | null;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 32 (field__boutique_carousel_image) */
export interface field_data_field__boutique_carousel_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* Alternative image text, for the image’s ’alt’ attribute. */
  'field__boutique_carousel_image_alt'?: string | null;

  /* The file_managed.fid being referenced in this field. */
  'field__boutique_carousel_image_fid'?: number | null;

  /* The height of the image in pixels. */
  'field__boutique_carousel_image_height'?: number | null;

  /* Image title text, for the image’s ’title’ attribute. */
  'field__boutique_carousel_image_title'?: string | null;

  /* The width of the image in pixels. */
  'field__boutique_carousel_image_width'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 22 (field_advertiser) */
export interface field_data_field_advertiserEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_advertiser_tid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 21 (field_advertiser_image) */
export interface field_data_field_advertiser_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_advertiser_image_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_advertiser_image_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_advertiser_image_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 33 (field_boutique_carousel_cap) */
export interface field_data_field_boutique_carousel_capEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_boutique_carousel_cap_format'?: string | null;
  'field_boutique_carousel_cap_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 26 (field_boutique_carousel_image) */
export interface field_data_field_boutique_carousel_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_boutique_carousel_image_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_boutique_carousel_image_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_boutique_carousel_image_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 40 (field_boutique_carousel_image_we) */
export interface field_data_field_boutique_carousel_image_weEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_boutique_carousel_image_we_value'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 8 (field_brand) */
export interface field_data_field_brandEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_brand_tid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 7 (field_brand_image) */
export interface field_data_field_brand_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_brand_image_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_brand_image_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_brand_image_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 5 (field_brand_logo) */
export interface field_data_field_brand_logoEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* Alternative image text, for the image’s ’alt’ attribute. */
  'field_brand_logo_alt'?: string | null;

  /* The file_managed.fid being referenced in this field. */
  'field_brand_logo_fid'?: number | null;

  /* The height of the image in pixels. */
  'field_brand_logo_height'?: number | null;

  /* Image title text, for the image’s ’title’ attribute. */
  'field_brand_logo_title'?: string | null;

  /* The width of the image in pixels. */
  'field_brand_logo_width'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 31 (field_brand_logo_pdp) */
export interface field_data_field_brand_logo_pdpEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* Alternative image text, for the image’s ’alt’ attribute. */
  'field_brand_logo_pdp_alt'?: string | null;

  /* The file_managed.fid being referenced in this field. */
  'field_brand_logo_pdp_fid'?: number | null;

  /* The height of the image in pixels. */
  'field_brand_logo_pdp_height'?: number | null;

  /* Image title text, for the image’s ’title’ attribute. */
  'field_brand_logo_pdp_title'?: string | null;

  /* The width of the image in pixels. */
  'field_brand_logo_pdp_width'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 34 (field_carousel_image_link) */
export interface field_data_field_carousel_image_linkEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_carousel_image_link_format'?: string | null;
  'field_carousel_image_link_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 10 (field_category) */
export interface field_data_field_categoryEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_category_tid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 20 (field_category_description) */
export interface field_data_field_category_descriptionEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_category_description_format'?: string | null;
  'field_category_description_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 9 (field_category_image) */
export interface field_data_field_category_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_category_image_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_category_image_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_category_image_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 13 (field_description) */
export interface field_data_field_descriptionEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_description_format'?: string | null;
  'field_description_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 19 (field_editor_hero_image) */
export interface field_data_field_editor_hero_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_editor_hero_image_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_editor_hero_image_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_editor_hero_image_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 18 (field_editor_photo) */
export interface field_data_field_editor_photoEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_editor_photo_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_editor_photo_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_editor_photo_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 17 (field_editor_position) */
export interface field_data_field_editor_positionEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_editor_position_format'?: string | null;
  'field_editor_position_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 37 (field_editor_share_copy) */
export interface field_data_field_editor_share_copyEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_editor_share_copy_format'?: string | null;
  'field_editor_share_copy_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 38 (field_editor_share_thumb) */
export interface field_data_field_editor_share_thumbEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_editor_share_thumb_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_editor_share_thumb_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_editor_share_thumb_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 35 (field_editor_share_title) */
export interface field_data_field_editor_share_titleEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_editor_share_title_format'?: string | null;
  'field_editor_share_title_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 36 (field_editor_share_url) */
export interface field_data_field_editor_share_urlEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_editor_share_url_format'?: string | null;
  'field_editor_share_url_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 28 (field_has_e_commerce_link) */
export interface field_data_field_has_e_commerce_linkEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_has_e_commerce_link_value'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 15 (field_home_page_carousel) */
export interface field_data_field_home_page_carouselEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_home_page_carousel_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_home_page_carousel_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_home_page_carousel_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 24 (field_large_product_image) */
export interface field_data_field_large_product_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_large_product_image_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_large_product_image_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_large_product_image_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 14 (field_link) */
export interface field_data_field_linkEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_link_format'?: string | null;
  'field_link_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 12 (field_price) */
export interface field_data_field_priceEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_price_format'?: string | null;
  'field_price_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 28 (field_product_photo) */
export interface field_data_field_product_photoEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_product_photo_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_product_photo_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_product_photo_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 25 (field_quote) */
export interface field_data_field_quoteEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_quote_format'?: string | null;
  'field_quote_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 27 (field_shop_boutique_link) */
export interface field_data_field_shop_boutique_linkEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_shop_boutique_link_format'?: string | null;
  'field_shop_boutique_link_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 23 (field_visited_users) */
export interface field_data_field_visited_usersEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_visited_users_tid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 23 (field_visitors) */
export interface field_data_field_visitorsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_visitors_tid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 25 (field_visitor_ip) */
export interface field_deleted_data_25Entity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_visitor_ip_tid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Data storage for field 26 (field_advertiser_photo) */
export interface field_deleted_data_26Entity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_advertiser_photo_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_advertiser_photo_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_advertiser_photo_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to, or NULL if the entity type is not versioned */
  'revision_id'?: number | null;
}

/* Revision archive storage for field 25 (field_visitor_ip) */
export interface field_deleted_revision_25Entity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_visitor_ip_tid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 26 (field_advertiser... */
export interface field_deleted_revision_26Entity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_advertiser_photo_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_advertiser_photo_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_advertiser_photo_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 1 (comment_body) */
export interface field_revision_comment_bodyEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;
  'comment_body_format'?: string | null;
  'comment_body_value'?: string | null;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 32 (field__boutique... */
export interface field_revision_field__boutique_carousel_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* Alternative image text, for the image’s ’alt’ attribute. */
  'field__boutique_carousel_image_alt'?: string | null;

  /* The file_managed.fid being referenced in this field. */
  'field__boutique_carousel_image_fid'?: number | null;

  /* The height of the image in pixels. */
  'field__boutique_carousel_image_height'?: number | null;

  /* Image title text, for the image’s ’title’ attribute. */
  'field__boutique_carousel_image_title'?: string | null;

  /* The width of the image in pixels. */
  'field__boutique_carousel_image_width'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 22 (field_advertiser) */
export interface field_revision_field_advertiserEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_advertiser_tid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 21 (field_advertiser... */
export interface field_revision_field_advertiser_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_advertiser_image_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_advertiser_image_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_advertiser_image_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 33 (field_boutique... */
export interface field_revision_field_boutique_carousel_capEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_boutique_carousel_cap_format'?: string | null;
  'field_boutique_carousel_cap_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 26 (field_boutique... */
export interface field_revision_field_boutique_carousel_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_boutique_carousel_image_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_boutique_carousel_image_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_boutique_carousel_image_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 40 (field_boutique... */
export interface field_revision_field_boutique_carousel_image_weEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_boutique_carousel_image_we_value'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 8 (field_brand) */
export interface field_revision_field_brandEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_brand_tid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 7 (field_brand_image) */
export interface field_revision_field_brand_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_brand_image_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_brand_image_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_brand_image_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 5 (field_brand_logo) */
export interface field_revision_field_brand_logoEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* Alternative image text, for the image’s ’alt’ attribute. */
  'field_brand_logo_alt'?: string | null;

  /* The file_managed.fid being referenced in this field. */
  'field_brand_logo_fid'?: number | null;

  /* The height of the image in pixels. */
  'field_brand_logo_height'?: number | null;

  /* Image title text, for the image’s ’title’ attribute. */
  'field_brand_logo_title'?: string | null;

  /* The width of the image in pixels. */
  'field_brand_logo_width'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 31 (field_brand_logo_pdp) */
export interface field_revision_field_brand_logo_pdpEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* Alternative image text, for the image’s ’alt’ attribute. */
  'field_brand_logo_pdp_alt'?: string | null;

  /* The file_managed.fid being referenced in this field. */
  'field_brand_logo_pdp_fid'?: number | null;

  /* The height of the image in pixels. */
  'field_brand_logo_pdp_height'?: number | null;

  /* Image title text, for the image’s ’title’ attribute. */
  'field_brand_logo_pdp_title'?: string | null;

  /* The width of the image in pixels. */
  'field_brand_logo_pdp_width'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 34 (field_carousel... */
export interface field_revision_field_carousel_image_linkEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_carousel_image_link_format'?: string | null;
  'field_carousel_image_link_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 10 (field_category) */
export interface field_revision_field_categoryEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_category_tid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 20 (field_category... */
export interface field_revision_field_category_descriptionEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_category_description_format'?: string | null;
  'field_category_description_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 9 (field_category_image) */
export interface field_revision_field_category_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_category_image_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_category_image_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_category_image_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 13 (field_description) */
export interface field_revision_field_descriptionEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_description_format'?: string | null;
  'field_description_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 19 (field_editor_hero... */
export interface field_revision_field_editor_hero_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_editor_hero_image_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_editor_hero_image_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_editor_hero_image_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 18 (field_editor_photo) */
export interface field_revision_field_editor_photoEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_editor_photo_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_editor_photo_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_editor_photo_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 17 (field_editor... */
export interface field_revision_field_editor_positionEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_editor_position_format'?: string | null;
  'field_editor_position_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 37 (field_editor_share... */
export interface field_revision_field_editor_share_copyEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_editor_share_copy_format'?: string | null;
  'field_editor_share_copy_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 38 (field_editor_share... */
export interface field_revision_field_editor_share_thumbEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_editor_share_thumb_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_editor_share_thumb_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_editor_share_thumb_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 35 (field_editor_share... */
export interface field_revision_field_editor_share_titleEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_editor_share_title_format'?: string | null;
  'field_editor_share_title_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 36 (field_editor_share... */
export interface field_revision_field_editor_share_urlEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_editor_share_url_format'?: string | null;
  'field_editor_share_url_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 28 (field_has_e... */
export interface field_revision_field_has_e_commerce_linkEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_has_e_commerce_link_value'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 15 (field_home_page... */
export interface field_revision_field_home_page_carouselEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_home_page_carousel_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_home_page_carousel_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_home_page_carousel_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 24 (field_large... */
export interface field_revision_field_large_product_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_large_product_image_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_large_product_image_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_large_product_image_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 14 (field_link) */
export interface field_revision_field_linkEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_link_format'?: string | null;
  'field_link_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 12 (field_price) */
export interface field_revision_field_priceEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_price_format'?: string | null;
  'field_price_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 28 (field_product_photo) */
export interface field_revision_field_product_photoEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;

  /* A description of the file. */
  'field_product_photo_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_product_photo_display'?: number;

  /* The file_managed.fid being referenced in this field. */
  'field_product_photo_fid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 25 (field_quote) */
export interface field_revision_field_quoteEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_quote_format'?: string | null;
  'field_quote_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 27 (field_shop... */
export interface field_revision_field_shop_boutique_linkEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_shop_boutique_link_format'?: string | null;
  'field_shop_boutique_link_value'?: string | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 23 (field_visited_users) */
export interface field_revision_field_visited_usersEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_visited_users_tid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for field 23 (field_visitors) */
export interface field_revision_field_visitorsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The entity type this data is attached to */
  'entity_type'?: string;
  'field_visitors_tid'?: number | null;

  /* The language for this data item. */
  'language'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Stores configuration options for file displays. */
export interface file_displayEntity {

  /* A combined string (FILE_TYPE__VIEW_MODE__FILE_FORMATTER) identifying a file display configuration. For integration with CTools Exportables, stored as a single string rather than as a compound primary key. */
  'name': string;

  /* A serialized array of name value pairs that store the formatter settings for the display. */
  'settings'?: any | null;

  /* The status of the display. (1 = enabled, 0 = disabled) */
  'status'?: number;

  /* Weight of formatter within the display chain for the associated file type and view mode. A file is rendered using the lowest weighted enabled display configuration that matches the file type and view mode and that is capable of displaying the file. */
  'weight'?: number;
}

/* Stores information for uploaded files. */
export interface file_managedEntity {

  /* File ID. */
  'fid'?: number;

  /* The file’s MIME type. */
  'filemime'?: string;

  /* Name of the file with no path components. This may differ from the basename of the URI if the file is renamed to avoid overwriting an existing file. */
  'filename'?: string;

  /* The size of the file in bytes. */
  'filesize'?: number;

  /* A field indicating the status of the file. Two status are defined in core: temporary (0) and permanent (1). Temporary files older than DRUPAL_MAXIMUM_TEMP_FILE_AGE will be removed during a cron run. */
  'status'?: number;

  /* UNIX timestamp for when the file was added. */
  'timestamp'?: number;

  /* The type of this file. */
  'type'?: string;

  /* The users.uid of the user who is associated with the file. */
  'uid'?: number;

  /* The URI to access the file (either local or remote). */
  'uri'?: string;
}

/* Track where a file is used. */
export interface file_usageEntity {

  /* The number of times this file is used by this object. */
  'count'?: number;

  /* File ID. */
  'fid': number;

  /* The primary key of the object using the file. */
  'id'?: number;

  /* The name of the module that is using the file. */
  'module'?: string;

  /* The name of the object type in which the file is used. */
  'type'?: string;
}

/* Table that maps filters (HTML corrector) to text formats ... */
export interface filterEntity {

  /* Foreign key: The filter_format.format to which this filter is assigned. */
  'format': string;

  /* The origin module of the filter. */
  'module'?: string;

  /* Name of the filter being referenced. */
  'name'?: string;

  /* A serialized array of name value pairs that store the filter settings for the specific format. */
  'settings'?: any | null;

  /* Filter enabled status. (1 = enabled, 0 = disabled) */
  'status'?: number;

  /* Weight of filter within format. */
  'weight'?: number;
}

/* Stores text formats: custom groupings of filters, such as... */
export interface filter_formatEntity {

  /* Flag to indicate whether format is cacheable. (1 = cacheable, 0 = not cacheable) */
  'cache'?: number;

  /* Primary Key: Unique machine name of the format. */
  'format': string;

  /* Name of the text format (Filtered HTML). */
  'name'?: string;

  /* The status of the text format. (1 = enabled, 0 = disabled) */
  'status'?: number;

  /* Weight of text format to use when listing. */
  'weight'?: number;
}

/* Flood controls the threshold of events, such as the... */
export interface floodEntity {

  /* Name of event (e.g. contact). */
  'event'?: string;

  /* Expiration timestamp. Expired events are purged on cron run. */
  'expiration'?: number;

  /* Unique flood event ID. */
  'fid'?: number;

  /* Identifier of the visitor, such as an IP address or hostname. */
  'identifier'?: string;

  /* Timestamp of the event. */
  'timestamp'?: number;
}

/* A record of which users have read which nodes. */
export interface historyEntity {

  /* The node.nid that was read. */
  'nid'?: number;

  /* The Unix timestamp at which the read occurred. */
  'timestamp'?: number;

  /* The users.uid that read the node nid. */
  'uid'?: number;
}

/* Stores configuration options for image effects. */
export interface image_effectsEntity {

  /* The configuration data for the effect. */
  'data': any;

  /* The primary identifier for an image effect. */
  'ieid'?: number;

  /* The image_styles.isid for an image style. */
  'isid'?: number;

  /* The unique name of the effect to be executed. */
  'name': string;

  /* The weight of the effect in the style. */
  'weight'?: number;
}

/* Stores configuration options for image styles. */
export interface image_stylesEntity {

  /* The primary identifier for an image style. */
  'isid'?: number;

  /* The style name. */
  'name': string;
}

/* Stores fids that have been included in the media tag in... */
export interface media_filter_usageEntity {

  /* The media file_managed.fid. */
  'fid'?: number;

  /* The timestamp the fid was last recorded by media_filter() */
  'timestamp'?: number;
}

/* Stores the user preference for whether to list as table... */
export interface media_list_typeEntity {

  /* The type of display (table or images). */
  'type'?: string;

  /* The user.uid of the user. */
  'uid'?: number;
}

/* Stores the settings for media types. */
export interface media_typeEntity {

  /* If this is a base type (i.e. cannot be deleted) */
  'base'?: number;

  /* The label of the media type. */
  'label'?: string;

  /* The machine name of the media type. */
  'name'?: string;

  /* Callback to determine if provided media is of this type. */
  'type_callback'?: string | null;

  /* A serialized array of name value pairs that will be passed to the callback function */
  'type_callback_args'?: string | null;

  /* Weight of media type. Determines which one wins when claiming a piece of media (first wins) */
  'weight'?: number;
}

/* Holds definitions for top-level custom menus (for example... */
export interface menu_customEntity {

  /* Menu description. */
  'description'?: string | null;

  /* Primary Key: Unique key for menu. This is used as a block delta so length is 32. */
  'menu_name'?: string;

  /* Menu title; displayed at top of block. */
  'title'?: string;
}

/* Contains the individual links within a menu. */
export interface menu_linksEntity {

  /* A flag to indicate that the user has manually created or edited the link (1 = customized, 0 = not customized). */
  'customized'?: number;

  /* The depth relative to the top level. A link with plid == 0 will have depth == 1. */
  'depth'?: number;

  /* Flag for whether this link should be rendered as expanded in menus - expanded links always have their child links displayed, instead of only when the link is in the active trail (1 = expanded, 0 = not expanded) */
  'expanded'?: number;

  /* A flag to indicate if the link points to a full URL starting with a protocol, like http:// (1 = external, 0 = internal). */
  'external'?: number;

  /* Flag indicating whether any links have this link as a parent (1 = children exist, 0 = no children). */
  'has_children'?: number;

  /* A flag for whether the link should be rendered in menus. (1 = a disabled menu item that may be shown on admin screens, -1 = a menu callback, 0 = a normal, visible link) */
  'hidden'?: number;

  /* The Drupal path or external path this link points to. */
  'link_path'?: string;

  /* The text displayed for the link, which may be modified by a title callback stored in menu_router. */
  'link_title'?: string;

  /* The menu name. All links with the same menu name (such as ’navigation’) are part of the same menu. */
  'menu_name'?: string;

  /* The menu link ID (mlid) is the integer primary key. */
  'mlid'?: number;

  /* The name of the module that generated this link. */
  'module'?: string;

  /* A serialized array of options to be passed to the url() or l() function, such as a query string or HTML attributes. */
  'options'?: any | null;

  /* The first mlid in the materialized path. If N = depth, then pN must equal the mlid. If depth > 1 then p(N-1) must equal the plid. All pX where X > depth must equal zero. The columns p1 .. p9 are also called the parents. */
  'p1'?: number;

  /* The second mlid in the materialized path. See p1. */
  'p2'?: number;

  /* The third mlid in the materialized path. See p1. */
  'p3'?: number;

  /* The fourth mlid in the materialized path. See p1. */
  'p4'?: number;

  /* The fifth mlid in the materialized path. See p1. */
  'p5'?: number;

  /* The sixth mlid in the materialized path. See p1. */
  'p6'?: number;

  /* The seventh mlid in the materialized path. See p1. */
  'p7'?: number;

  /* The eighth mlid in the materialized path. See p1. */
  'p8'?: number;

  /* The ninth mlid in the materialized path. See p1. */
  'p9'?: number;

  /* The parent link ID (plid) is the mlid of the link above in the hierarchy, or zero if the link is at the top level in its menu. */
  'plid'?: number;

  /* For links corresponding to a Drupal path (external = 0), this connects the link to a menu_router.path for joins. */
  'router_path'?: string;

  /* Flag that indicates that this link was generated during the update from Drupal 5. */
  'updated'?: number;

  /* Link weight among links in the same menu at the same depth. */
  'weight'?: number;
}

/* Maps paths to various callbacks (access, page and title) */
export interface menu_routerEntity {

  /* A serialized array of arguments for the access callback. */
  'access_arguments'?: any | null;

  /* The callback which determines the access to this router path. Defaults to user_access. */
  'access_callback'?: string;

  /* Only for local tasks (tabs) - the context of a local task to control its placement. */
  'context'?: number;

  /* The name of the function that sends the result of the page_callback function to the browser. */
  'delivery_callback'?: string;

  /* A description of this item. */
  'description': string;

  /* A numeric representation of how specific the path is. */
  'fit'?: number;

  /* The file to include for this element, usually the page callback function lives in this file. */
  'include_file'?: string | null;

  /* A serialized array of function names (like node_load) to be called to load an object corresponding to a part of the current path. */
  'load_functions': any;

  /* Number of parts in this router path. */
  'number_parts'?: number;

  /* A serialized array of arguments for the page callback. */
  'page_arguments'?: any | null;

  /* The name of the function that renders the page. */
  'page_callback'?: string;

  /* Primary Key: the Drupal path this entry describes */
  'path'?: string;

  /* The position of the block (left or right) on the system administration page for this item. */
  'position'?: string;

  /* Only for local tasks (tabs) - the router path of the parent page (which may also be a local task). */
  'tab_parent'?: string;

  /* Router path of the closest non-tab parent page. For pages that are not local tasks, this will be the same as the path. */
  'tab_root'?: string;

  /* A serialized array of arguments for the theme callback. */
  'theme_arguments'?: string;

  /* A function which returns the name of the theme that will be used to render this page. If left empty, the default theme will be used. */
  'theme_callback'?: string;

  /* The title for the current page, or the title for the tab if this is a local task. */
  'title'?: string;

  /* A serialized array of arguments for the title callback. If empty, the title will be used as the sole argument for the title callback. */
  'title_arguments'?: string;

  /* A function which will alter the title. Defaults to t() */
  'title_callback'?: string;

  /* A serialized array of function names (like user_uid_optional_to_arg) to be called to replace a part of the router path with another string. */
  'to_arg_functions': any;

  /* Numeric representation of the type of the menu item, like MENU_LOCAL_TASK. */
  'type'?: number;

  /* Weight of the element. Lighter weights are higher up, heavier weights go down. */
  'weight'?: number;
}

/* The base table for nodes. */
export interface nodeEntity {

  /* The Unix timestamp when the node was most recently saved. */
  'changed'?: number;

  /* Whether comments are allowed on this node: 0 = no, 1 = closed (read only), 2 = open (read/write). */
  'comment'?: number;

  /* The Unix timestamp when the node was created. */
  'created'?: number;

  /* The languages.language of this node. */
  'language'?: string;

  /* The primary identifier for a node. */
  'nid'?: number;

  /* Boolean indicating whether the node should be displayed on the front page. */
  'promote'?: number;

  /* Boolean indicating whether the node is published (visible to non-administrators). */
  'status'?: number;

  /* Boolean indicating whether the node should be displayed at the top of lists in which it appears. */
  'sticky'?: number;

  /* The title of this node, always treated as non-markup plain text. */
  'title'?: string;

  /* The translation set id for this node, which equals the node id of the source post in each set. */
  'tnid'?: number;

  /* A boolean indicating whether this translation page needs to be updated. */
  'translate'?: number;

  /* The node_type.type of this node. */
  'type'?: string;

  /* The users.uid that owns this node; initially, this is the user that created it. */
  'uid'?: number;

  /* The current node_revision.vid version identifier. */
  'vid'?: number | null;
}

/* Identifies which realm/grant pairs a user must possess in... */
export interface node_accessEntity {

  /* The grant ID a user must possess in the specified realm to gain this row’s privileges on the node. */
  'gid'?: number;

  /* Boolean indicating whether a user with the realm/grant pair can delete this node. */
  'grant_delete'?: number;

  /* Boolean indicating whether a user with the realm/grant pair can edit this node. */
  'grant_update'?: number;

  /* Boolean indicating whether a user with the realm/grant pair can view this node. */
  'grant_view'?: number;

  /* The node.nid this record affects. */
  'nid'?: number;

  /* The realm in which the user must possess the grant ID. Each node access node can define one or more realms. */
  'realm'?: string;
}

/* Maintains statistics of node and comments posts to show ... */
export interface node_comment_statisticsEntity {

  /* The comment.cid of the last comment. */
  'cid'?: number;

  /* The total number of comments on this node. */
  'comment_count'?: number;

  /* The name of the latest author to post a comment on this node, from comment.name. */
  'last_comment_name'?: string | null;

  /* The Unix timestamp of the last comment that was posted within this node, from comment.changed. */
  'last_comment_timestamp'?: number;

  /* The user ID of the latest author to post a comment on this node, from comment.uid. */
  'last_comment_uid'?: number;

  /* The node.nid for which the statistics are compiled. */
  'nid'?: number;
}

/* Stores information about each saved version of a node. */
export interface node_revisionEntity {

  /* Whether comments are allowed on this node (at the time of this revision): 0 = no, 1 = closed (read only), 2 = open (read/write). */
  'comment'?: number;

  /* The log entry explaining the changes in this version. */
  'log': string;

  /* The node this version belongs to. */
  'nid'?: number;

  /* Boolean indicating whether the node (at the time of this revision) should be displayed on the front page. */
  'promote'?: number;

  /* Boolean indicating whether the node (at the time of this revision) is published (visible to non-administrators). */
  'status'?: number;

  /* Boolean indicating whether the node (at the time of this revision) should be displayed at the top of lists in which it appears. */
  'sticky'?: number;

  /* A Unix timestamp indicating when this version was created. */
  'timestamp'?: number;

  /* The title of this version. */
  'title'?: string;

  /* The users.uid that created this version. */
  'uid'?: number;

  /* The primary identifier for this version. */
  'vid'?: number;
}

/* Stores information about all defined node types. */
export interface node_typeEntity {

  /* The base string used to construct callbacks corresponding to this node type. */
  'base': string;

  /* A boolean indicating whether this type is defined by a module (FALSE) or by a user via Add content type (TRUE). */
  'custom'?: number;

  /* A brief description of this type. */
  'description': string;

  /* A boolean indicating whether the node type is disabled. */
  'disabled'?: number;

  /* Boolean indicating whether this type uses the node.title field. */
  'has_title': number;

  /* Help information shown to the user when creating a node of this type. */
  'help': string;

  /* A boolean indicating whether the administrator can change the machine name of this type. */
  'locked'?: number;

  /* A boolean indicating whether this type has been modified by an administrator; currently not used in any way. */
  'modified'?: number;

  /* The module defining this node type. */
  'module': string;

  /* The human-readable name of this type. */
  'name'?: string;

  /* The original machine-readable name of this node type. This may be different from the current type name if the locked field is 0. */
  'orig_type'?: string;

  /* The label displayed for the title field on the edit form. */
  'title_label'?: string;

  /* The machine-readable name of this type. */
  'type': string;
}

/* Stores items in queues. */
export interface queueEntity {

  /* Timestamp when the item was created. */
  'created'?: number;

  /* The arbitrary data for the item. */
  'data'?: any | null;

  /* Timestamp when the claim lease expires on the item. */
  'expire'?: number;

  /* Primary Key: Unique item ID. */
  'item_id'?: number;

  /* The queue name. */
  'name'?: string;
}

/* Stores custom RDF mappings for user defined content types... */
export interface rdf_mappingEntity {

  /* The name of the bundle a mapping applies to. */
  'bundle': string;

  /* The serialized mapping of the bundle type and fields to RDF terms. */
  'mapping'?: any | null;

  /* The name of the entity type a mapping applies to (node, user, comment, etc.). */
  'type': string;
}

/* Each record is a function, class, or interface name and... */
export interface registryEntity {

  /* Name of the file. */
  'filename': string;

  /* Name of the module the file belongs to. */
  'module'?: string;

  /* The name of the function, class, or interface. */
  'name'?: string;

  /* Either function or class or interface. */
  'type'?: string;

  /* The order in which this module’s hooks should be invoked relative to other modules. Equal-weighted modules are ordered by name. */
  'weight'?: number;
}

/* Files parsed to build the registry. */
export interface registry_fileEntity {

  /* Path to the file. */
  'filename': string;

  /* sha-256 hash of the file’s contents when last parsed. */
  'hash': string;
}

/* Stores user roles. */
export interface roleEntity {

  /* Unique role name. */
  'name'?: string;

  /* Primary Key: Unique role ID. */
  'rid'?: number;

  /* The weight of this role in listings and the user interface. */
  'weight'?: number;
}

/* Stores the permissions assigned to user roles. */
export interface role_permissionEntity {

  /* The module declaring the permission. */
  'module'?: string;

  /* A single permission granted to the role identified by rid. */
  'permission'?: string;

  /* Foreign Key: role.rid. */
  'rid': number;
}

/* Stores items that will be searched. */
export interface search_datasetEntity {

  /* List of space-separated words from the item. */
  'data': string;

  /* Set to force node reindexing. */
  'reindex'?: number;

  /* Search item ID, e.g. node ID for nodes. */
  'sid'?: number;

  /* Type of item, e.g. node. */
  'type': string;
}

/* Stores the search index, associating words, items and... */
export interface search_indexEntity {

  /* The numeric score of the word, higher being more important. */
  'score'?: number | null;

  /* The search_dataset.sid of the searchable item to which the word belongs. */
  'sid'?: number;

  /* The search_dataset.type of the searchable item to which the word belongs. */
  'type': string;

  /* The search_total.word that is associated with the search item. */
  'word'?: string;
}

/* Stores items (like nodes) that link to other nodes, used... */
export interface search_node_linksEntity {

  /* The text used to link to the node.nid. */
  'caption'?: string | null;

  /* The node.nid that this item links to. */
  'nid'?: number;

  /* The search_dataset.sid of the searchable item containing the link to the node. */
  'sid'?: number;

  /* The search_dataset.type of the searchable item containing the link to the node. */
  'type'?: string;
}

/* Stores search totals for words. */
export interface search_totalEntity {

  /* The count of the word in the index using Zipf’s law to equalize the probability distribution. */
  'count'?: number | null;

  /* Primary Key: Unique word in the search index. */
  'word'?: string;
}

/* Table for holding semaphores, locks, flags, etc. that... */
export interface semaphoreEntity {

  /* A Unix timestamp with microseconds indicating when the semaphore should expire. */
  'expire': number;

  /* Primary Key: Unique name. */
  'name'?: string;

  /* A value for the semaphore. */
  'value'?: string;
}

/* Stores IDs. */
export interface sequencesEntity {

  /* The value of the sequence. */
  'value'?: number;
}

/* Drupal’s session handlers read and write into the... */
export interface sessionsEntity {

  /* The time of this user’s last post. This is used when the site has specified a minimum_cache_lifetime. See cache_get(). */
  'cache'?: number;

  /* The IP address that last used this session ID (sid). */
  'hostname'?: string;

  /* The serialized contents of $_SESSION, an array of name/value pairs that persists across page requests by this session ID. Drupal loads $_SESSION from here at the start of each request and saves it at the end. */
  'session'?: any | null;

  /* A session ID. The value is generated by Drupal’s session handlers. */
  'sid': string;

  /* Secure session ID. The value is generated by Drupal’s session handlers. */
  'ssid'?: string;

  /* The Unix timestamp when this session last requested a page. Old records are purged by PHP automatically. */
  'timestamp'?: number;

  /* The users.uid corresponding to a session, or 0 for anonymous user. */
  'uid': number;
}

/* Stores information about sets of shortcuts links. */
export interface shortcut_setEntity {

  /* Primary Key: The menu_links.menu_name under which the set’s links are stored. */
  'set_name'?: string;

  /* The title of the set. */
  'title'?: string;
}

/* Maps users to shortcut sets. */
export interface shortcut_set_usersEntity {

  /* The shortcut_set.set_name that will be displayed for this user. */
  'set_name'?: string;

  /* The users.uid for this set. */
  'uid'?: number;
}

/* A list of all modules, themes, and theme engines that are... */
export interface systemEntity {

  /* Boolean indicating whether this module is loaded during Drupal’s early bootstrapping phase (e.g. even before the page cache is consulted). */
  'bootstrap'?: number;

  /* The path of the primary file for this item, relative to the Drupal root; e.g. modules/node/node.module. */
  'filename'?: string;

  /* A serialized array containing information from the module’s .info file; keys can include name, description, package, version, core, dependencies, and php. */
  'info'?: any | null;

  /* The name of the item; e.g. node. */
  'name'?: string;

  /* A theme’s ’parent’ . Can be either a theme or an engine. */
  'owner'?: string;

  /* The module’s database schema version number. -1 if the module is not installed (its tables do not exist); 0 or the largest N of the module’s hook_update_N() function that has either been run or existed when the module was first installed. */
  'schema_version'?: number;

  /* Boolean indicating whether or not this item is enabled. */
  'status'?: number;

  /* The type of the item, either module, theme, or theme_engine. */
  'type'?: string;

  /* The order in which this module’s hooks should be invoked relative to other modules. Equal-weighted modules are ordered by name. */
  'weight'?: number;
}

/* Maintains denormalized information about node/term... */
export interface taxonomy_indexEntity {

  /* The Unix timestamp when the node was created. */
  'created'?: number;

  /* The node.nid this record tracks. */
  'nid'?: number;

  /* Boolean indicating whether the node is sticky. */
  'sticky'?: number | null;

  /* The term ID. */
  'tid'?: number;
}

/* Stores term information. */
export interface taxonomy_term_dataEntity {

  /* A description of the term. */
  'description'?: string | null;

  /* The filter_format.format of the description. */
  'format'?: string | null;

  /* The term name. */
  'name'?: string;

  /* Primary Key: Unique term ID. */
  'tid'?: number;

  /* The taxonomy_vocabulary.vid of the vocabulary to which the term is assigned. */
  'vid'?: number;

  /* The weight of this term in relation to other terms. */
  'weight'?: number;
}

/* Stores the hierarchical relationship between terms. */
export interface taxonomy_term_hierarchyEntity {

  /* Primary Key: The taxonomy_term_data.tid of the term’s parent. 0 indicates no parent. */
  'parent'?: number;

  /* Primary Key: The taxonomy_term_data.tid of the term. */
  'tid'?: number;
}

/* Stores vocabulary information. */
export interface taxonomy_vocabularyEntity {

  /* Description of the vocabulary. */
  'description'?: string | null;

  /* The type of hierarchy allowed within the vocabulary. (0 = disabled, 1 = single, 2 = multiple) */
  'hierarchy'?: number;

  /* The vocabulary machine name. */
  'machine_name'?: string;

  /* The module which created the vocabulary. */
  'module'?: string;

  /* Name of the vocabulary. */
  'name'?: string;

  /* Primary Key: Unique vocabulary ID. */
  'vid'?: number;

  /* The weight of this vocabulary in relation to other vocabularies. */
  'weight'?: number;
}

/* A list of URL aliases for Drupal paths; a user may visit... */
export interface url_aliasEntity {

  /* The alias for this path; e.g. title-of-the-story. */
  'alias'?: string;

  /* The language this alias is for; if ’und’, the alias will be used for unknown languages. Each Drupal path can have an alias for each supported language. */
  'language'?: string;

  /* A unique path alias identifier. */
  'pid'?: number;

  /* The Drupal path this alias is for; e.g. node/12. */
  'source'?: string;
}

/* Stores user data. */
export interface usersEntity {

  /* Timestamp for previous time user accessed the site. */
  'access'?: number;

  /* Timestamp for when user was created. */
  'created'?: number;

  /* A serialized array of name value pairs that are related to the user. Any form values posted during user edit are stored and are loaded into the $user object during user_load(). Use of this field is discouraged and it will likely disappear in a future... */
  'data'?: any | null;

  /* E-mail address used for initial account creation. */
  'init'?: string | null;

  /* User’s default language. */
  'language'?: string;

  /* Timestamp for user’s last login. */
  'login'?: number;
  'mail'?: string | null;

  /* Unique user name. */
  'name'?: string;

  /* User’s password (hashed). */
  'pass'?: string;

  /* Foreign key: file_managed.fid of user’s picture. */
  'picture'?: number;

  /* User’s signature. */
  'signature'?: string;

  /* The filter_format.format of the signature. */
  'signature_format'?: string | null;

  /* Whether the user is active(1) or blocked(0). */
  'status'?: number;

  /* User’s default theme. */
  'theme'?: string;

  /* User’s time zone. */
  'timezone'?: string | null;

  /* Primary Key: Unique user ID. */
  'uid'?: number;
}

/* Maps users to roles. */
export interface users_rolesEntity {

  /* Primary Key: role.rid for role. */
  'rid'?: number;

  /* Primary Key: users.uid for user. */
  'uid'?: number;
}

/* Named variable/value pairs created by Drupal core or any... */
export interface variableEntity {

  /* The name of the variable. */
  'name'?: string;

  /* The value of the variable. */
  'value': any;
}

/* Stores information about each display attached to a view. */
export interface views_displayEntity {

  /* A serialized array of options for this display; it contains options that are generally only pertinent to that display plugin type. */
  'display_options'?: string | null;

  /* The type of the display. Usually page, block or embed, but is pluggable so may be other things. */
  'display_plugin'?: string;

  /* The title of the display, viewable by the administrator. */
  'display_title'?: string;

  /* An identifier for this display; usually generated from the display_plugin, so should be something like page or page_1 or block_2, etc. */
  'id'?: string;

  /* The order in which this display is loaded. */
  'position'?: number | null;

  /* The view this display is attached to. */
  'vid'?: number;
}

/* Stores the general data for a view. */
export interface views_viewEntity {

  /* What table this view is based on, such as node, user, comment, or term. */
  'base_table'?: string;

  /* Stores the drupal core version of the view. */
  'core'?: number | null;

  /* A description of the view for the admin interface. */
  'description'?: string | null;

  /* A human readable name used to be displayed in the admin interface */
  'human_name'?: string | null;

  /* The unique name of the view. This is the primary field views are loaded from, and is used so that views may be internal and not necessarily in the database. May only be alphanumeric characters plus underscores. */
  'name'?: string;

  /* A tag used to group/sort views in the admin interface */
  'tag'?: string | null;

  /* The view ID of the field, defined by the database. */
  'vid'?: number;
}

/* Table that contains logs of all system events. */
export interface watchdogEntity {

  /* Hostname of the user who triggered the event. */
  'hostname'?: string;

  /* Link to view the result of the event. */
  'link'?: string | null;

  /* URL of the origin of the event. */
  'location': string;

  /* Text of log message to be passed into the t() function. */
  'message': string;

  /* URL of referring page. */
  'referer'?: string | null;

  /* The severity level of the event; ranges from 0 (Emergency) to 7 (Debug) */
  'severity'?: number;

  /* Unix timestamp of when event occurred. */
  'timestamp'?: number;

  /* Type of log message, for example "user" or "page not found." */
  'type'?: string;

  /* The users.uid of the user who triggered the event. */
  'uid'?: number;

  /* Serialized array of variables that match the message string and that is passed into the t() function. */
  'variables': any;

  /* Primary Key: Unique watchdog event ID. */
  'wid'?: number;
}

/* Table for storing Weight configuration */
export interface weight_settingsEntity {

  /* The primary identifier for a content type configuration */
  'id'?: number;
  'menu_weight'?: number;
  'sync_translations'?: number;
  'type'?: string;
  'weight_default'?: number;
  'weight_enabled'?: number;
  'weight_range'?: number;
}
export interface weight_weightsEntity {
  'entity_id': number;
  'entity_type': string;
  'weight'?: number;
}
export interface activitiesEntity {
  'datetime_end'?: Date | null;
  'datetime_start'?: Date | null;
  'uid'?: number;
  'uid_activity'?: number | null;
  'uid_project'?: number | null;
  'uid_user'?: number | null;
}
export interface clientsEntity {
  'address'?: string | null;
  'category'?: string | null;
  'contact'?: string | null;
  'contact_email'?: string | null;
  'contact_tel'?: string | null;
  'doc_type'?: string | null;
  'fax'?: string | null;
  'function'?: string | null;
  'lang'?: string | null;
  'name'?: string | null;
  'register_date'?: string | null;
  'tel'?: string | null;
  'uid'?: number;
  'uid_project'?: number | null;
  'username'?: string | null;
}
export interface clients_with_mappingEntity {
  'address'?: string | null;
  'category'?: string | null;
  'contact'?: string | null;
  'contact_email'?: string | null;
  'contact_tel'?: string | null;
  'doc_type'?: string | null;
  'fax'?: string | null;
  'fct'?: string | null;
  'name'?: string | null;
  'register_date'?: string | null;
  'tel'?: string | null;
  'uid'?: number;
  'uid_project'?: number | null;
  'update_date'?: string | null;
  'username'?: string | null;
}
export interface constatsEntity {
  'category'?: string | null;
  'name'?: string | null;
  'text_en'?: string | null;
  'text_fr'?: string | null;
  'uid'?: number;
}
export interface invoicesEntity {
  'amount'?: string | null;
  'amount_before_tax'?: string | null;
  'authour'?: string | null;
  'date'?: string | null;
  'num_invoice'?: string | null;
  'project_address'?: string | null;
  'project_type'?: string | null;
  'state'?: string | null;
  'sub_contractor'?: string | null;
  'uid'?: number;
  'uid_project'?: number | null;
  'zone'?: string | null;
}
export interface lov_activitiesEntity {
  'title'?: string | null;
  'uid'?: number;
}
export interface lov_clt_catEntity {
  'uid'?: number;
  'value'?: string | null;
}
export interface lov_clt_doc_typeEntity {
  'uid'?: number;
  'value'?: string | null;
}
export interface lov_prj_billed_amount_intervalEntity {
  'max'?: string | null;
  'min'?: string | null;
  'uid'?: number;
}
export interface lov_prj_currencyEntity {
  'uid'?: number;
  'value'?: string | null;
}
export interface lov_prj_departmentEntity {
  'uid'?: number;
  'value'?: string | null;
}
export interface lov_prj_langEntity {
  'uid'?: number;
  'value'?: string | null;
}
export interface lov_prj_payedEntity {
  'uid'?: number;
  'value'?: string | null;
}
export interface lov_prj_priorityEntity {
  'uid'?: number;
  'value'?: string | null;
}
export interface lov_prj_rpt_sentEntity {
  'uid'?: number;
  'value'?: string | null;
}
export interface lov_prj_stateEntity {
  'uid'?: number;
  'value'?: string | null;
}
export interface lov_prj_typeEntity {
  'uid'?: number;
  'value'?: string | null;
}
export interface lov_prj_yearEntity {
  'uid'?: number;
  'value'?: string | null;
}
export interface lov_sellerEntity {
  'uid'?: number;
  'value'?: string | null;
}
export interface lov_soum_catEntity {
  'uid'?: number;
  'value'?: string | null;
}
export interface lov_soum_typeEntity {
  'uid'?: number;
  'value'?: string | null;
}
export interface lov_sub_acceptedEntity {
  'uid'?: number;
  'value'?: string | null;
}
export interface lov_yearsEntity {
  'uid'?: number;
  'value'?: string | null;
}
export interface overdueinvoiceEntity {
  'Currency'?: string | null;
  'id'?: number;
  'Invoiceamount'?: string | null;
  'Invoicedate'?: string | null;
  'Invoicenumber'?: string | null;
  'Invoicetype'?: string | null;
  'Projectnumber'?: string | null;
  'Range_1_to_30_Days'?: string | null;
  'Range_31_to_60_Days'?: string | null;
  'Range_60Plus'?: string | null;
  'Vendorname'?: string | null;
}
export interface projectsEntity {
  'address'?: string | null;
  'billed_amount'?: string | null;
  'budget'?: string | null;
  'category'?: string | null;
  'cost'?: string | null;
  'currency'?: string | null;
  'date_report_sent'?: string | null;
  'department'?: string | null;
  'estimate_profit'?: string | null;
  'lang'?: string | null;
  'limit_date'?: string | null;
  'lot'?: string | null;
  'nb_hours_max'?: string | null;
  'nb_hours_spent'?: string | null;
  'old_prj_uid'?: string | null;
  'open_date'?: string | null;
  'payment_state'?: string | null;
  'priority'?: string | null;
  'real_profit'?: string | null;
  'report_sent'?: string | null;
  'seller'?: string | null;
  'state'?: string | null;
  'type'?: string | null;
  'uid'?: number;
  'uid_seller'?: number | null;
  'uid_soumission'?: number | null;
  'uid_user_charge'?: number | null;
  'user_charge'?: string | null;
}
export interface projects_invoicesEntity {
  'amount'?: string | null;
  'date'?: string | null;
  'number'?: number | null;
  'status'?: string | null;
  'uid'?: number;
  'uid_project'?: string | null;
}
export interface projects_paymentsEntity {
  'amount'?: string | null;
  'date'?: string | null;
  'num_invoice'?: string | null;
  'uid'?: number;
  'uid_project'?: string | null;
}
export interface projects_tasksEntity {
  'activite'?: string | null;
  'code'?: string | null;
  'cost'?: string | null;
  'date'?: string | null;
  'hours_spent'?: string | null;
  'rate'?: string | null;
  'resp'?: string | null;
  'state'?: string | null;
  'total'?: string | null;
  'uid'?: number;
  'uid_project'?: number | null;
}
export interface subcontractor_invoicesEntity {
  'amount'?: string | null;
  'amount_before_tax'?: string | null;
  'author'?: string | null;
  'authour'?: string | null;
  'date'?: string | null;
  'num_invoice'?: string | null;
  'project_address'?: string | null;
  'project_type'?: string | null;
  'state'?: string | null;
  'sub_contractor'?: string | null;
  'uid'?: number;
  'uid_project'?: number | null;
  'zone'?: string | null;
}
export interface subcontratorEntity {
  'address'?: string | null;
  'author'?: string | null;
  'category'?: string | null;
  'contact'?: string | null;
  'name'?: string | null;
  'taxe'?: string | null;
  'tel'?: string | null;
  'uid'?: number;
}
export interface submissionsEntity {
  'address'?: string | null;
  'author'?: string | null;
  'budget'?: string | null;
  'category'?: string | null;
  'client'?: string | null;
  'company'?: string | null;
  'contact'?: string | null;
  'currency'?: string | null;
  'date_creation'?: string | null;
  'email'?: string | null;
  'lang'?: string | null;
  'seller'?: string | null;
  'status'?: string | null;
  'tel'?: string | null;
  'type'?: string | null;
  'type_doc'?: string | null;
  'uid'?: number;
  'year'?: string | null;
}
export interface time_sheetsEntity {
  'activity_title'?: string | null;
  'client_name'?: string | null;
  'end_date'?: Date | null;
  'end_time'?: string | null;
  'hours'?: string | null;
  'infos'?: string | null;
  'nb_week'?: string | null;
  'note'?: string | null;
  'punch_in'?: number | null;
  'punch_out'?: number | null;
  'rate'?: string | null;
  'start_date'?: Date | null;
  'start_time'?: string | null;
  'status'?: string | null;
  'uid'?: number;
  'uid_activity'?: string | null;
  'uid_client'?: number | null;
  'uid_project'?: number | null;
  'uid_time_sheet'?: number | null;
  'user_name'?: string | null;
}
export interface usersEntity {
  'address'?: string | null;
  'department'?: string | null;
  'email'?: string | null;
  'first_name'?: string | null;
  'last_name'?: string | null;
  'password'?: string | null;
  'phone'?: string | null;
  'rate'?: string | null;
  'renew_date'?: string | null;
  'role': string;
  'start_date'?: string | null;
  'title'?: string | null;
  'uid'?: number;
  'username'?: string | null;
}

/* Stores details about batches (processes that run in… */
export interface batchEntity {

  /* A serialized array containing the processing data for the batch. */
  'batch'?: any | null;

  /* Primary Key: Unique batch ID. */
  'bid'?: number;

  /* A Unix timestamp indicating when this batch was submitted for processing. Stale batches are purged at cron time. */
  'timestamp': string;

  /* A string token generated against the current user's session id and the batch id, used to ensure that only the user who submitted the batch can effectively access it. */
  'token': string;
}

/* The base table for block_content entities. */
export interface block_contentEntity {
  'id'?: number;
  'langcode': string;
  'revision_id'?: number | null;

  /* The ID of the target entity. */
  'type': string;
  'uuid': string;
}

/* Data storage for block_content field body. */
export interface block_content__bodyEntity {
  'body_format'?: string | null;
  'body_summary'?: string | null;
  'body_value': string;

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* The data table for block_content entities. */
export interface block_content_field_dataEntity {
  'changed'?: number | null;
  'default_langcode': number;
  'id': number;
  'info'?: string | null;
  'langcode': string;
  'reusable'?: number | null;
  'revision_id': number;
  'revision_translation_affected'?: number | null;
  'status': number;

  /* The ID of the target entity. */
  'type': string;
}

/* The revision data table for block_content entities. */
export interface block_content_field_revisionEntity {
  'changed'?: number | null;
  'default_langcode': number;
  'id': number;
  'info'?: string | null;
  'langcode': string;
  'revision_id': number;
  'revision_translation_affected'?: number | null;
  'status': number;
}

/* The revision table for block_content entities. */
export interface block_content_revisionEntity {
  'id': number;
  'langcode': string;
  'revision_created'?: number | null;
  'revision_default'?: number | null;
  'revision_id'?: number;
  'revision_log'?: string | null;

  /* The ID of the target entity. */
  'revision_user'?: number | null;
}

/* Revision archive storage for block_content field body. */
export interface block_content_revision__bodyEntity {
  'body_format'?: string | null;
  'body_summary'?: string | null;
  'body_value': string;

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Storage for the cache API. */
export interface cache_access_policyEntity {

  /* The tag invalidation checksum when this entry was saved. */
  'checksum': string;

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A timestamp with millisecond precision indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or -1 for never. */
  'expire'?: string;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;

  /* Space-separated list of cache tags for this entry. */
  'tags'?: string | null;
}

/* Storage for the cache API. */
export interface cache_bootstrapEntity {

  /* The tag invalidation checksum when this entry was saved. */
  'checksum': string;

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A timestamp with millisecond precision indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or -1 for never. */
  'expire'?: string;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;

  /* Space-separated list of cache tags for this entry. */
  'tags'?: string | null;
}

/* Storage for the cache API. */
export interface cache_configEntity {

  /* The tag invalidation checksum when this entry was saved. */
  'checksum': string;

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A timestamp with millisecond precision indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or -1 for never. */
  'expire'?: string;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;

  /* Space-separated list of cache tags for this entry. */
  'tags'?: string | null;
}

/* Storage for the cache API. */
export interface cache_containerEntity {

  /* The tag invalidation checksum when this entry was saved. */
  'checksum': string;

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A timestamp with millisecond precision indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or -1 for never. */
  'expire'?: string;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;

  /* Space-separated list of cache tags for this entry. */
  'tags'?: string | null;
}

/* Storage for the cache API. */
export interface cache_dataEntity {

  /* The tag invalidation checksum when this entry was saved. */
  'checksum': string;

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A timestamp with millisecond precision indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or -1 for never. */
  'expire'?: string;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;

  /* Space-separated list of cache tags for this entry. */
  'tags'?: string | null;
}

/* Storage for the cache API. */
export interface cache_defaultEntity {

  /* The tag invalidation checksum when this entry was saved. */
  'checksum': string;

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A timestamp with millisecond precision indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or -1 for never. */
  'expire'?: string;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;

  /* Space-separated list of cache tags for this entry. */
  'tags'?: string | null;
}

/* Storage for the cache API. */
export interface cache_discoveryEntity {

  /* The tag invalidation checksum when this entry was saved. */
  'checksum': string;

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A timestamp with millisecond precision indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or -1 for never. */
  'expire'?: string;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;

  /* Space-separated list of cache tags for this entry. */
  'tags'?: string | null;
}

/* Storage for the cache API. */
export interface cache_discovery_migrationEntity {

  /* The tag invalidation checksum when this entry was saved. */
  'checksum': string;

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A timestamp with millisecond precision indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or -1 for never. */
  'expire'?: string;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;

  /* Space-separated list of cache tags for this entry. */
  'tags'?: string | null;
}

/* Storage for the cache API. */
export interface cache_dynamic_page_cacheEntity {

  /* The tag invalidation checksum when this entry was saved. */
  'checksum': string;

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A timestamp with millisecond precision indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or -1 for never. */
  'expire'?: string;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;

  /* Space-separated list of cache tags for this entry. */
  'tags'?: string | null;
}

/* Storage for the cache API. */
export interface cache_entityEntity {

  /* The tag invalidation checksum when this entry was saved. */
  'checksum': string;

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A timestamp with millisecond precision indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or -1 for never. */
  'expire'?: string;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;

  /* Space-separated list of cache tags for this entry. */
  'tags'?: string | null;
}

/* Storage for the cache API. */
export interface cache_jsonapi_normalizationsEntity {

  /* The tag invalidation checksum when this entry was saved. */
  'checksum': string;

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A timestamp with millisecond precision indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or -1 for never. */
  'expire'?: string;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;

  /* Space-separated list of cache tags for this entry. */
  'tags'?: string | null;
}

/* Storage for the cache API. */
export interface cache_menuEntity {

  /* The tag invalidation checksum when this entry was saved. */
  'checksum': string;

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A timestamp with millisecond precision indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or -1 for never. */
  'expire'?: string;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;

  /* Space-separated list of cache tags for this entry. */
  'tags'?: string | null;
}

/* Storage for the cache API. */
export interface cache_migrateEntity {

  /* The tag invalidation checksum when this entry was saved. */
  'checksum': string;

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A timestamp with millisecond precision indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or -1 for never. */
  'expire'?: string;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;

  /* Space-separated list of cache tags for this entry. */
  'tags'?: string | null;
}

/* Storage for the cache API. */
export interface cache_pageEntity {

  /* The tag invalidation checksum when this entry was saved. */
  'checksum': string;

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A timestamp with millisecond precision indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or -1 for never. */
  'expire'?: string;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;

  /* Space-separated list of cache tags for this entry. */
  'tags'?: string | null;
}

/* Storage for the cache API. */
export interface cache_renderEntity {

  /* The tag invalidation checksum when this entry was saved. */
  'checksum': string;

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A timestamp with millisecond precision indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or -1 for never. */
  'expire'?: string;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;

  /* Space-separated list of cache tags for this entry. */
  'tags'?: string | null;
}

/* Storage for the cache API. */
export interface cache_restEntity {

  /* The tag invalidation checksum when this entry was saved. */
  'checksum': string;

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A timestamp with millisecond precision indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or -1 for never. */
  'expire'?: string;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;

  /* Space-separated list of cache tags for this entry. */
  'tags'?: string | null;
}

/* Storage for the cache API. */
export interface cache_rulesEntity {

  /* The tag invalidation checksum when this entry was saved. */
  'checksum': string;

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A timestamp with millisecond precision indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or -1 for never. */
  'expire'?: string;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;

  /* Space-separated list of cache tags for this entry. */
  'tags'?: string | null;
}

/* Storage for the cache API. */
export interface cache_toolbarEntity {

  /* The tag invalidation checksum when this entry was saved. */
  'checksum': string;

  /* Primary Key: Unique cache ID. */
  'cid'?: string;

  /* A timestamp with millisecond precision indicating when the cache entry was created. */
  'created'?: number;

  /* A collection of data to cache. */
  'data'?: any | null;

  /* A Unix timestamp indicating when the cache entry should expire, or -1 for never. */
  'expire'?: string;

  /* A flag to indicate whether content is serialized (1) or not (0). */
  'serialized'?: number;

  /* Space-separated list of cache tags for this entry. */
  'tags'?: string | null;
}

/* Cache table for tracking cache tag invalidations. */
export interface cachetagsEntity {

  /* Number incremented when the tag is invalidated. */
  'invalidations'?: number;

  /* Namespace-prefixed tag string. */
  'tag'?: string;
}

/* Stores the data about CAPTCHA sessions (solution, IP… */
export interface captcha_sessionsEntity {

  /* The number of attempts. */
  'attempts'?: number;

  /* CAPTCHA session ID. */
  'csid'?: number;

  /* The form_id of the form where the CAPTCHA is added to. */
  'form_id': string;

  /* IP address of the visitor. */
  'ip_address'?: string | null;

  /* Session ID of the user. */
  'sid'?: string;

  /* Solution of the challenge. */
  'solution'?: string;

  /* Status of the CAPTCHA session (unsolved, solved, ...) */
  'status'?: number;

  /* A Unix timestamp indicating when the challenge was generated. */
  'timestamp'?: number;

  /* One time CAPTCHA token. */
  'token'?: string | null;

  /* User's users.uid. */
  'uid'?: number;
}

/* The base table for comment entities. */
export interface commentEntity {
  'cid'?: number;

  /* The ID of the target entity. */
  'comment_type': string;
  'langcode': string;
  'uuid': string;
}

/* Data storage for comment field comment_body. */
export interface comment__comment_bodyEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;
  'comment_body_format'?: string | null;
  'comment_body_value': string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;
}

/* Maintains statistics of entity and comments posts to show … */
export interface comment_entity_statisticsEntity {

  /* The comment.cid of the last comment. */
  'cid'?: number;

  /* The total number of comments on this entity. */
  'comment_count'?: number;

  /* The entity_id of the entity for which the statistics are compiled. */
  'entity_id'?: number;

  /* The entity_type of the entity to which this comment is a reply. */
  'entity_type'?: string;

  /* The field_name of the field that was used to add this comment. */
  'field_name'?: string;

  /* The name of the latest author to post a comment on this node, from comment.name. */
  'last_comment_name'?: string | null;

  /* The Unix timestamp of the last comment that was posted within this node, from "comment".changed. */
  'last_comment_timestamp'?: string;

  /* The user ID of the latest author to post a comment on this node, from comment.uid. */
  'last_comment_uid'?: number;
}

/* The data table for comment entities. */
export interface comment_field_dataEntity {
  'changed'?: number | null;
  'cid': number;

  /* The ID of the target entity. */
  'comment_type': string;
  'created': number;
  'default_langcode': number;

  /* The ID of the target entity. */
  'entity_id'?: number | null;
  'entity_type': string;
  'field_name': string;
  'homepage'?: string | null;
  'hostname'?: string | null;
  'langcode': string;
  'mail'?: string | null;
  'name'?: string | null;

  /* The ID of the target entity. */
  'pid'?: number | null;
  'status': number;
  'subject'?: string | null;
  'thread': string;

  /* The ID of the target entity. */
  'uid': number;
}

/* The base table for configuration data. */
export interface configEntity {

  /* Primary Key: Config object collection. */
  'collection'?: string;

  /* A serialized configuration object data. */
  'data'?: any | null;

  /* Primary Key: Config object name. */
  'name'?: string;
}

/* The base table for configuration data. */
export interface config_exportEntity {

  /* Primary Key: Config object collection. */
  'collection'?: string;

  /* A serialized configuration object data. */
  'data'?: any | null;

  /* Primary Key: Config object name. */
  'name'?: string;
}

/* The base table for configuration data. */
export interface config_importEntity {

  /* Primary Key: Config object collection. */
  'collection'?: string;

  /* A serialized configuration object data. */
  'data'?: any | null;

  /* Primary Key: Config object name. */
  'name'?: string;
}

/* The base table for configuration data. */
export interface config_snapshotEntity {

  /* Primary Key: Config object collection. */
  'collection'?: string;

  /* A serialized configuration object data. */
  'data'?: any | null;

  /* Primary Key: Config object name. */
  'name'?: string;
}

/* The base table for consumer entities. */
export interface consumerEntity {
  'id'?: number;
  'langcode': string;
  'uuid': string;
}

/* Data storage for consumer field image_styles. */
export interface consumer__image_stylesEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'image_styles_target_id': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;
}

/* The data table for consumer entities. */
export interface consumer_field_dataEntity {
  'client_id'?: string | null;
  'default_langcode': number;
  'description'?: string | null;
  'id': number;

  /* Alternative image text, for the image's 'alt' attribute. */
  'image__alt'?: string | null;

  /* The height of the image in pixels. */
  'image__height'?: number | null;

  /* The ID of the file entity. */
  'image__target_id'?: number | null;

  /* Image title text, for the image's 'title' attribute. */
  'image__title'?: string | null;

  /* The width of the image in pixels. */
  'image__width'?: number | null;
  'is_default'?: number | null;
  'label'?: string | null;
  'langcode': string;

  /* The ID of the target entity. */
  'owner_id': number;
  'third_party'?: number | null;
}

/* The base table for file entities. */
export interface file_managedEntity {
  'changed': number;
  'created'?: number | null;
  'fid'?: number;
  'filemime'?: string | null;
  'filename'?: string | null;
  'filesize'?: string | null;
  'langcode': string;
  'status': number;

  /* The ID of the target entity. */
  'uid'?: number | null;
  'uri': string;
  'uuid': string;
}

/* Track where a file is used. */
export interface file_usageEntity {

  /* The number of times this file is used by this object. */
  'count'?: number;

  /* File ID. */
  'fid': number;

  /* The primary key of the object using the file. */
  'id'?: string;

  /* The name of the module that is using the file. */
  'module'?: string;

  /* The name of the object type in which the file is used. */
  'type'?: string;
}

/* Flood controls the threshold of events, such as the number… */
export interface floodEntity {

  /* Name of event (e.g. contact). */
  'event'?: string;

  /* Expiration timestamp. Expired events are purged on cron run. */
  'expiration'?: string;

  /* Unique flood event ID. */
  'fid'?: number;

  /* Identifier of the visitor, such as an IP address or hostname. */
  'identifier'?: string;

  /* Timestamp of the event. */
  'timestamp'?: string;
}

/* Stores information about indexed help search items */
export interface help_search_itemsEntity {

  /* The permission needed to view this item */
  'permission'?: string;

  /* The help section the item comes from */
  'section_plugin_id'?: string;

  /* Numeric index of this item in the search index */
  'sid'?: number;

  /* The topic ID of the item */
  'topic_id'?: string;
}

/* A record of which users have read which nodes. */
export interface historyEntity {

  /* The node.nid that was read. */
  'nid'?: number;

  /* The Unix timestamp at which the read occurred. */
  'timestamp'?: string;

  /* The users.uid that read the node nid. */
  'uid'?: number;
}

/* Track where a block_content entity is used. */
export interface inline_block_usageEntity {

  /* The block_content entity ID. */
  'block_content_id': number;

  /* The ID of the parent entity. */
  'layout_entity_id'?: string | null;

  /* The entity type of the parent entity. */
  'layout_entity_type'?: string | null;
}

/* Generic key-value storage table. See the state system for… */
export interface key_valueEntity {

  /* A named collection of key and value pairs. */
  'collection'?: string;

  /* The key of the key-value pair. As KEY is a SQL reserved keyword, name was chosen instead. */
  'name'?: string;

  /* The value. */
  'value': any;
}

/* Generic key/value storage table with an expiration. */
export interface key_value_expireEntity {

  /* A named collection of key and value pairs. */
  'collection'?: string;

  /* The time since Unix epoch in seconds when this item expires. Defaults to the maximum possible time. */
  'expire'?: number;

  /* The key of the key/value pair. */
  'name'?: string;

  /* The value of the key/value pair. */
  'value': any;
}

/* The base table for mass_contact_message entities. */
export interface mass_contactEntity {
  'body__format'?: string | null;
  'body__value'?: string | null;
  'id'?: number;
  'sent'?: number | null;
  'subject'?: string | null;

  /* The ID of the target entity. */
  'uid': number;
  'uuid': string;
}

/* Data storage for mass_contact_message field categories. */
export interface mass_contact_message__categoriesEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* The ID of the target entity. */
  'categories_target_id': string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;
}

/* The base table for media entities. */
export interface mediaEntity {

  /* The ID of the target entity. */
  'bundle': string;
  'langcode': string;
  'mid'?: number;
  'uuid': string;
  'vid'?: number | null;
}

/* Data storage for media field field_media_audio_file. */
export interface media__field_media_audio_fileEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* A description of the file. */
  'field_media_audio_file_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_media_audio_file_display'?: number | null;

  /* The ID of the file entity. */
  'field_media_audio_file_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for media field field_media_file. */
export interface media__field_media_fileEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* A description of the file. */
  'field_media_file_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_media_file_display'?: number | null;

  /* The ID of the file entity. */
  'field_media_file_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for media field field_media_image. */
export interface media__field_media_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* Alternative image text, for the image's 'alt' attribute. */
  'field_media_image_alt'?: string | null;

  /* The height of the image in pixels. */
  'field_media_image_height'?: number | null;

  /* The ID of the file entity. */
  'field_media_image_target_id': number;

  /* Image title text, for the image's 'title' attribute. */
  'field_media_image_title'?: string | null;

  /* The width of the image in pixels. */
  'field_media_image_width'?: number | null;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for media field field_media_oembed_video. */
export interface media__field_media_oembed_videoEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_media_oembed_video_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for media field field_media_video_file. */
export interface media__field_media_video_fileEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* A description of the file. */
  'field_media_video_file_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_media_video_file_display'?: number | null;

  /* The ID of the file entity. */
  'field_media_video_file_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* The data table for media entities. */
export interface media_field_dataEntity {

  /* The ID of the target entity. */
  'bundle': string;
  'changed'?: number | null;
  'created'?: number | null;
  'default_langcode': number;
  'langcode': string;
  'mid': number;
  'name'?: string | null;
  'revision_translation_affected'?: number | null;
  'status': number;

  /* Alternative image text, for the image's 'alt' attribute. */
  'thumbnail__alt'?: string | null;

  /* The height of the image in pixels. */
  'thumbnail__height'?: number | null;

  /* The ID of the file entity. */
  'thumbnail__target_id'?: number | null;

  /* Image title text, for the image's 'title' attribute. */
  'thumbnail__title'?: string | null;

  /* The width of the image in pixels. */
  'thumbnail__width'?: number | null;

  /* The ID of the target entity. */
  'uid': number;
  'vid': number;
}

/* The revision data table for media entities. */
export interface media_field_revisionEntity {
  'changed'?: number | null;
  'created'?: number | null;
  'default_langcode': number;
  'langcode': string;
  'mid': number;
  'name'?: string | null;
  'revision_translation_affected'?: number | null;
  'status': number;

  /* Alternative image text, for the image's 'alt' attribute. */
  'thumbnail__alt'?: string | null;

  /* The height of the image in pixels. */
  'thumbnail__height'?: number | null;

  /* The ID of the file entity. */
  'thumbnail__target_id'?: number | null;

  /* Image title text, for the image's 'title' attribute. */
  'thumbnail__title'?: string | null;

  /* The width of the image in pixels. */
  'thumbnail__width'?: number | null;

  /* The ID of the target entity. */
  'uid': number;
  'vid': number;
}

/* The revision table for media entities. */
export interface media_revisionEntity {
  'langcode': string;
  'mid': number;
  'revision_created'?: number | null;
  'revision_default'?: number | null;
  'revision_log_message'?: string | null;

  /* The ID of the target entity. */
  'revision_user'?: number | null;
  'vid'?: number;
}

/* Revision archive storage for media field field_media_audio… */
export interface media_revision__field_media_audio_fileEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* A description of the file. */
  'field_media_audio_file_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_media_audio_file_display'?: number | null;

  /* The ID of the file entity. */
  'field_media_audio_file_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for media field field_media_file. */
export interface media_revision__field_media_fileEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* A description of the file. */
  'field_media_file_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_media_file_display'?: number | null;

  /* The ID of the file entity. */
  'field_media_file_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for media field field_media_image. */
export interface media_revision__field_media_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* Alternative image text, for the image's 'alt' attribute. */
  'field_media_image_alt'?: string | null;

  /* The height of the image in pixels. */
  'field_media_image_height'?: number | null;

  /* The ID of the file entity. */
  'field_media_image_target_id': number;

  /* Image title text, for the image's 'title' attribute. */
  'field_media_image_title'?: string | null;

  /* The width of the image in pixels. */
  'field_media_image_width'?: number | null;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for media field field_media_oembed… */
export interface media_revision__field_media_oembed_videoEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_media_oembed_video_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for media field field_media_video… */
export interface media_revision__field_media_video_fileEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* A description of the file. */
  'field_media_video_file_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_media_video_file_display'?: number | null;

  /* The ID of the file entity. */
  'field_media_video_file_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* The base table for menu_link_content entities. */
export interface menu_link_contentEntity {
  'bundle': string;
  'id'?: number;
  'langcode': string;
  'revision_id'?: number | null;
  'uuid': string;
}

/* The data table for menu_link_content entities. */
export interface menu_link_content_dataEntity {
  'bundle': string;
  'changed'?: number | null;
  'default_langcode': number;
  'description'?: string | null;
  'enabled': number;
  'expanded'?: number | null;
  'external'?: number | null;
  'id': number;
  'langcode': string;

  /* Serialized array of options for the link. */
  'link__options'?: any | null;

  /* The link text. */
  'link__title'?: string | null;

  /* The URI of the link. */
  'link__uri'?: string | null;
  'menu_name'?: string | null;
  'parent'?: string | null;
  'rediscover'?: number | null;
  'revision_id': number;
  'revision_translation_affected'?: number | null;
  'title'?: string | null;
  'weight'?: number | null;
}

/* The revision data table for menu_link_content entities. */
export interface menu_link_content_field_revisionEntity {
  'changed'?: number | null;
  'default_langcode': number;
  'description'?: string | null;
  'enabled': number;
  'external'?: number | null;
  'id': number;
  'langcode': string;

  /* Serialized array of options for the link. */
  'link__options'?: any | null;

  /* The link text. */
  'link__title'?: string | null;

  /* The URI of the link. */
  'link__uri'?: string | null;
  'revision_id': number;
  'revision_translation_affected'?: number | null;
  'title'?: string | null;
}

/* The revision table for menu_link_content entities. */
export interface menu_link_content_revisionEntity {
  'id': number;
  'langcode': string;
  'revision_created'?: number | null;
  'revision_default'?: number | null;
  'revision_id'?: number;
  'revision_log_message'?: string | null;

  /* The ID of the target entity. */
  'revision_user'?: number | null;
}

/* Contains the menu tree hierarchy. */
export interface menu_treeEntity {

  /* The class for this link plugin. */
  'class'?: string | null;

  /* The depth relative to the top level. A link with empty parent will have depth == 1. */
  'depth'?: number;

  /* The serialized description of this link - used for admin pages and title attribute. May be a TranslatableMarkup. */
  'description'?: any | null;

  /* A flag for whether the link was discovered, so can be purged on rebuild */
  'discovered'?: number;

  /* A flag for whether the link should be rendered in menus. (0 = a disabled menu item that may be shown on admin screens, 1 = a normal, visible link) */
  'enabled'?: number;

  /* Flag for whether this link should be rendered as expanded in menus - expanded links always have their child links displayed, instead of only when the link is in the active trail (1 = expanded, 0 = not expanded) */
  'expanded'?: number;

  /* meh */
  'form_class'?: string | null;

  /* Flag indicating whether any enabled links have this link as a parent (1 = enabled children exist, 0 = no enabled children). */
  'has_children'?: number;

  /* Unique machine name: the plugin ID. */
  'id': string;

  /* The menu name. All links with the same menu name (such as 'tools') are part of the same menu. */
  'menu_name'?: string;

  /* A serialized array of data that may be used by the plugin instance. */
  'metadata'?: any | null;

  /* The menu link ID (mlid) is the integer primary key. */
  'mlid'?: number;

  /* A serialized array of URL options, such as a query string or HTML attributes. */
  'options'?: any | null;

  /* The first mlid in the materialized path. If N = depth, then pN must equal the mlid. If depth > 1 then p(N-1) must equal the parent link mlid. All pX where X > depth must equal zero. The columns p1 .. p9 are also called the parents. */
  'p1'?: number;

  /* The second mlid in the materialized path. See p1. */
  'p2'?: number;

  /* The third mlid in the materialized path. See p1. */
  'p3'?: number;

  /* The fourth mlid in the materialized path. See p1. */
  'p4'?: number;

  /* The fifth mlid in the materialized path. See p1. */
  'p5'?: number;

  /* The sixth mlid in the materialized path. See p1. */
  'p6'?: number;

  /* The seventh mlid in the materialized path. See p1. */
  'p7'?: number;

  /* The eighth mlid in the materialized path. See p1. */
  'p8'?: number;

  /* The ninth mlid in the materialized path. See p1. */
  'p9'?: number;

  /* The plugin ID for the parent of this link. */
  'parent'?: string;

  /* The name of the module that generated this link. */
  'provider'?: string;

  /* The machine name of a defined Symfony Route this menu item represents. */
  'route_name'?: string | null;

  /* An encoded string of route parameters for loading by route. */
  'route_param_key'?: string | null;

  /* Serialized array of route parameters of this menu link. */
  'route_parameters'?: any | null;

  /* The serialized title for the link. May be a TranslatableMarkup. */
  'title'?: any | null;

  /* The external path this link points to (when not using a route). */
  'url'?: string;

  /* Link weight among links in the same menu at the same depth. */
  'weight'?: number;
}

/* Mappings from source identifier value(s) to destination… */
export interface migrate_map_custom_user_migrationEntity {
  'destid1'?: number | null;

  /* Hash of source row data, for detecting changes */
  'hash'?: string | null;

  /* UNIX timestamp of the last time this row was imported */
  'last_imported'?: string;

  /* Flag indicating what to do for this item on rollback */
  'rollback_action'?: number;

  /* Hash of source ids. Used as primary key */
  'source_ids_hash': string;

  /* Indicates current status of the source row */
  'source_row_status'?: number;
  'sourceid1': string;
}

/* Messages generated during a migration process */
export interface migrate_message_custom_user_migrationEntity {
  'level'?: number;
  'message': string;
  'msgid'?: number;

  /* Hash of source ids. Used as primary key */
  'source_ids_hash': string;
}

/* Table storing SyncSourceIds entries for the --sync option. */
export interface migrate_tools_sync_source_idsEntity {

  /* Primary Key: Unique ID. */
  'id'?: number;

  /* The migration ID. */
  'migration_id': string;

  /* Array of source IDs, in the same order as defined in \Drupal\migrate\Row::$sourceIds. */
  'source_ids': any;
}

/* The base table for node entities. */
export interface nodeEntity {
  'langcode': string;
  'nid'?: number;

  /* The ID of the target entity. */
  'type': string;
  'uuid': string;
  'vid'?: number | null;
}

/* Data storage for node field body. */
export interface node__bodyEntity {
  'body_format'?: string | null;
  'body_summary'?: string | null;
  'body_value': string;

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field comment. */
export interface node__commentEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* Whether comments are allowed on this entity: 0 = no, 1 = closed (read only), 2 = open (read/write). */
  'comment_status'?: number;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_a_side_songs. */
export interface node__field_a_side_songsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_a_side_songs_target_id': number;

  /* The revision ID of the target entity. */
  'field_a_side_songs_target_revision_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_artist_term. */
export interface node__field_artist_termEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_artist_term_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_audio. */
export interface node__field_audioEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* A description of the file. */
  'field_audio_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_audio_display'?: number | null;

  /* The ID of the file entity. */
  'field_audio_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_audio_duration. */
export interface node__field_audio_durationEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_audio_duration_value': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_audio_review. */
export interface node__field_audio_reviewEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* A description of the file. */
  'field_audio_review_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_audio_review_display'?: number | null;

  /* The ID of the file entity. */
  'field_audio_review_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_b_side_songs. */
export interface node__field_b_side_songsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_b_side_songs_target_id': number;

  /* The revision ID of the target entity. */
  'field_b_side_songs_target_revision_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_band_members. */
export interface node__field_band_membersEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_band_members_format'?: string | null;
  'field_band_members_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_buy_cassette_link. */
export interface node__field_buy_cassette_linkEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* Serialized array of options for the link. */
  'field_buy_cassette_link_options'?: any | null;

  /* The link text. */
  'field_buy_cassette_link_title'?: string | null;

  /* The URI of the link. */
  'field_buy_cassette_link_uri'?: string | null;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_buy_discogs_link. */
export interface node__field_buy_discogs_linkEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* Serialized array of options for the link. */
  'field_buy_discogs_link_options'?: any | null;

  /* The link text. */
  'field_buy_discogs_link_title'?: string | null;

  /* The URI of the link. */
  'field_buy_discogs_link_uri'?: string | null;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_buy_record_link. */
export interface node__field_buy_record_linkEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* Serialized array of options for the link. */
  'field_buy_record_link_options'?: any | null;

  /* The link text. */
  'field_buy_record_link_title'?: string | null;

  /* The URI of the link. */
  'field_buy_record_link_uri'?: string | null;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_c_side_songs. */
export interface node__field_c_side_songsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_c_side_songs_target_id': number;

  /* The revision ID of the target entity. */
  'field_c_side_songs_target_revision_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_cassette_cover. */
export interface node__field_cassette_coverEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* Alternative image text, for the image's 'alt' attribute. */
  'field_cassette_cover_alt'?: string | null;

  /* The height of the image in pixels. */
  'field_cassette_cover_height'?: number | null;

  /* The ID of the file entity. */
  'field_cassette_cover_target_id': number;

  /* Image title text, for the image's 'title' attribute. */
  'field_cassette_cover_title'?: string | null;

  /* The width of the image in pixels. */
  'field_cassette_cover_width'?: number | null;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_credits. */
export interface node__field_creditsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_credits_format'?: string | null;
  'field_credits_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_d_side_songs. */
export interface node__field_d_side_songsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_d_side_songs_target_id': number;

  /* The revision ID of the target entity. */
  'field_d_side_songs_target_revision_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_featured. */
export interface node__field_featuredEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_featured_value': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_genre. */
export interface node__field_genreEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_genre_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_image. */
export interface node__field_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* Alternative image text, for the image's 'alt' attribute. */
  'field_image_alt'?: string | null;

  /* The height of the image in pixels. */
  'field_image_height'?: number | null;

  /* The ID of the file entity. */
  'field_image_target_id': number;

  /* Image title text, for the image's 'title' attribute. */
  'field_image_title'?: string | null;

  /* The width of the image in pixels. */
  'field_image_width'?: number | null;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_images. */
export interface node__field_imagesEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* Alternative image text, for the image's 'alt' attribute. */
  'field_images_alt'?: string | null;

  /* The height of the image in pixels. */
  'field_images_height'?: number | null;

  /* The ID of the file entity. */
  'field_images_target_id': number;

  /* Image title text, for the image's 'title' attribute. */
  'field_images_title'?: string | null;

  /* The width of the image in pixels. */
  'field_images_width'?: number | null;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_is_vinyl. */
export interface node__field_is_vinylEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_is_vinyl_value': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_label. */
export interface node__field_labelEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_label_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_likes. */
export interface node__field_likesEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_likes_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_liner_notes. */
export interface node__field_liner_notesEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_liner_notes_format'?: string | null;
  'field_liner_notes_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_mentioned_album. */
export interface node__field_mentioned_albumEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_mentioned_album_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_meta_tags. */
export interface node__field_meta_tagsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_meta_tags_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_podcast_image. */
export interface node__field_podcast_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_podcast_image_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_release_year. */
export interface node__field_release_yearEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_release_year_value': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_review. */
export interface node__field_reviewEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_review_format'?: string | null;
  'field_review_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_tags. */
export interface node__field_tagsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_tags_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_transcript. */
export interface node__field_transcriptEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_transcript_format'?: string | null;
  'field_transcript_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for node field field_yoast_seo. */
export interface node__field_yoast_seoEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_yoast_seo_description'?: string | null;
  'field_yoast_seo_focus_keyword'?: string | null;
  'field_yoast_seo_status'?: string | null;
  'field_yoast_seo_title'?: string | null;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Identifies which realm/grant pairs a user must possess in… */
export interface node_accessEntity {

  /* Boolean indicating whether this record should be used as a fallback if a language condition is not provided. */
  'fallback'?: number;

  /* The grant ID a user must possess in the specified realm to gain this row's privileges on the node. */
  'gid'?: number;

  /* Boolean indicating whether a user with the realm/grant pair can delete this node. */
  'grant_delete'?: number;

  /* Boolean indicating whether a user with the realm/grant pair can edit this node. */
  'grant_update'?: number;

  /* Boolean indicating whether a user with the realm/grant pair can view this node. */
  'grant_view'?: number;

  /* The language.langcode of this node. */
  'langcode'?: string;

  /* The node.nid this record affects. */
  'nid'?: number;

  /* The realm in which the user must possess the grant ID. Modules can define one or more realms by implementing hook_node_grants(). */
  'realm'?: string;
}

/* The data table for node entities. */
export interface node_field_dataEntity {
  'changed': number;
  'created': number;
  'default_langcode': number;
  'langcode': string;
  'nid': number;
  'promote': number;
  'revision_translation_affected'?: number | null;
  'status': number;
  'sticky': number;
  'title': string;

  /* The ID of the target entity. */
  'type': string;

  /* The ID of the target entity. */
  'uid': number;
  'vid': number;
}

/* The revision data table for node entities. */
export interface node_field_revisionEntity {
  'changed'?: number | null;
  'created'?: number | null;
  'default_langcode': number;
  'langcode': string;
  'nid': number;
  'promote'?: number | null;
  'revision_translation_affected'?: number | null;
  'status': number;
  'sticky'?: number | null;
  'title'?: string | null;

  /* The ID of the target entity. */
  'uid': number;
  'vid': number;
}

/* The revision table for node entities. */
export interface node_revisionEntity {
  'langcode': string;
  'nid': number;
  'revision_default'?: number | null;
  'revision_log'?: string | null;
  'revision_timestamp'?: number | null;

  /* The ID of the target entity. */
  'revision_uid'?: number | null;
  'vid'?: number;
}

/* Revision archive storage for node field body. */
export interface node_revision__bodyEntity {
  'body_format'?: string | null;
  'body_summary'?: string | null;
  'body_value': string;

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field comment. */
export interface node_revision__commentEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* Whether comments are allowed on this entity: 0 = no, 1 = closed (read only), 2 = open (read/write). */
  'comment_status'?: number;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_a_side_songs. */
export interface node_revision__field_a_side_songsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_a_side_songs_target_id': number;

  /* The revision ID of the target entity. */
  'field_a_side_songs_target_revision_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_artist_term. */
export interface node_revision__field_artist_termEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_artist_term_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_audio. */
export interface node_revision__field_audioEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* A description of the file. */
  'field_audio_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_audio_display'?: number | null;

  /* The ID of the file entity. */
  'field_audio_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_audio… */
export interface node_revision__field_audio_durationEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_audio_duration_value': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_audio_review. */
export interface node_revision__field_audio_reviewEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* A description of the file. */
  'field_audio_review_description'?: string | null;

  /* Flag to control whether this file should be displayed when viewing content. */
  'field_audio_review_display'?: number | null;

  /* The ID of the file entity. */
  'field_audio_review_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_b_side_songs. */
export interface node_revision__field_b_side_songsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_b_side_songs_target_id': number;

  /* The revision ID of the target entity. */
  'field_b_side_songs_target_revision_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_band_members. */
export interface node_revision__field_band_membersEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_band_members_format'?: string | null;
  'field_band_members_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_buy_cassette… */
export interface node_revision__field_buy_cassette_linkEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* Serialized array of options for the link. */
  'field_buy_cassette_link_options'?: any | null;

  /* The link text. */
  'field_buy_cassette_link_title'?: string | null;

  /* The URI of the link. */
  'field_buy_cassette_link_uri'?: string | null;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_buy_discogs… */
export interface node_revision__field_buy_discogs_linkEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* Serialized array of options for the link. */
  'field_buy_discogs_link_options'?: any | null;

  /* The link text. */
  'field_buy_discogs_link_title'?: string | null;

  /* The URI of the link. */
  'field_buy_discogs_link_uri'?: string | null;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_buy_record… */
export interface node_revision__field_buy_record_linkEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* Serialized array of options for the link. */
  'field_buy_record_link_options'?: any | null;

  /* The link text. */
  'field_buy_record_link_title'?: string | null;

  /* The URI of the link. */
  'field_buy_record_link_uri'?: string | null;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_c_side_songs. */
export interface node_revision__field_c_side_songsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_c_side_songs_target_id': number;

  /* The revision ID of the target entity. */
  'field_c_side_songs_target_revision_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_cassette… */
export interface node_revision__field_cassette_coverEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* Alternative image text, for the image's 'alt' attribute. */
  'field_cassette_cover_alt'?: string | null;

  /* The height of the image in pixels. */
  'field_cassette_cover_height'?: number | null;

  /* The ID of the file entity. */
  'field_cassette_cover_target_id': number;

  /* Image title text, for the image's 'title' attribute. */
  'field_cassette_cover_title'?: string | null;

  /* The width of the image in pixels. */
  'field_cassette_cover_width'?: number | null;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_credits. */
export interface node_revision__field_creditsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_credits_format'?: string | null;
  'field_credits_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_d_side_songs. */
export interface node_revision__field_d_side_songsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_d_side_songs_target_id': number;

  /* The revision ID of the target entity. */
  'field_d_side_songs_target_revision_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_featured. */
export interface node_revision__field_featuredEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_featured_value': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_genre. */
export interface node_revision__field_genreEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_genre_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_image. */
export interface node_revision__field_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* Alternative image text, for the image's 'alt' attribute. */
  'field_image_alt'?: string | null;

  /* The height of the image in pixels. */
  'field_image_height'?: number | null;

  /* The ID of the file entity. */
  'field_image_target_id': number;

  /* Image title text, for the image's 'title' attribute. */
  'field_image_title'?: string | null;

  /* The width of the image in pixels. */
  'field_image_width'?: number | null;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_images. */
export interface node_revision__field_imagesEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* Alternative image text, for the image's 'alt' attribute. */
  'field_images_alt'?: string | null;

  /* The height of the image in pixels. */
  'field_images_height'?: number | null;

  /* The ID of the file entity. */
  'field_images_target_id': number;

  /* Image title text, for the image's 'title' attribute. */
  'field_images_title'?: string | null;

  /* The width of the image in pixels. */
  'field_images_width'?: number | null;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_is_vinyl. */
export interface node_revision__field_is_vinylEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_is_vinyl_value': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_label. */
export interface node_revision__field_labelEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_label_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_likes. */
export interface node_revision__field_likesEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_likes_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_liner_notes. */
export interface node_revision__field_liner_notesEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_liner_notes_format'?: string | null;
  'field_liner_notes_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_mentioned… */
export interface node_revision__field_mentioned_albumEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_mentioned_album_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_meta_tags. */
export interface node_revision__field_meta_tagsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_meta_tags_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_podcast_image. */
export interface node_revision__field_podcast_imageEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_podcast_image_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_release_year. */
export interface node_revision__field_release_yearEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_release_year_value': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_review. */
export interface node_revision__field_reviewEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_review_format'?: string | null;
  'field_review_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_tags. */
export interface node_revision__field_tagsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_tags_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_transcript. */
export interface node_revision__field_transcriptEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_transcript_format'?: string | null;
  'field_transcript_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for node field field_yoast_seo. */
export interface node_revision__field_yoast_seoEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_yoast_seo_description'?: string | null;
  'field_yoast_seo_focus_keyword'?: string | null;
  'field_yoast_seo_status'?: string | null;
  'field_yoast_seo_title'?: string | null;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* A list of URL aliases for Drupal paths. a user may visit… */
export interface old_5de8db_url_aliasEntity {

  /* The alias for this path. e.g. title-of-the-story. */
  'alias'?: string;

  /* The language code this alias is for. if 'und', the alias will be used for unknown languages. Each Drupal path can have an alias for each supported language. */
  'langcode'?: string;

  /* A unique path alias identifier. */
  'pid'?: number;

  /* The Drupal path this alias is for. e.g. node/12. */
  'source'?: string;
}

/* A list of URL aliases for Drupal paths. a user may visit… */
export interface old_5de8f6_url_aliasEntity {

  /* The alias for this path. e.g. title-of-the-story. */
  'alias'?: string;

  /* The language code this alias is for. if 'und', the alias will be used for unknown languages. Each Drupal path can have an alias for each supported language. */
  'langcode'?: string;

  /* A unique path alias identifier. */
  'pid'?: number;

  /* The Drupal path this alias is for. e.g. node/12. */
  'source'?: string;
}

/* Data storage for paragraph field field_album_name. */
export interface paragraph__field_album_nameEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_album_name_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for paragraph field field_artist_name. */
export interface paragraph__field_artist_nameEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_artist_name_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for paragraph field field_book_name. */
export interface paragraph__field_book_nameEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_book_name_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for paragraph field field_comment. */
export interface paragraph__field_commentEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_comment_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for paragraph field field_concert_name. */
export interface paragraph__field_concert_nameEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_concert_name_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for paragraph field field_fav_song_name. */
export interface paragraph__field_fav_song_nameEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_fav_song_name_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for paragraph field field_lyrics. */
export interface paragraph__field_lyricsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_lyrics_format'?: string | null;
  'field_lyrics_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for paragraph field field_movie_name. */
export interface paragraph__field_movie_nameEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_movie_name_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for paragraph field field_site. */
export interface paragraph__field_siteEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_site_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for paragraph field field_site_s_url. */
export interface paragraph__field_site_s_urlEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* Serialized array of options for the link. */
  'field_site_s_url_options'?: any | null;

  /* The link text. */
  'field_site_s_url_title'?: string | null;

  /* The URI of the link. */
  'field_site_s_url_uri'?: string | null;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for paragraph field field_song. */
export interface paragraph__field_songEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_song_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for paragraph field field_song_credits. */
export interface paragraph__field_song_creditsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_song_credits_format'?: string | null;
  'field_song_credits_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for paragraph field field_song_duration. */
export interface paragraph__field_song_durationEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_song_duration_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for paragraph field field_song_name. */
export interface paragraph__field_song_nameEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_song_name_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for paragraph field field_song_preview_url. */
export interface paragraph__field_song_preview_urlEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_song_preview_url_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for paragraph field field_song_writers. */
export interface paragraph__field_song_writersEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_song_writers_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for paragraph field field_track_plays. */
export interface paragraph__field_track_playsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_track_plays_value': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for paragraph field field_tv_show_name. */
export interface paragraph__field_tv_show_nameEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_tv_show_name_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for paragraph field field_album… */
export interface paragraph_revision__field_album_nameEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_album_name_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for paragraph field field_artist… */
export interface paragraph_revision__field_artist_nameEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_artist_name_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for paragraph field field_book… */
export interface paragraph_revision__field_book_nameEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_book_name_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for paragraph field field_comment. */
export interface paragraph_revision__field_commentEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_comment_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for paragraph field field_concert… */
export interface paragraph_revision__field_concert_nameEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_concert_name_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for paragraph field field_fav_song… */
export interface paragraph_revision__field_fav_song_nameEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_fav_song_name_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for paragraph field field_lyrics. */
export interface paragraph_revision__field_lyricsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_lyrics_format'?: string | null;
  'field_lyrics_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for paragraph field field_movie… */
export interface paragraph_revision__field_movie_nameEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_movie_name_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for paragraph field field_site. */
export interface paragraph_revision__field_siteEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_site_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for paragraph field field_site_s… */
export interface paragraph_revision__field_site_s_urlEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* Serialized array of options for the link. */
  'field_site_s_url_options'?: any | null;

  /* The link text. */
  'field_site_s_url_title'?: string | null;

  /* The URI of the link. */
  'field_site_s_url_uri'?: string | null;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for paragraph field field_song. */
export interface paragraph_revision__field_songEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_song_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for paragraph field field_song… */
export interface paragraph_revision__field_song_creditsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_song_credits_format'?: string | null;
  'field_song_credits_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for paragraph field field_song… */
export interface paragraph_revision__field_song_durationEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_song_duration_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for paragraph field field_song… */
export interface paragraph_revision__field_song_nameEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_song_name_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for paragraph field field_song… */
export interface paragraph_revision__field_song_preview_urlEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_song_preview_url_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for paragraph field field_song… */
export interface paragraph_revision__field_song_writersEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_song_writers_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for paragraph field field_track… */
export interface paragraph_revision__field_track_playsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_track_plays_value': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for paragraph field field_tv_show… */
export interface paragraph_revision__field_tv_show_nameEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_tv_show_name_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* The base table for paragraph entities. */
export interface paragraphs_itemEntity {
  'id'?: number;
  'langcode': string;
  'revision_id'?: number | null;

  /* The ID of the target entity. */
  'type': string;
  'uuid': string;
}

/* The data table for paragraph entities. */
export interface paragraphs_item_field_dataEntity {
  'behavior_settings'?: string | null;
  'created'?: number | null;
  'default_langcode': number;
  'id': number;
  'langcode': string;
  'parent_field_name'?: string | null;
  'parent_id'?: string | null;
  'parent_type'?: string | null;
  'revision_id': number;
  'revision_translation_affected'?: number | null;
  'status': number;

  /* The ID of the target entity. */
  'type': string;
}

/* The revision table for paragraph entities. */
export interface paragraphs_item_revisionEntity {
  'id': number;
  'langcode': string;
  'revision_default'?: number | null;
  'revision_id'?: number;
}

/* The revision data table for paragraph entities. */
export interface paragraphs_item_revision_field_dataEntity {
  'behavior_settings'?: string | null;
  'created'?: number | null;
  'default_langcode': number;
  'id': number;
  'langcode': string;
  'parent_field_name'?: string | null;
  'parent_id'?: string | null;
  'parent_type'?: string | null;
  'revision_id': number;
  'revision_translation_affected'?: number | null;
  'status': number;
}

/* The base table for path_alias entities. */
export interface path_aliasEntity {
  'alias'?: string | null;
  'id'?: number;
  'langcode': string;
  'path'?: string | null;
  'revision_id'?: number | null;
  'status': number;
  'uuid': string;
}

/* The revision table for path_alias entities. */
export interface path_alias_revisionEntity {
  'alias'?: string | null;
  'id': number;
  'langcode': string;
  'path'?: string | null;
  'revision_default'?: number | null;
  'revision_id'?: number;
  'status': number;
}

/* Stores Persistent Login tokens for users */
export interface persistent_loginEntity {

  /* The creation timestamp for this series. */
  'created': number;

  /* The expiration timestamp for this series. */
  'expires': number;

  /* The single-use value. */
  'instance': string;

  /* The refresh timestamp for this series. */
  'refreshed': number;

  /* The long-lived value identifying the token sequence. */
  'series': string;

  /* The users.uid this row is for. */
  'uid': number;
}

/* The base table for profile entities. */
export interface profileEntity {
  'changed'?: number | null;
  'created'?: number | null;
  'data'?: any | null;
  'is_default'?: number | null;
  'profile_id'?: number;
  'revision_id'?: number | null;
  'status': number;

  /* The ID of the target entity. */
  'type': string;

  /* The ID of the target entity. */
  'uid': number;
  'uuid': string;
}

/* The revision table for profile entities. */
export interface profile_revisionEntity {
  'changed'?: number | null;
  'created'?: number | null;
  'data'?: any | null;
  'is_default'?: number | null;
  'profile_id': number;
  'revision_created'?: number | null;
  'revision_default'?: number | null;
  'revision_id'?: number;
  'revision_log_message'?: string | null;

  /* The ID of the target entity. */
  'revision_user'?: number | null;
  'status': number;

  /* The ID of the target entity. */
  'uid': number;
}

/* Stores items in queues. */
export interface queueEntity {

  /* Timestamp when the item was created. */
  'created'?: string;

  /* The arbitrary data for the item. */
  'data'?: any | null;

  /* Timestamp when the claim lease expires on the item. */
  'expire'?: string;

  /* Primary Key: Unique item ID. */
  'item_id'?: number;

  /* The queue name. */
  'name'?: string;
}

/* The base table for redirect entities. */
export interface redirectEntity {
  'created'?: number | null;
  'hash'?: string | null;
  'language': string;

  /* Serialized array of options for the link. */
  'redirect_redirect__options'?: any | null;

  /* The link text. */
  'redirect_redirect__title'?: string | null;

  /* The URI of the link. */
  'redirect_redirect__uri'?: string | null;

  /* The source path */
  'redirect_source__path'?: string | null;

  /* Serialized array of path queries */
  'redirect_source__query'?: any | null;
  'rid'?: number;
  'status_code'?: number | null;
  'type': string;

  /* The ID of the target entity. */
  'uid'?: number | null;
  'uuid': string;
}

/* Maps paths to various callbacks (access, page and title) */
export interface routerEntity {

  /* A numeric representation of how specific the path is. */
  'fit'?: number;

  /* Primary Key: Machine name of this route */
  'name'?: string;

  /* Number of parts in this router path. */
  'number_parts'?: number;

  /* The path for this URI */
  'path'?: string;

  /* The pattern */
  'pattern_outline'?: string;

  /* A serialized Route object */
  'route'?: any | null;
}

/* Stores items that will be searched. */
export interface search_datasetEntity {

  /* List of space-separated words from the item. */
  'data': string;

  /* The languages.langcode of the item variant. */
  'langcode'?: string;

  /* Set to force node reindexing. */
  'reindex'?: number;

  /* Search item ID, e.g. node ID for nodes. */
  'sid'?: number;

  /* Type of item, e.g. node. */
  'type': string;
}

/* Stores the search index, associating words, items and… */
export interface search_indexEntity {

  /* The languages.langcode of the item variant. */
  'langcode'?: string;

  /* The numeric score of the word, higher being more important. */
  'score'?: number | null;

  /* The search_dataset.sid of the searchable item to which the word belongs. */
  'sid'?: number;

  /* The search_dataset.type of the searchable item to which the word belongs. */
  'type': string;

  /* The search_total.word that is associated with the search item. */
  'word'?: string;
}

/* Stores search totals for words. */
export interface search_totalEntity {

  /* The count of the word in the index using Zipf's law to equalize the probability distribution. */
  'count'?: number | null;

  /* Primary Key: Unique word in the search index. */
  'word'?: string;
}

/* Table for holding semaphores, locks, flags, etc. that… */
export interface semaphoreEntity {

  /* A Unix timestamp with microseconds indicating when the semaphore should expire. */
  'expire': number;

  /* Primary Key: Unique name. */
  'name'?: string;

  /* A value for the semaphore. */
  'value'?: string;
}

/* Stores IDs. */
export interface sequencesEntity {

  /* The value of the sequence. */
  'value'?: number;
}

/* Drupal's session handlers read and write into the sessions… */
export interface sessionsEntity {

  /* The IP address that last used this session ID (sid). */
  'hostname'?: string;

  /* The serialized contents of $_SESSION, an array of name/value pairs that persists across page requests by this session ID. Drupal loads $_SESSION from here at the start of each request and saves it at the end. */
  'session'?: any | null;

  /* A session ID (hashed). The value is generated by Drupal's session handlers. */
  'sid': string;

  /* The Unix timestamp when this session last requested a page. Old records are purged by PHP automatically. */
  'timestamp'?: string;

  /* The users.uid corresponding to a session, or 0 for anonymous user. */
  'uid': number;
}

/* The base table for shortcut entities. */
export interface shortcutEntity {
  'id'?: number;
  'langcode': string;

  /* The ID of the target entity. */
  'shortcut_set': string;
  'uuid': string;
}

/* The data table for shortcut entities. */
export interface shortcut_field_dataEntity {
  'default_langcode': number;
  'id': number;
  'langcode': string;

  /* Serialized array of options for the link. */
  'link__options'?: any | null;

  /* The link text. */
  'link__title'?: string | null;

  /* The URI of the link. */
  'link__uri'?: string | null;

  /* The ID of the target entity. */
  'shortcut_set': string;
  'title'?: string | null;
  'weight'?: number | null;
}

/* Maps users to shortcut sets. */
export interface shortcut_set_usersEntity {

  /* The shortcut_set.set_name that will be displayed for this user. */
  'set_name'?: string;

  /* The users.uid for this set. */
  'uid'?: number;
}

/* Holds XML sitemaps as strings for quick retrieval. */
export interface simple_sitemapEntity {

  /* Delta of the chunk within the type scope. */
  'delta': number;

  /* Sitemap chunk unique identifier. */
  'id'?: number;

  /* The number of links in the sitemap. */
  'link_count'?: number;

  /* Timestamp of sitemap chunk generation. */
  'sitemap_created'?: number;

  /* XML sitemap chunk string. */
  'sitemap_string': string;

  /* Flag indicating the publishing status of the chunk. */
  'status'?: number;

  /* Type of sitemap this chunk belongs to. */
  'type'?: string;
}

/* Holds sitemap settings overridden by entities. */
export interface simple_sitemap_entity_overridesEntity {

  /* ID of the overriding entity. */
  'entity_id': string;

  /* Entity type of the overriding entity. */
  'entity_type': string;

  /* Override unique identifier. */
  'id'?: number;

  /* Setting for the overriding entity. */
  'inclusion_settings'?: any | null;

  /* Type of sitemap this override belongs to. */
  'type': string;
}

/* The base table for social_auth entities. */
export interface social_authEntity {
  'additional_data'?: string | null;
  'changed'?: number | null;
  'created'?: number | null;
  'id'?: number;
  'plugin_id': string;
  'provider_user_id': string;
  'token'?: string | null;

  /* The ID of the target entity. */
  'user_id': number;
  'uuid': string;
}

/* Maintains denormalized information about node/term… */
export interface taxonomy_indexEntity {

  /* The Unix timestamp when the node was created. */
  'created'?: number;

  /* The node.nid this record tracks. */
  'nid'?: number;

  /* Boolean indicating whether the node is published (visible to non-administrators). */
  'status'?: number;

  /* Boolean indicating whether the node is sticky. */
  'sticky'?: number | null;

  /* The term ID. */
  'tid'?: number;
}

/* Data storage for taxonomy_term field field_band_members. */
export interface taxonomy_term__field_band_membersEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_band_members_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for taxonomy_term field field_band_sites. */
export interface taxonomy_term__field_band_sitesEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_band_sites_target_id': number;

  /* The revision ID of the target entity. */
  'field_band_sites_target_revision_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for taxonomy_term field field_contact_email. */
export interface taxonomy_term__field_contact_emailEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_contact_email_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for taxonomy_term field field_evinyl_biography. */
export interface taxonomy_term__field_evinyl_biographyEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_evinyl_biography_format'?: string | null;
  'field_evinyl_biography_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for taxonomy_term field field_featured. */
export interface taxonomy_term__field_featuredEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_featured_value': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for taxonomy_term field field_genre. */
export interface taxonomy_term__field_genreEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_genre_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for taxonomy_term field field_hometown. */
export interface taxonomy_term__field_hometownEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_hometown_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for taxonomy_term field field_influences. */
export interface taxonomy_term__field_influencesEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_influences_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for taxonomy_term field field_likes. */
export interface taxonomy_term__field_likesEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_likes_value': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for taxonomy_term field field_similar_artists. */
export interface taxonomy_term__field_similar_artistsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_similar_artists_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for taxonomy_term field field_user_photo. */
export interface taxonomy_term__field_user_photoEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_user_photo_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for taxonomy_term field parent. */
export interface taxonomy_term__parentEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The ID of the target entity. */
  'parent_target_id': number;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* The base table for taxonomy_term entities. */
export interface taxonomy_term_dataEntity {
  'langcode': string;
  'revision_id'?: number | null;
  'tid'?: number;
  'uuid': string;

  /* The ID of the target entity. */
  'vid': string;
}

/* The data table for taxonomy_term entities. */
export interface taxonomy_term_field_dataEntity {
  'changed'?: number | null;
  'default_langcode': number;
  'description__format'?: string | null;
  'description__value'?: string | null;
  'langcode': string;
  'name': string;
  'revision_id': number;
  'revision_translation_affected'?: number | null;
  'status': number;
  'tid': number;

  /* The ID of the target entity. */
  'vid': string;
  'weight': number;
}

/* The revision data table for taxonomy_term entities. */
export interface taxonomy_term_field_revisionEntity {
  'changed'?: number | null;
  'default_langcode': number;
  'description__format'?: string | null;
  'description__value'?: string | null;
  'langcode': string;
  'name'?: string | null;
  'revision_id': number;
  'revision_translation_affected'?: number | null;
  'status': number;
  'tid': number;
}

/* The revision table for taxonomy_term entities. */
export interface taxonomy_term_revisionEntity {
  'langcode': string;
  'revision_created'?: number | null;
  'revision_default'?: number | null;
  'revision_id'?: number;
  'revision_log_message'?: string | null;

  /* The ID of the target entity. */
  'revision_user'?: number | null;
  'tid': number;
}

/* Revision archive storage for taxonomy_term field field_band… */
export interface taxonomy_term_revision__field_band_membersEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_band_members_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for taxonomy_term field field_band… */
export interface taxonomy_term_revision__field_band_sitesEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_band_sites_target_id': number;

  /* The revision ID of the target entity. */
  'field_band_sites_target_revision_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for taxonomy_term field field… */
export interface taxonomy_term_revision__field_contact_emailEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_contact_email_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for taxonomy_term field field… */
export interface taxonomy_term_revision__field_evinyl_biographyEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_evinyl_biography_format'?: string | null;
  'field_evinyl_biography_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for taxonomy_term field field… */
export interface taxonomy_term_revision__field_featuredEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_featured_value': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for taxonomy_term field field… */
export interface taxonomy_term_revision__field_genreEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_genre_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for taxonomy_term field field… */
export interface taxonomy_term_revision__field_hometownEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_hometown_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for taxonomy_term field field… */
export interface taxonomy_term_revision__field_influencesEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_influences_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for taxonomy_term field field… */
export interface taxonomy_term_revision__field_likesEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_likes_value': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for taxonomy_term field field… */
export interface taxonomy_term_revision__field_similar_artistsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_similar_artists_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for taxonomy_term field field_user… */
export interface taxonomy_term_revision__field_user_photoEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_user_photo_target_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Revision archive storage for taxonomy_term field parent. */
export interface taxonomy_term_revision__parentEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The ID of the target entity. */
  'parent_target_id': number;

  /* The entity revision id this data is attached to */
  'revision_id': number;
}

/* Data storage for user field field_contact_allowed. */
export interface user__field_contact_allowedEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_contact_allowed_value': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;
}

/* Data storage for user field field_evinyl_biography. */
export interface user__field_evinyl_biographyEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_evinyl_biography_format'?: string | null;
  'field_evinyl_biography_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;
}

/* Data storage for user field field_followed_artists. */
export interface user__field_followed_artistsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_followed_artists_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;
}

/* Data storage for user field field_is_artist. */
export interface user__field_is_artistEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_is_artist_value': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;
}

/* Data storage for user field field_my_top_5_s. */
export interface user__field_my_top_5_sEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;
  'field_my_top_5_s_value': string;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;
}

/* Data storage for user field field_top_5_albums. */
export interface user__field_top_5_albumsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_top_5_albums_target_id': number;

  /* The revision ID of the target entity. */
  'field_top_5_albums_target_revision_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;
}

/* Data storage for user field field_top_5_artists. */
export interface user__field_top_5_artistsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_top_5_artists_target_id': number;

  /* The revision ID of the target entity. */
  'field_top_5_artists_target_revision_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;
}

/* Data storage for user field field_top_5_books. */
export interface user__field_top_5_booksEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_top_5_books_target_id': number;

  /* The revision ID of the target entity. */
  'field_top_5_books_target_revision_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;
}

/* Data storage for user field field_top_5_concerts. */
export interface user__field_top_5_concertsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_top_5_concerts_target_id': number;

  /* The revision ID of the target entity. */
  'field_top_5_concerts_target_revision_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;
}

/* Data storage for user field field_top_5_movies. */
export interface user__field_top_5_moviesEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_top_5_movies_target_id': number;

  /* The revision ID of the target entity. */
  'field_top_5_movies_target_revision_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;
}

/* Data storage for user field field_top_5_songs. */
export interface user__field_top_5_songsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_top_5_songs_target_id': number;

  /* The revision ID of the target entity. */
  'field_top_5_songs_target_revision_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;
}

/* Data storage for user field field_top_5_tv_shows. */
export interface user__field_top_5_tv_showsEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The ID of the target entity. */
  'field_top_5_tv_shows_target_id': number;

  /* The revision ID of the target entity. */
  'field_top_5_tv_shows_target_revision_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;
}

/* Data storage for user field mass_contact_opt_out. */
export interface user__mass_contact_opt_outEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The language code for this data item. */
  'langcode'?: string;
  'mass_contact_opt_out_value': string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;
}

/* Data storage for user field roles. */
export interface user__rolesEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;

  /* The ID of the target entity. */
  'roles_target_id': string;
}

/* Data storage for user field user_patreon_id. */
export interface user__user_patreon_idEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;
  'user_patreon_id_value': number;
}

/* Data storage for user field user_patreon_refresh_token. */
export interface user__user_patreon_refresh_tokenEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;
  'user_patreon_refresh_token_value': string;
}

/* Data storage for user field user_patreon_token. */
export interface user__user_patreon_tokenEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;
  'user_patreon_token_value': string;
}

/* Data storage for user field user_picture. */
export interface user__user_pictureEntity {

  /* The field instance bundle to which this row belongs, used when deleting a field instance */
  'bundle'?: string;

  /* A boolean indicating whether this data item has been deleted */
  'deleted'?: number;

  /* The sequence number for this data item, used for multi-value fields */
  'delta': number;

  /* The entity id this data is attached to */
  'entity_id': number;

  /* The language code for this data item. */
  'langcode'?: string;

  /* The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id */
  'revision_id': number;

  /* Alternative image text, for the image's 'alt' attribute. */
  'user_picture_alt'?: string | null;

  /* The height of the image in pixels. */
  'user_picture_height'?: number | null;

  /* The ID of the file entity. */
  'user_picture_target_id': number;

  /* Image title text, for the image's 'title' attribute. */
  'user_picture_title'?: string | null;

  /* The width of the image in pixels. */
  'user_picture_width'?: number | null;
}

/* The base table for user entities. */
export interface usersEntity {
  'langcode': string;
  'uid'?: number;
  'uuid': string;
}

/* Stores module data as key/value pairs per user. */
export interface users_dataEntity {

  /* The name of the module declaring the variable. */
  'module'?: string;

  /* The identifier of the data. */
  'name'?: string;

  /* Whether value is serialized. */
  'serialized'?: number | null;

  /* The users.uid this record affects. */
  'uid'?: number;

  /* The value. */
  'value'?: any | null;
}

/* The data table for user entities. */
export interface users_field_dataEntity {
  'access': number;
  'changed'?: number | null;
  'created': number;
  'default_langcode': number;
  'init'?: string | null;
  'langcode': string;
  'login'?: number | null;
  'mail'?: string | null;
  'name': string;
  'pass'?: string | null;
  'preferred_admin_langcode'?: string | null;
  'preferred_langcode'?: string | null;
  'status'?: number | null;
  'timezone'?: string | null;
  'uid': number;
}

/* Table that contains logs of all system events. */
export interface watchdogEntity {

  /* Hostname of the user who triggered the event. */
  'hostname'?: string;

  /* Link to view the result of the event. */
  'link'?: string | null;

  /* URL of the origin of the event. */
  'location': string;

  /* Text of log message to be passed into the t() function. */
  'message': string;

  /* URL of referring page. */
  'referer'?: string | null;

  /* The severity level of the event. ranges from 0 (Emergency) to 7 (Debug) */
  'severity'?: number;

  /* Unix timestamp of when event occurred. */
  'timestamp'?: string;

  /* Type of log message, for example "user" or "page not found." */
  'type'?: string;

  /* The users.uid of the user who triggered the event. */
  'uid'?: number;

  /* Serialized array of variables that match the message string and that is passed into the t() function. */
  'variables': any;

  /* Primary Key: Unique watchdog event ID. */
  'wid'?: string;
}

/* Stores all webform data. */
export interface webformEntity {

  /* The serial number to give to the next submission to this webform. */
  'next_serial'?: number;

  /* The webform id. */
  'webform_id': string;
}

/* The base table for webform_submission entities. */
export interface webform_submissionEntity {
  'changed'?: number | null;
  'completed'?: number | null;
  'created'?: number | null;
  'current_page'?: string | null;
  'entity_id'?: string | null;
  'entity_type'?: string | null;
  'in_draft'?: number | null;
  'langcode': string;
  'locked'?: number | null;
  'notes'?: string | null;
  'remote_addr'?: string | null;
  'serial'?: number | null;
  'sid'?: number;
  'sticky'?: number | null;
  'token'?: string | null;

  /* The ID of the target entity. */
  'uid'?: number | null;
  'uri'?: string | null;
  'uuid': string;

  /* The ID of the target entity. */
  'webform_id': string;
}

/* Stores all submitted data for webform submissions. */
export interface webform_submission_dataEntity {

  /* The delta of the element's value. */
  'delta'?: number;

  /* The name of the element. */
  'name': string;

  /* The property of the element's value. */
  'property'?: string;

  /* The unique identifier for this submission. */
  'sid': number;

  /* The element's value. */
  'value': string;

  /* The webform id. */
  'webform_id': string;
}
export interface cacheEntity {
  'expiration': number;
  'key': string;
  'value': string;
}
export interface cache_locksEntity {
  'expiration': number;
  'key': string;
  'owner': string;
}
export interface clientsEntity {
  'address': string;
  'company_name': string;
  'contact_person': string;
  'created_at'?: Date | null;
  'email': string;
  'id'?: string;
  'organization_id': string;
  'phone': string;
  'updated_at'?: Date | null;
}
export interface failed_jobsEntity {
  'connection': string;
  'exception': string;
  'failed_at'?: Date;
  'id'?: string;
  'payload': string;
  'queue': string;
  'uuid': string;
}
export interface invoicesEntity {
  'amount': number;
  'client_id': string;
  'created_at'?: Date | null;
  'id'?: string;
  'organization_id': string;
  'paid': any;
  'project_id': string;
  'updated_at'?: Date | null;
}
export interface job_batchesEntity {
  'cancelled_at'?: number | null;
  'created_at': number;
  'failed_job_ids': string;
  'failed_jobs': number;
  'finished_at'?: number | null;
  'id': string;
  'name': string;
  'options'?: string | null;
  'pending_jobs': number;
  'total_jobs': number;
}
export interface jobsEntity {
  'attempts': number;
  'available_at': number;
  'created_at': number;
  'id'?: string;
  'payload': string;
  'queue': string;
  'reserved_at'?: number | null;
}
export interface migrationsEntity {
  'batch': number;
  'id'?: number;
  'migration': string;
}
export interface model_has_permissionsEntity {
  'model_id': string;
  'model_type': string;
  'permission_id': string;
}
export interface model_has_rolesEntity {
  'model_id': string;
  'model_type': string;
  'role_id': string;
}
export interface organizationsEntity {
  'created_at'?: Date | null;
  'id'?: string;
  'name': string;
  'updated_at'?: Date | null;
}
export interface p_c_a_reportsEntity {
  'basement': any;
  'building': string;
  'client_id': string;
  'created_at'?: Date | null;
  'fondation': string;
  'id'?: string;
  'name': string;
  'non_residential_units'?: number;
  'numbers_of_floors': number;

  /* Percentage of total lot area */
  'occupation_of_the_building': number;
  'occupation_of_the_property': string;
  'organization_id': string;
  'project_id': string;
  'residential_units': number;
  'structure': string;

  /* Measured in square meters */
  'surface_area_of_the_building': number;

  /* Measured in square meters */
  'total_site_area': number;
  'updated_at'?: Date | null;
  'year_of_construction': number;
}
export interface password_reset_tokensEntity {
  'created_at'?: Date | null;
  'email': string;
  'token': string;
}
export interface permissionsEntity {
  'created_at'?: Date | null;
  'guard_name': string;
  'id'?: string;
  'name': string;
  'updated_at'?: Date | null;
}
export interface projectsEntity {
  'address': string;
  'budget': number;
  'client_id': string;
  'created_at'?: Date | null;
  'deadline': Date;
  'department': string;
  'id'?: string;
  'language': 'english' | 'french';
  'manager': string;
  'opening_date': Date;
  'organization_id': string;
  'sales_representative_name': string;
  'status': 'ongoing' | 'completed' | 'canceled';
  'type': string;
  'updated_at'?: Date | null;
}
export interface quotesEntity {
  'budget': number;
  'client_id': string;
  'created_at'?: Date | null;
  'id'?: string;
  'organization_id': string;
  'project_address': string;
  'project_id': string;
  'project_type': string;
  'quote_language': 'english' | 'french';
  'quote_status': 'in_preparation' | 'sent' | 'approved' | 'rejected';
  'sales_representative_name': string;
  'updated_at'?: Date | null;
}
export interface role_has_permissionsEntity {
  'permission_id': string;
  'role_id': string;
}
export interface rolesEntity {
  'created_at'?: Date | null;
  'guard_name': string;
  'id'?: string;
  'name': string;
  'updated_at'?: Date | null;
}
export interface sessionsEntity {
  'id': string;
  'ip_address'?: string | null;
  'last_activity': number;
  'payload': string;
  'user_agent'?: string | null;
  'user_id'?: string | null;
}
export interface time_sheetsEntity {
  'created_at'?: Date | null;
  'id'?: string;
  'organization_id': string;
  'project_id': string;
  'task_performed': 'visit' | 'research' | 'fieldwork' | 'report';
  'updated_at'?: Date | null;
  'user_id': string;
  'worked_duration': number;
}
export interface usersEntity {
  'created_at'?: Date | null;
  'email': string;
  'email_verified_at'?: Date | null;
  'id'?: string;
  'name': string;
  'organization_id': string;
  'password': string;
  'remember_token'?: string | null;
  'updated_at'?: Date | null;
}
export interface workloadsEntity {
  'created_at'?: Date | null;
  'deadlines': Object;
  'id'?: string;
  'updated_at'?: Date | null;
  'user_id': string;
}
export interface clippingsEntity {
  'date'?: number | null;
  'id'?: number;
  'title'?: string | null;
}
export interface festivalEntity {
  'date'?: Date;
  'nonstandard_description'?: string | null;
  'time'?: Date;
}
export interface filmEntity {
  'contest'?: number | null;
  'contest_star'?: string | null;
  'description'?: string | null;
  'director'?: string | null;
  'filmID'?: number;
  'filmpage'?: number | null;
  'filmpage_feat'?: number | null;
  'filmpage_special'?: string | null;
  'image125x'?: string | null;
  'image60x60'?: string;
  'keywords'?: string | null;
  'link'?: string | null;
  'name'?: string;
  'othercredit'?: string | null;
  'writer'?: string | null;
}

/* this table is used to create the MANY-TO-MANY relationship b */
export interface filmfestivalEntity {
  'audience_winner'?: string | null;
  'date'?: Date;
  'filmID'?: number;
  'judges_winner'?: string | null;
  'time'?: Date;
}
export interface termsEntity {
  'id'?: number;
  'term_definition': string;
  'term_name': string;
  'term_origin': string;
}
export interface txg_actionscheduler_actionsEntity {
  'action_id'?: string;
  'args'?: string | null;
  'attempts'?: number;
  'claim_id'?: string;
  'extended_args'?: string | null;
  'group_id'?: string;
  'hook': string;
  'last_attempt_gmt'?: Date | null;
  'last_attempt_local'?: Date | null;
  'priority'?: number;
  'schedule'?: string | null;
  'scheduled_date_gmt'?: Date | null;
  'scheduled_date_local'?: Date | null;
  'status': string;
}
export interface txg_actionscheduler_claimsEntity {
  'claim_id'?: string;
  'date_created_gmt'?: Date;
}
export interface txg_actionscheduler_groupsEntity {
  'group_id'?: string;
  'slug': string;
}
export interface txg_actionscheduler_logsEntity {
  'action_id': string;
  'log_date_gmt'?: Date | null;
  'log_date_local'?: Date | null;
  'log_id'?: string;
  'message': string;
}
export interface txg_addonlibrary_addonsEntity {
  'addontype'?: string | null;
  'alias'?: string | null;
  'catid'?: number | null;
  'config'?: string | null;
  'description'?: string | null;
  'id'?: string;
  'is_active'?: number | null;
  'name'?: string | null;
  'ordering': number;
  'templates'?: string | null;
  'test_slot1'?: string | null;
  'test_slot2'?: string | null;
  'test_slot3'?: string | null;
  'title'?: string | null;
}
export interface txg_addonlibrary_categoriesEntity {
  'alias'?: string | null;
  'id'?: number;
  'ordering': number;
  'params': string;
  'parent_id'?: number | null;
  'title': string;
  'type'?: string | null;
}
export interface txg_aiowps_audit_logEntity {
  'created'?: number | null;
  'details': string;
  'event_type'?: string;
  'id'?: string;
  'ip'?: string;
  'level'?: string;
  'network_id'?: string;
  'site_id'?: string;
  'stacktrace': string;
  'username'?: string;
}
export interface txg_aiowps_debug_logEntity {
  'created'?: Date;
  'id'?: string;
  'level'?: string;
  'message': string;
  'network_id'?: string;
  'site_id'?: string;
  'type'?: string;
}
export interface txg_aiowps_eventsEntity {
  'country_code'?: string | null;
  'created'?: number | null;
  'event_data'?: string | null;
  'event_date'?: Date;
  'event_type'?: string;
  'id'?: string;
  'ip_or_host'?: string | null;
  'referer_info'?: string | null;
  'url'?: string | null;
  'user_id'?: string | null;
  'username'?: string | null;
}
export interface txg_aiowps_global_metaEntity {
  'date_time'?: Date;
  'meta_id'?: string;
  'meta_key1': string;
  'meta_key2': string;
  'meta_key3': string;
  'meta_key4': string;
  'meta_key5': string;
  'meta_value1': string;
  'meta_value2': string;
  'meta_value3': string;
  'meta_value4': string;
  'meta_value5': string;
}
export interface txg_aiowps_logged_in_usersEntity {
  'created'?: number | null;
  'expires'?: number | null;
  'id'?: string;
  'ip_address'?: string;
  'site_id': string;
  'user_id': string;
  'username'?: string;
}
export interface txg_aiowps_login_lockdownEntity {
  'backtrace_log': string;
  'created'?: number | null;
  'failed_login_ip'?: string;
  'id'?: string;
  'ip_lookup_result'?: string | null;
  'is_lockout_email_sent'?: any;
  'lock_reason'?: string;
  'lockdown_date'?: Date;
  'release_date'?: Date;
  'released'?: number | null;
  'unlock_key'?: string;
  'user_id': string;
  'user_login': string;
}
export interface txg_aiowps_message_storeEntity {
  'created'?: number | null;
  'id'?: string;
  'message_key': string;
  'message_value': string;
}
export interface txg_aiowps_permanent_blockEntity {
  'block_reason'?: string;
  'blocked_date'?: Date;
  'blocked_ip'?: string;
  'country_origin'?: string;
  'id'?: string;
  'unblock'?: any;
}
export interface txg_automatewoo_abandoned_cartsEntity {
  'coupons': string;
  'created'?: Date | null;
  'currency'?: string;
  'fees': string;
  'guest_id'?: string;
  'id'?: string;
  'items': string;
  'last_modified'?: Date | null;
  'shipping_tax_total'?: number;
  'shipping_total'?: number;
  'status'?: string;
  'token'?: string;
  'total'?: number;
  'user_id'?: string;
}
export interface txg_automatewoo_customer_metaEntity {
  'customer_id'?: string | null;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface txg_automatewoo_customersEntity {
  'guest_id'?: string;
  'id'?: string;
  'id_key'?: string;
  'last_purchased'?: Date | null;
  'subscribed'?: number;
  'subscribed_date'?: Date | null;
  'unsubscribed'?: number;
  'unsubscribed_date'?: Date | null;
  'user_id'?: string;
}
export interface txg_automatewoo_guest_metaEntity {
  'guest_id'?: string | null;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface txg_automatewoo_guestsEntity {
  'created'?: Date | null;
  'email'?: string;
  'id'?: string;
  'language'?: string;
  'last_active'?: Date | null;
  'most_recent_order'?: string;
  'tracking_key'?: string;
  'version'?: string;
}
export interface txg_automatewoo_log_metaEntity {
  'log_id'?: string | null;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface txg_automatewoo_logsEntity {
  'conversion_tracking_enabled'?: number;
  'date'?: Date | null;
  'has_blocked_emails'?: number;
  'has_errors'?: number;
  'id'?: string;
  'tracking_enabled'?: number;
  'workflow_id'?: string | null;
}
export interface txg_automatewoo_queueEntity {
  'created'?: Date | null;
  'date'?: Date | null;
  'failed'?: number;
  'failure_code'?: number;
  'id'?: string;
  'workflow_id'?: string | null;
}
export interface txg_automatewoo_queue_metaEntity {
  'event_id'?: string | null;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface txg_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface txg_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface txg_e_eventsEntity {
  'created_at': Date;
  'event_data'?: string | null;
  'id'?: string;
}
export interface txg_e_notesEntity {

  /* Save the author name when the author was deleted. */
  'author_display_name'?: string | null;
  'author_id'?: string | null;
  'content'?: string | null;
  'created_at': Date;

  /* The Elementor element ID the note is attached to. */
  'element_id'?: string | null;
  'id'?: string;
  'is_public'?: any;
  'is_resolved'?: any;
  'last_activity_at'?: Date | null;
  'parent_id'?: string;

  /* A JSON string that represents the position of the note inside the element in percentages. e.g. {x:10, y:15} */
  'position'?: string | null;
  'post_id'?: string | null;

  /* The post id of the route that the note was created on. */
  'route_post_id'?: string | null;
  'route_title'?: string | null;

  /* Clean url where the note was created. */
  'route_url'?: string | null;
  'status'?: string;
  'updated_at': Date;
}
export interface txg_e_notes_users_relationsEntity {
  'created_at': Date;
  'id'?: string;
  'note_id': string;

  /* The relation type between user and note (e.g mention, watch, read). */
  'type': string;
  'updated_at': Date;
  'user_id': string;
}
export interface txg_e_submissionsEntity {
  'actions_count'?: number | null;
  'actions_succeeded_count'?: number | null;
  'campaign_id': string;
  'created_at': Date;
  'created_at_gmt': Date;
  'element_id': string;
  'form_name': string;
  'hash_id': string;
  'id'?: string;
  'is_read'?: any;

  /* Id of main field. to represent the main meta field */
  'main_meta_id': string;
  'meta'?: string | null;
  'post_id': string;
  'referer': string;
  'referer_title'?: string | null;
  'status': string;
  'type'?: string | null;
  'updated_at': Date;
  'updated_at_gmt': Date;
  'user_agent': string;
  'user_id'?: string | null;
  'user_ip': string;
}
export interface txg_e_submissions_actions_logEntity {
  'action_label'?: string | null;
  'action_name': string;
  'created_at': Date;
  'created_at_gmt': Date;
  'id'?: string;
  'log'?: string | null;
  'status': string;
  'submission_id': string;
  'updated_at': Date;
  'updated_at_gmt': Date;
}
export interface txg_e_submissions_valuesEntity {
  'id'?: string;
  'key'?: string | null;
  'submission_id'?: string;
  'value'?: string | null;
}
export interface txg_elfsight_instagram_feed_userEntity {
  'data': string;
  'id'?: number;
  'public_id': string;
  'updated_at': number;
}
export interface txg_elfsight_instagram_feed_widgetsEntity {
  'active'?: number;
  'id'?: number;
  'name': string;
  'options': string;
  'time_created': string;
  'time_updated': string;
}
export interface txg_frm_fieldsEntity {
  'created_at': Date;
  'default_value'?: string | null;
  'description'?: string | null;
  'field_key'?: string | null;
  'field_options'?: string | null;
  'field_order'?: number | null;
  'form_id'?: number | null;
  'id'?: string;
  'name'?: string | null;
  'options'?: string | null;
  'required'?: number | null;
  'type'?: string | null;
}
export interface txg_frm_formsEntity {
  'created_at': Date;
  'default_template'?: any | null;
  'description'?: string | null;
  'editable'?: any | null;
  'form_key'?: string | null;
  'id'?: number;
  'is_template'?: any | null;
  'logged_in'?: any | null;
  'name'?: string | null;
  'options'?: string | null;
  'parent_form_id'?: number | null;
  'status'?: string | null;
}
export interface txg_frm_item_metasEntity {
  'created_at': Date;
  'field_id': string;
  'id'?: string;
  'item_id': string;
  'meta_value'?: string | null;
}
export interface txg_frm_itemsEntity {
  'created_at': Date;
  'description'?: string | null;
  'form_id'?: string | null;
  'id'?: string;
  'ip'?: string | null;
  'is_draft'?: any | null;
  'item_key'?: string | null;
  'name'?: string | null;
  'parent_item_id'?: string | null;
  'post_id'?: string | null;
  'updated_at': Date;
  'updated_by'?: string | null;
  'user_id'?: string | null;
}
export interface txg_frm_view_layoutsEntity {
  'created_at': Date;
  'data': string;
  'id'?: number;
  'name'?: string | null;
  'type'?: 'listing' | 'detail' | null;
  'view_id'?: number | null;
}
export interface txg_layersliderEntity {
  'author'?: number;
  'data': string;
  'date_c': number;
  'date_m': number;
  'flag_deleted'?: any;
  'flag_group'?: any;
  'flag_hidden'?: any;
  'flag_popup'?: any;
  'group_id'?: number | null;
  'id'?: number;
  'name'?: string | null;
  'schedule_end'?: number;
  'schedule_start'?: number;
  'slug'?: string | null;
}
export interface txg_layerslider_revisionsEntity {
  'author'?: number;
  'data': string;
  'date_c': number;
  'id'?: number;
  'slider_id': number;
}
export interface txg_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface txg_mailchimp_cartsEntity {
  'cart': string;
  'created_at': Date;
  'email': string;
  'id': string;
  'user_id'?: number | null;
}
export interface txg_mailchimp_jobsEntity {
  'created_at': Date;
  'id'?: string;
  'job': string;
  'obj_id'?: string | null;
}
export interface txg_ms_snippetsEntity {
  'active'?: any;
  'code': string;
  'description': string;
  'id'?: string;
  'modified'?: Date;
  'name': string;
  'priority'?: number;
  'scope'?: string;
  'tags': string;
}
export interface txg_nf3_action_metaEntity {
  'id'?: number;
  'key': string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'parent_id': number;
  'value'?: string | null;
}
export interface txg_nf3_actionsEntity {
  'active'?: any | null;
  'created_at'?: Date;
  'id'?: number;
  'key'?: string | null;
  'label'?: string | null;
  'parent_id': number;
  'title'?: string | null;
  'type'?: string | null;
  'updated_at'?: Date | null;
}
export interface txg_nf3_chunksEntity {
  'id'?: number;
  'name'?: string | null;
  'value'?: string | null;
}
export interface txg_nf3_field_metaEntity {
  'id'?: number;
  'key': string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'parent_id': number;
  'value'?: string | null;
}
export interface txg_nf3_fieldsEntity {
  'created_at'?: Date;
  'default_value'?: string | null;
  'field_key'?: string | null;
  'field_label'?: string | null;
  'id'?: number;
  'key'?: string | null;
  'label'?: string | null;
  'label_pos'?: string | null;
  'order'?: number | null;
  'parent_id': number;
  'personally_identifiable'?: boolean | null;
  'required'?: boolean | null;
  'type'?: string | null;
  'updated_at'?: Date | null;
}
export interface txg_nf3_form_metaEntity {
  'id'?: number;
  'key': string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'parent_id': number;
  'value'?: string | null;
}
export interface txg_nf3_formsEntity {
  'clear_complete'?: boolean | null;
  'created_at'?: Date;
  'default_label_pos'?: string | null;
  'form_title'?: string | null;
  'hide_complete'?: boolean | null;
  'id'?: number;
  'key'?: string | null;
  'logged_in'?: boolean | null;
  'seq_num'?: number | null;
  'show_title'?: boolean | null;
  'subs'?: number | null;
  'title'?: string | null;
  'updated_at'?: Date | null;
  'views'?: number | null;
}
export interface txg_nf3_object_metaEntity {
  'id'?: number;
  'key': string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'parent_id': number;
  'value'?: string | null;
}
export interface txg_nf3_objectsEntity {
  'created_at'?: Date;
  'id'?: number;
  'object_title'?: string | null;
  'title'?: string | null;
  'type'?: string | null;
  'updated_at'?: Date | null;
}
export interface txg_nf3_relationshipsEntity {
  'child_id': number;
  'child_type': string;
  'created_at'?: Date;
  'id'?: number;
  'parent_id': number;
  'parent_type': string;
  'updated_at'?: Date | null;
}
export interface txg_nf3_upgradesEntity {
  'cache'?: string | null;
  'id': number;
  'maintenance'?: boolean | null;
  'stage'?: number;
}
export interface txg_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface txg_pmxe_exportsEntity {
  'attch_id'?: string;
  'canceled'?: any;
  'canceled_on'?: Date;
  'client_mode_enabled'?: number;
  'executing'?: any;
  'export_post_type': string;
  'exported'?: string;
  'friendly_name': string;
  'id'?: string;
  'iteration'?: string;
  'last_activity'?: Date;
  'options'?: string | null;
  'parent_id'?: string;
  'processing'?: any;
  'registered_on'?: Date;
  'scheduled'?: string;
  'settings_update_on'?: Date;
  'triggered'?: any;
}
export interface txg_pmxe_google_catsEntity {
  'id': number;
  'level': number;
  'name': string;
  'parent_id': number;
  'parent_name': string;
}
export interface txg_pmxe_postsEntity {
  'export_id': string;
  'id'?: string;
  'iteration'?: string;
  'post_id': string;
}
export interface txg_pmxe_templatesEntity {
  'id'?: string;
  'name'?: string;
  'options'?: string | null;
}
export interface txg_pmxi_filesEntity {
  'id'?: string;
  'import_id': string;
  'name'?: string | null;
  'path'?: string | null;
  'registered_on'?: Date;
}
export interface txg_pmxi_hashEntity {
  'hash': Buffer;
  'import_id': number;
  'post_id': string;
  'post_type'?: string;
}
export interface txg_pmxi_historyEntity {
  'date'?: Date;
  'id'?: string;
  'import_id': string;
  'summary'?: string | null;
  'time_run'?: string | null;
  'type'?: 'manual' | 'processing' | 'trigger' | 'continue' | 'cli' | '';
}
export interface txg_pmxi_imagesEntity {
  'attachment_id': string;
  'id'?: string;
  'image_filename'?: string;
  'image_url'?: string;
}
export interface txg_pmxi_importsEntity {
  'canceled'?: any;
  'canceled_on'?: Date;
  'count'?: string;
  'created'?: string;
  'deleted'?: string;
  'executing'?: any;
  'failed'?: any;
  'failed_on'?: Date;
  'feed_type'?: 'xml' | 'csv' | 'zip' | 'gz' | '';
  'first_import'?: Date;
  'friendly_name'?: string;
  'id'?: string;
  'imported'?: string;
  'iteration'?: string;
  'last_activity'?: Date;
  'name'?: string | null;
  'options'?: string | null;
  'parent_import_id'?: string;
  'path'?: string | null;
  'processing'?: any;
  'queue_chunk_number'?: string;
  'registered_on'?: Date;
  'root_element'?: string | null;
  'settings_update_on'?: Date;
  'skipped'?: string;
  'triggered'?: any;
  'type'?: string;
  'updated'?: string;
  'xpath'?: string | null;
}
export interface txg_pmxi_postsEntity {
  'id'?: string;
  'import_id': string;
  'iteration'?: string;
  'post_id': string;
  'product_key'?: string | null;
  'specified'?: any;
  'unique_key'?: string | null;
}
export interface txg_pmxi_templatesEntity {
  'content'?: string | null;
  'fix_characters'?: any;
  'id'?: string;
  'is_keep_linebreaks'?: any;
  'is_leave_html'?: any;
  'meta'?: string | null;
  'name'?: string;
  'options'?: string | null;
  'scheduled'?: string;
  'title'?: string | null;
}
export interface txg_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface txg_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface txg_redirection_404Entity {
  'agent'?: string | null;
  'created': Date;
  'domain'?: string | null;
  'http_code'?: number;
  'id'?: number;
  'ip'?: string | null;
  'referrer'?: string | null;
  'request_data'?: string | null;
  'request_method'?: string | null;
  'url': string;
}
export interface txg_redirection_groupsEntity {
  'id'?: number;
  'module_id'?: number;
  'name': string;
  'position'?: number;
  'status'?: 'enabled' | 'disabled';
  'tracking'?: number;
}
export interface txg_redirection_itemsEntity {
  'action_code': number;
  'action_data'?: string | null;
  'action_type': string;
  'group_id'?: number;
  'id'?: number;
  'last_access'?: Date;
  'last_count'?: number;
  'match_data'?: string | null;
  'match_type': string;
  'match_url'?: string | null;
  'position'?: number;
  'regex'?: number;
  'status'?: 'enabled' | 'disabled';
  'title'?: string | null;
  'url': string;
}
export interface txg_redirection_logsEntity {
  'agent'?: string | null;
  'created': Date;
  'domain'?: string | null;
  'http_code'?: number;
  'id'?: number;
  'ip'?: string | null;
  'redirect_by'?: string | null;
  'redirection_id'?: number | null;
  'referrer'?: string | null;
  'request_data'?: string | null;
  'request_method'?: string | null;
  'sent_to'?: string | null;
  'url': string;
}
export interface txg_revslider_cssEntity {
  'advanced'?: string | null;
  'handle': string;
  'hover'?: string | null;
  'id'?: number;
  'params': string;
  'settings'?: string | null;
}
export interface txg_revslider_css_bkpEntity {
  'advanced'?: string | null;
  'handle': string;
  'hover'?: string | null;
  'id'?: number;
  'params': string;
  'settings'?: string | null;
}
export interface txg_revslider_layer_animationsEntity {
  'handle': string;
  'id'?: number;
  'params': string;
  'settings'?: string | null;
}
export interface txg_revslider_layer_animations_bkpEntity {
  'handle': string;
  'id'?: number;
  'params': string;
  'settings'?: string | null;
}
export interface txg_revslider_navigationsEntity {
  'css': string;
  'handle': string;
  'id'?: number;
  'markup': string;
  'name': string;
  'settings'?: string | null;
  'type': string;
}
export interface txg_revslider_navigations_bkpEntity {
  'css': string;
  'handle': string;
  'id'?: number;
  'markup': string;
  'name': string;
  'settings'?: string | null;
  'type': string;
}
export interface txg_revslider_slidersEntity {
  'alias'?: string | null;
  'id'?: number;
  'params': string;
  'settings'?: string | null;
  'title': string;
  'type'?: string;
}
export interface txg_revslider_sliders_bkpEntity {
  'alias'?: string | null;
  'id'?: number;
  'params': string;
  'settings'?: string | null;
  'title': string;
  'type'?: string;
}
export interface txg_revslider_slidesEntity {
  'id'?: number;
  'layers': string;
  'params': string;
  'settings': string;
  'slide_order': number;
  'slider_id': number;
}
export interface txg_revslider_slides_bkpEntity {
  'id'?: number;
  'layers': string;
  'params': string;
  'settings': string;
  'slide_order': number;
  'slider_id': number;
}
export interface txg_revslider_static_slidesEntity {
  'id'?: number;
  'layers': string;
  'params': string;
  'settings': string;
  'slider_id': number;
}
export interface txg_revslider_static_slides_bkpEntity {
  'id'?: number;
  'layers': string;
  'params': string;
  'settings': string;
  'slider_id': number;
}
export interface txg_smush_dir_imagesEntity {
  'error'?: string | null;
  'file_time'?: number | null;
  'id'?: any;
  'image_size'?: number | null;
  'last_scan'?: Date;
  'lossy'?: string | null;
  'meta'?: string | null;
  'orig_size'?: number | null;
  'path': string;
  'path_hash'?: string | null;
  'resize'?: string | null;
}
export interface txg_snippetsEntity {
  'active'?: any;
  'cloud_id'?: string | null;
  'code': string;
  'description': string;
  'id'?: string;
  'modified'?: Date;
  'name': string;
  'priority'?: number;
  'revision'?: string;
  'scope'?: string;
  'tags': string;
}
export interface txg_tec_eventsEntity {
  'duration'?: any | null;
  'end_date'?: string | null;
  'end_date_utc'?: string | null;
  'event_id'?: string;
  'hash': string;
  'post_id': string;
  'rset'?: string | null;
  'start_date': string;
  'start_date_utc': string;
  'timezone'?: string;
  'updated_at'?: Date;
}
export interface txg_tec_occurrencesEntity {
  'duration'?: any | null;
  'end_date': string;
  'end_date_utc': string;
  'event_id': string;
  'has_recurrence'?: any | null;
  'hash': string;
  'is_rdate'?: any | null;
  'occurrence_id'?: string;
  'post_id': string;
  'sequence'?: string | null;
  'start_date': string;
  'start_date_utc': string;
  'updated_at'?: Date;
}
export interface txg_tec_posts_and_ticket_groupsEntity {
  'group_id': string;
  'id'?: string;
  'post_id': string;
  'type'?: string;
}
export interface txg_tec_series_relationshipsEntity {
  'event_id': string;
  'event_post_id': string;
  'relationship_id'?: string;
  'series_post_id': string;
}
export interface txg_tec_ticket_groupsEntity {
  'data': string;
  'id'?: string;
  'slug'?: string;
}
export interface txg_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface txg_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface txg_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface txg_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
  'term_order'?: number | null;
}
export interface txg_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface txg_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface txg_wc_admin_note_actionsEntity {
  'action_id'?: string;
  'actioned_text': string;
  'label': string;
  'name': string;
  'nonce_action'?: string | null;
  'nonce_name'?: string | null;
  'note_id': string;
  'query': string;
  'status': string;
}
export interface txg_wc_admin_notesEntity {
  'content': string;
  'content_data'?: string | null;
  'date_created'?: Date;
  'date_reminder'?: Date | null;
  'icon'?: string;
  'image'?: string | null;
  'is_deleted'?: any;
  'is_read'?: any;
  'is_snoozable'?: any;
  'layout'?: string;
  'locale': string;
  'name': string;
  'note_id'?: string;
  'source': string;
  'status': string;
  'title': string;
  'type': string;
}
export interface txg_wc_category_lookupEntity {
  'category_id': string;
  'category_tree_id': string;
}
export interface txg_wc_customer_lookupEntity {
  'city'?: string;
  'country'?: string;
  'customer_id'?: string;
  'date_last_active'?: Date | null;
  'date_registered'?: Date | null;
  'email'?: string | null;
  'first_name': string;
  'last_name': string;
  'postcode'?: string;
  'state'?: string;
  'user_id'?: string | null;
  'username'?: string;
}
export interface txg_wc_download_logEntity {
  'download_log_id'?: string;
  'permission_id': string;
  'timestamp': Date;
  'user_id'?: string | null;
  'user_ip_address'?: string | null;
}
export interface txg_wc_mnm_child_itemsEntity {
  'child_item_id'?: string;
  'container_id': string;
  'menu_order': string;
  'product_id': string;
}
export interface txg_wc_order_bundle_lookupEntity {
  'bundle_id': string;
  'coupon_amount'?: number;
  'customer_id'?: string | null;
  'date_created'?: Date;
  'order_id': string;
  'order_item_id': string;
  'parent_order_item_id': string;
  'product_gross_revenue'?: number;
  'product_id': string;
  'product_net_revenue'?: number;
  'product_qty': number;
  'tax_amount'?: number;
  'variation_id': string;
}
export interface txg_wc_order_coupon_lookupEntity {
  'coupon_id': string;
  'date_created'?: Date;
  'discount_amount'?: number;
  'order_id': string;
}
export interface txg_wc_order_product_lookupEntity {
  'coupon_amount'?: number;
  'customer_id'?: string | null;
  'date_created'?: Date;
  'order_id': string;
  'order_item_id': string;
  'product_gross_revenue'?: number;
  'product_id': string;
  'product_net_revenue'?: number;
  'product_qty': number;
  'shipping_amount'?: number;
  'shipping_tax_amount'?: number;
  'tax_amount'?: number;
  'variation_id': string;
}
export interface txg_wc_order_statsEntity {
  'customer_id': string;
  'date_completed'?: Date | null;
  'date_created'?: Date;
  'date_created_gmt'?: Date;
  'date_paid'?: Date | null;
  'net_total'?: number;
  'num_items_sold'?: number;
  'order_id': string;
  'parent_id'?: string;
  'returning_customer'?: any | null;
  'shipping_total'?: number;
  'status': string;
  'tax_total'?: number;
  'total_sales'?: number;
}
export interface txg_wc_order_tax_lookupEntity {
  'date_created'?: Date;
  'order_id': string;
  'order_tax'?: number;
  'shipping_tax'?: number;
  'tax_rate_id': string;
  'total_tax'?: number;
}
export interface txg_wc_product_attributes_lookupEntity {
  'in_stock': any;
  'is_variation_attribute': any;
  'product_id': string;
  'product_or_parent_id': string;
  'taxonomy': string;
  'term_id': string;
}
export interface txg_wc_product_download_directoriesEntity {
  'enabled'?: any;
  'url': string;
  'url_id'?: string;
}
export interface txg_wc_product_meta_lookupEntity {
  'average_rating'?: number | null;
  'downloadable'?: any | null;
  'max_price'?: number | null;
  'min_price'?: number | null;
  'onsale'?: any | null;
  'product_id': string;
  'rating_count'?: string | null;
  'sku'?: string | null;
  'stock_quantity'?: number | null;
  'stock_status'?: string | null;
  'tax_class'?: string | null;
  'tax_status'?: string | null;
  'total_sales'?: string | null;
  'virtual'?: any | null;
}
export interface txg_wc_rate_limitsEntity {
  'rate_limit_expiry': string;
  'rate_limit_id'?: string;
  'rate_limit_key': string;
  'rate_limit_remaining'?: number;
}
export interface txg_wc_reserved_stockEntity {
  'expires'?: Date;
  'order_id': string;
  'product_id': string;
  'stock_quantity'?: number;
  'timestamp'?: Date;
}
export interface txg_wc_tax_rate_classesEntity {
  'name'?: string;
  'slug'?: string;
  'tax_rate_class_id'?: string;
}
export interface txg_wc_webhooksEntity {
  'api_version': number;
  'date_created'?: Date;
  'date_created_gmt'?: Date;
  'date_modified'?: Date;
  'date_modified_gmt'?: Date;
  'delivery_url': string;
  'failure_count'?: number;
  'name': string;
  'pending_delivery'?: any;
  'secret': string;
  'status': string;
  'topic': string;
  'user_id': string;
  'webhook_id'?: string;
}
export interface txg_wcs_payment_retriesEntity {
  'date_gmt'?: Date;
  'order_id': string;
  'retry_id'?: string;
  'rule_raw'?: string | null;
  'status': string;
}
export interface txg_wdp_order_itemsEntity {
  'amount'?: number | null;
  'date'?: Date | null;
  'gifted_amount'?: number | null;
  'gifted_qty'?: number | null;
  'id'?: number;
  'order_id': number;
  'product_id': number;
  'qty'?: number | null;
  'rule_id': number;
}
export interface txg_wdp_ordersEntity {
  'amount'?: number | null;
  'date'?: Date | null;
  'extra'?: number | null;
  'gifted_amount'?: number | null;
  'gifted_qty'?: number | null;
  'id'?: number;
  'is_free_shipping'?: any | null;
  'order_id': number;
  'qty'?: number | null;
  'rule_id': number;
  'shipping'?: number | null;
}
export interface txg_wdp_rulesEntity {
  'additional'?: string | null;
  'bulk_adjustments'?: string | null;
  'cart_adjustments'?: string | null;
  'conditions'?: string | null;
  'deleted'?: any | null;
  'enabled'?: any | null;
  'exclusive'?: any | null;
  'filters'?: string | null;
  'get_products'?: string | null;
  'id'?: number;
  'limits'?: string | null;
  'options'?: string | null;
  'priority'?: number | null;
  'product_adjustments'?: string | null;
  'role_discounts'?: string | null;
  'sortable_blocks_priority'?: string | null;
  'title'?: string | null;
  'type'?: string | null;
}
export interface txg_wdr_order_discountsEntity {
  'created_at'?: Date | null;
  'discounts': string;
  'extra'?: string | null;
  'has_free_shipping'?: 'yes' | 'no';
  'id'?: number;
  'order_id'?: number | null;
  'updated_at'?: Date | null;
}
export interface txg_wdr_order_item_discountsEntity {
  'bulk_discount': number;
  'cart_discount': number;
  'cart_discount_label'?: string | null;
  'created_at'?: Date | null;
  'discount': number;
  'discounted_price': number;
  'extra'?: string | null;
  'has_free_shipping'?: 'yes' | 'no';
  'id'?: number;
  'item_id'?: number | null;
  'item_price': number;
  'order_id'?: number | null;
  'order_item_id'?: number | null;
  'other_discount'?: number;
  'other_price'?: number;
  'quantity': number;
  'rule_id'?: number | null;
  'set_discount': number;
  'simple_discount': number;
  'updated_at'?: Date | null;
}
export interface txg_wdr_rulesEntity {
  'additional'?: string | null;
  'advanced_discount_message'?: string | null;
  'apply_to'?: string | null;
  'bulk_adjustments': string;
  'buy_x_get_x_adjustments'?: string | null;
  'buy_x_get_y_adjustments'?: string | null;
  'cart_adjustments'?: string | null;
  'conditions'?: string | null;
  'created_by'?: number | null;
  'created_on'?: Date | null;
  'date_from'?: number | null;
  'date_to'?: number | null;
  'deleted'?: any | null;
  'discount_type'?: string | null;
  'enabled'?: any | null;
  'exclusive'?: any | null;
  'filters': string;
  'id'?: number;
  'max_discount_sum'?: string | null;
  'modified_by'?: number | null;
  'modified_on'?: Date | null;
  'other_discounts'?: string | null;
  'priority'?: number | null;
  'product_adjustments'?: string | null;
  'rule_language'?: string | null;
  'set_adjustments': string;
  'title'?: string | null;
  'usage_limits'?: number | null;
  'used_coupons'?: string | null;
  'used_limits'?: number | null;
}
export interface txg_wfwafconfigEntity {
  'autoload'?: 'no' | 'yes';
  'name': string;
  'val'?: any | null;
}
export interface txg_woo_square_integration_deleted_dataEntity {
  'name'?: string | null;
  'square_id': string;
  'target_id': string;
  'target_type'?: number | null;
}
export interface txg_woo_square_integration_logsEntity {
  'action': number;
  'date'?: Date;
  'id'?: string;
  'message'?: string | null;
  'name'?: string | null;
  'parent_id'?: string;
  'square_id'?: string | null;
  'sync_direction'?: any | null;
  'sync_type'?: any | null;
  'target_id'?: string | null;
  'target_status'?: any | null;
  'target_type'?: number | null;
}
export interface txg_woocommerce_api_keysEntity {
  'consumer_key': string;
  'consumer_secret': string;
  'description'?: string | null;
  'key_id'?: string;
  'last_access'?: Date | null;
  'nonces'?: string | null;
  'permissions': string;
  'truncated_key': string;
  'user_id': string;
}
export interface txg_woocommerce_attribute_taxonomiesEntity {
  'attribute_id'?: string;
  'attribute_label'?: string | null;
  'attribute_name': string;
  'attribute_orderby': string;
  'attribute_public'?: number;
  'attribute_type': string;
}
export interface txg_woocommerce_bundled_itemmetaEntity {
  'bundled_item_id': string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface txg_woocommerce_bundled_itemsEntity {
  'bundle_id': string;
  'bundled_item_id'?: string;
  'menu_order': string;
  'product_id': string;
}
export interface txg_woocommerce_downloadable_product_permissionsEntity {
  'access_expires'?: Date | null;
  'access_granted'?: Date;
  'download_count'?: string;
  'download_id': string;
  'downloads_remaining'?: string | null;
  'order_id'?: string;
  'order_key': string;
  'permission_id'?: string;
  'product_id': string;
  'user_email': string;
  'user_id'?: string | null;
}
export interface txg_woocommerce_logEntity {
  'context'?: string | null;
  'level': number;
  'log_id'?: string;
  'message': string;
  'source': string;
  'timestamp': Date;
}
export interface txg_woocommerce_order_itemmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'order_item_id': string;
}
export interface txg_woocommerce_order_itemsEntity {
  'order_id': string;
  'order_item_id'?: string;
  'order_item_name': string;
  'order_item_type'?: string;
}
export interface txg_woocommerce_payment_tokenmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'payment_token_id': string;
}
export interface txg_woocommerce_payment_tokensEntity {
  'gateway_id': string;
  'is_default'?: any;
  'token': string;
  'token_id'?: string;
  'type': string;
  'user_id'?: string;
}
export interface txg_woocommerce_sessionsEntity {
  'session_expiry': string;
  'session_id'?: string;
  'session_key': string;
  'session_value': string;
}
export interface txg_woocommerce_shipping_zone_locationsEntity {
  'location_code': string;
  'location_id'?: string;
  'location_type': string;
  'zone_id': string;
}
export interface txg_woocommerce_shipping_zone_methodsEntity {
  'instance_id'?: string;
  'is_enabled'?: any;
  'method_id': string;
  'method_order': string;
  'zone_id': string;
}
export interface txg_woocommerce_shipping_zonesEntity {
  'zone_id'?: string;
  'zone_name': string;
  'zone_order': string;
}
export interface txg_woocommerce_square_customersEntity {
  'email_address': string;
  'square_id': string;
  'user_id': string;
}
export interface txg_woocommerce_tax_rate_locationsEntity {
  'location_code': string;
  'location_id'?: string;
  'location_type': string;
  'tax_rate_id': string;
}
export interface txg_woocommerce_tax_ratesEntity {
  'tax_rate'?: string;
  'tax_rate_class'?: string;
  'tax_rate_compound'?: number;
  'tax_rate_country'?: string;
  'tax_rate_id'?: string;
  'tax_rate_name'?: string;
  'tax_rate_order': string;
  'tax_rate_priority': string;
  'tax_rate_shipping'?: number;
  'tax_rate_state'?: string;
}
export interface txg_woof_query_cacheEntity {
  'mkey': string;
  'mvalue': string;
}
export interface txg_woof_sdEntity {
  'demo_taxonomy'?: string | null;
  'id'?: number;
  'options'?: string | null;
  'template'?: number | null;
  'title'?: string | null;
  'type'?: string;
}
export interface txg_woof_sd_presetsEntity {
  'id'?: number;
  'options'?: string | null;
  'title'?: string | null;
  'type'?: string;
}
export interface txg_wpfm_backupEntity {
  'backup_date'?: string | null;
  'backup_name'?: string | null;
  'id'?: number;
}
export interface txg_wpmailsmtp_debug_eventsEntity {
  'content'?: string | null;
  'created_at'?: Date;
  'event_type'?: number;
  'id'?: number;
  'initiator'?: string | null;
}
export interface txg_wpmailsmtp_tasks_metaEntity {
  'action': string;
  'data': string;
  'date': Date;
  'id'?: string;
}
export interface txg_wpml_mailsEntity {
  'attachments'?: string;
  'error'?: string | null;
  'headers'?: string | null;
  'host'?: string;
  'mail_id'?: number;
  'message'?: string | null;
  'plugin_version'?: string;
  'receiver'?: string;
  'subject'?: string;
  'timestamp'?: Date;
}
export interface txg_wpre_emailsEntity {
  'has_attachment'?: any;
  'id'?: number;
  'message'?: string | null;
  'recipients_bcc'?: string | null;
  'recipients_cc'?: string | null;
  'recipients_to'?: string | null;
  'sent_on'?: Date | null;
  'subject'?: string | null;
}
export interface txg_wt_iew_action_historyEntity {
  'created_at'?: number;
  'data': string;
  'file_name': string;
  'id'?: number;
  'item_type': string;
  'offset'?: number;
  'status'?: number;
  'status_text': string;
  'template_type': string;
  'total'?: number;
}
export interface txg_wt_iew_cronEntity {
  'action_type': string;
  'cron_data': string;
  'data': string;
  'history_id': number;
  'history_id_list': string;
  'id'?: number;
  'item_type': string;
  'last_run': number;
  'next_offset'?: number;
  'old_status'?: number;
  'schedule_type': string;
  'start_time': number;
  'status'?: number;
}
export interface txg_wt_iew_ftpEntity {
  'export_path': string;
  'ftps'?: number;
  'id'?: number;
  'import_path': string;
  'is_sftp'?: number;
  'name': string;
  'passive_mode'?: number;
  'password': string;
  'port'?: number;
  'server': string;
  'user_name': string;
}
export interface txg_wt_iew_mapping_templateEntity {
  'data': string;
  'id'?: number;
  'item_type': string;
  'name': string;
  'template_type': string;
}
export interface txg_yoast_indexableEntity {
  'author_id'?: string | null;
  'blog_id'?: string;
  'breadcrumb_title'?: string | null;
  'canonical'?: string | null;
  'created_at'?: Date | null;
  'description'?: string | null;
  'estimated_reading_time_minutes'?: number | null;
  'has_ancestors'?: any | null;
  'has_public_posts'?: any | null;
  'id'?: number;
  'incoming_link_count'?: number | null;
  'is_cornerstone'?: any | null;
  'is_protected'?: any | null;
  'is_public'?: any | null;
  'is_robots_noarchive'?: any | null;
  'is_robots_nofollow'?: any | null;
  'is_robots_noimageindex'?: any | null;
  'is_robots_noindex'?: any | null;
  'is_robots_nosnippet'?: any | null;
  'language'?: string | null;
  'link_count'?: number | null;
  'number_of_pages'?: number | null;
  'object_id'?: string | null;
  'object_last_modified'?: Date | null;
  'object_published_at'?: Date | null;
  'object_sub_type'?: string | null;
  'object_type': string;
  'open_graph_description'?: string | null;
  'open_graph_image'?: string | null;
  'open_graph_image_id'?: string | null;
  'open_graph_image_meta'?: string | null;
  'open_graph_image_source'?: string | null;
  'open_graph_title'?: string | null;
  'permalink'?: string | null;
  'permalink_hash'?: string | null;
  'post_parent'?: string | null;
  'post_status'?: string | null;
  'primary_focus_keyword'?: string | null;
  'primary_focus_keyword_score'?: number | null;
  'prominent_words_version'?: number | null;
  'readability_score'?: number | null;
  'region'?: string | null;
  'schema_article_type'?: string | null;
  'schema_page_type'?: string | null;
  'title'?: string | null;
  'twitter_description'?: string | null;
  'twitter_image'?: string | null;
  'twitter_image_id'?: string | null;
  'twitter_image_source'?: string | null;
  'twitter_title'?: string | null;
  'updated_at'?: Date;
  'version'?: number | null;
}
export interface txg_yoast_indexable_hierarchyEntity {
  'ancestor_id': number;
  'blog_id'?: string;
  'depth'?: number | null;
  'indexable_id': number;
}
export interface txg_yoast_migrationsEntity {
  'id'?: number;
  'version'?: string | null;
}
export interface txg_yoast_primary_termEntity {
  'blog_id'?: string;
  'created_at'?: Date | null;
  'id'?: number;
  'post_id'?: string | null;
  'taxonomy': string;
  'term_id'?: string | null;
  'updated_at'?: Date;
}
export interface txg_yoast_seo_linksEntity {
  'height'?: number | null;
  'id'?: string;
  'indexable_id'?: number | null;
  'language'?: string | null;
  'post_id'?: string | null;
  'region'?: string | null;
  'size'?: number | null;
  'target_indexable_id'?: number | null;
  'target_post_id'?: string | null;
  'type'?: string | null;
  'url'?: string | null;
  'width'?: number | null;
}
export interface wcipcommentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wcipcommentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wciplinksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wcipoptionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wcippostmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wcippostsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wcipterm_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wcipterm_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wciptermmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wciptermsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
  'term_order'?: number | null;
}
export interface wcipusermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wcipusersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_actionscheduler_actionsEntity {
  'action_id'?: string;
  'args'?: string | null;
  'attempts'?: number;
  'claim_id'?: string;
  'extended_args'?: string | null;
  'group_id'?: string;
  'hook': string;
  'last_attempt_gmt'?: Date | null;
  'last_attempt_local'?: Date | null;
  'priority'?: number;
  'schedule'?: string | null;
  'scheduled_date_gmt'?: Date | null;
  'scheduled_date_local'?: Date | null;
  'status': string;
}
export interface wp_actionscheduler_claimsEntity {
  'claim_id'?: string;
  'date_created_gmt'?: Date | null;
}
export interface wp_actionscheduler_groupsEntity {
  'group_id'?: string;
  'slug': string;
}
export interface wp_actionscheduler_logsEntity {
  'action_id': string;
  'log_date_gmt'?: Date | null;
  'log_date_local'?: Date | null;
  'log_id'?: string;
  'message': string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_wpforms_logsEntity {
  'create_at': Date;
  'entry_id'?: string | null;
  'form_id'?: string | null;
  'id'?: string;
  'message': string;
  'title': string;
  'types': string;
  'user_id'?: string | null;
}
export interface wp_wpforms_payment_metaEntity {
  'id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'payment_id': string;
}
export interface wp_wpforms_paymentsEntity {
  'currency'?: string;
  'customer_id'?: string;
  'date_created_gmt': Date;
  'date_updated_gmt': Date;
  'discount_amount'?: number;
  'entry_id'?: string;
  'form_id': string;
  'gateway'?: string;
  'id'?: string;
  'is_published'?: any;
  'mode'?: string;
  'status'?: string;
  'subscription_id'?: string;
  'subscription_status'?: string;
  'subtotal_amount'?: number;
  'title'?: string;
  'total_amount'?: number;
  'transaction_id'?: string;
  'type'?: string;
}
export interface wp_wpforms_tasks_metaEntity {
  'action': string;
  'data': string;
  'date': Date;
  'id'?: string;
}
export interface wp_actionscheduler_actionsEntity {
  'action_id'?: string;
  'args'?: string | null;
  'attempts'?: number;
  'claim_id'?: string;
  'extended_args'?: string | null;
  'group_id'?: string;
  'hook': string;
  'last_attempt_gmt'?: Date;
  'last_attempt_local'?: Date;
  'schedule'?: string | null;
  'scheduled_date_gmt'?: Date;
  'scheduled_date_local'?: Date;
  'status': string;
}
export interface wp_actionscheduler_claimsEntity {
  'claim_id'?: string;
  'date_created_gmt'?: Date;
}
export interface wp_actionscheduler_groupsEntity {
  'group_id'?: string;
  'slug': string;
}
export interface wp_actionscheduler_logsEntity {
  'action_id': string;
  'log_date_gmt'?: Date;
  'log_date_local'?: Date;
  'log_id'?: string;
  'message': string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_nf3_action_metaEntity {
  'id'?: number;
  'key': string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'parent_id': number;
  'value'?: string | null;
}
export interface wp_nf3_actionsEntity {
  'active'?: any | null;
  'created_at'?: Date;
  'id'?: number;
  'key'?: string | null;
  'label'?: string | null;
  'parent_id': number;
  'title'?: string | null;
  'type'?: string | null;
  'updated_at'?: Date | null;
}
export interface wp_nf3_chunksEntity {
  'id'?: number;
  'name'?: string | null;
  'value'?: string | null;
}
export interface wp_nf3_field_metaEntity {
  'id'?: number;
  'key': string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'parent_id': number;
  'value'?: string | null;
}
export interface wp_nf3_fieldsEntity {
  'created_at'?: Date;
  'default_value'?: string | null;
  'field_key'?: string | null;
  'field_label'?: string | null;
  'id'?: number;
  'key'?: string | null;
  'label'?: string | null;
  'label_pos'?: string | null;
  'order'?: number | null;
  'parent_id': number;
  'personally_identifiable'?: boolean | null;
  'required'?: boolean | null;
  'type'?: string | null;
  'updated_at'?: Date | null;
}
export interface wp_nf3_form_metaEntity {
  'id'?: number;
  'key': string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'parent_id': number;
  'value'?: string | null;
}
export interface wp_nf3_formsEntity {
  'clear_complete'?: boolean | null;
  'created_at'?: Date;
  'default_label_pos'?: string | null;
  'form_title'?: string | null;
  'hide_complete'?: boolean | null;
  'id'?: number;
  'key'?: string | null;
  'logged_in'?: boolean | null;
  'seq_num'?: number | null;
  'show_title'?: boolean | null;
  'subs'?: number | null;
  'title'?: string | null;
  'updated_at'?: Date | null;
  'views'?: number | null;
}
export interface wp_nf3_object_metaEntity {
  'id'?: number;
  'key': string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'parent_id': number;
  'value'?: string | null;
}
export interface wp_nf3_objectsEntity {
  'created_at'?: Date;
  'id'?: number;
  'object_title'?: string | null;
  'title'?: string | null;
  'type'?: string | null;
  'updated_at'?: Date | null;
}
export interface wp_nf3_relationshipsEntity {
  'child_id': number;
  'child_type': string;
  'created_at'?: Date;
  'id'?: number;
  'parent_id': number;
  'parent_type': string;
  'updated_at'?: Date | null;
}
export interface wp_nf3_upgradesEntity {
  'cache'?: string | null;
  'id': number;
  'maintenance'?: boolean | null;
  'stage'?: number;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_rank_math_404_logsEntity {
  'accessed'?: Date;
  'id'?: string;
  'ip'?: string;
  'referer'?: string;
  'times_accessed'?: string;
  'uri': string;
  'user_agent'?: string;
}
export interface wp_rank_math_analytics_adsenseEntity {
  'created'?: Date;
  'earnings'?: number;
  'id'?: string;
}
export interface wp_rank_math_analytics_gaEntity {
  'created'?: Date;
  'id'?: string;
  'page': string;
  'pageviews': any;
  'visitors': any;
}
export interface wp_rank_math_analytics_gscEntity {
  'clicks': any;
  'created'?: Date;
  'ctr': number;
  'id'?: string;
  'impressions': any;
  'page': string;
  'position': number;
  'query': string;
}
export interface wp_rank_math_analytics_keyword_managerEntity {
  'collection'?: string | null;
  'id'?: string;
  'is_active'?: any;
  'keyword': string;
}
export interface wp_rank_math_analytics_object_linksEntity {
  'id'?: string;
  'link': string;
  'object_id': string;
  'rel': string;
  'status': number;
  'type': string;
}
export interface wp_rank_math_analytics_objectsEntity {
  'created'?: Date;
  'desktop_interactive'?: number | null;
  'desktop_pagescore'?: number | null;
  'id'?: string;
  'is_indexable'?: any;
  'mobile_interactive'?: number | null;
  'mobile_pagescore'?: number | null;
  'object_id': string;
  'object_subtype': string;
  'object_type': string;
  'page': string;
  'page_score'?: number;
  'pagespeed_refreshed'?: Date;
  'primary_key': string;
  'schemas_in_use'?: string | null;
  'seo_score'?: number;
  'title': string;
}
export interface wp_rank_math_internal_linksEntity {
  'id'?: string;
  'post_id': string;
  'target_post_id': string;
  'type': string;
  'url': string;
}
export interface wp_rank_math_internal_metaEntity {
  'external_link_count'?: number | null;
  'incoming_link_count'?: number | null;
  'internal_link_count'?: number | null;
  'object_id': string;
}
export interface wp_rank_math_redirectionsEntity {
  'created'?: Date;
  'header_code': number;
  'hits'?: string;
  'id'?: string;
  'last_accessed'?: Date;
  'sources': string;
  'status'?: string;
  'updated'?: Date;
  'url_to': string;
}
export interface wp_rank_math_redirections_cacheEntity {
  'from_url': string;
  'id'?: string;
  'is_redirected'?: any;
  'object_id'?: string;
  'object_type'?: string;
  'redirection_id': string;
}
export interface wp_rank_math_sc_analyticsEntity {
  'clicks': any;
  'ctr': number;
  'date': Date;
  'dimension': string;
  'id'?: string;
  'impressions': any;
  'position': number;
  'property': string;
}
export interface wp_smush_dir_imagesEntity {
  'error'?: string | null;
  'file_time'?: number | null;
  'id'?: any;
  'image_size'?: number | null;
  'last_scan'?: Date | null;
  'lossy'?: string | null;
  'meta'?: string | null;
  'orig_size'?: number | null;
  'path': string;
  'path_hash'?: string | null;
  'resize'?: string | null;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
  'term_order'?: number | null;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_wpml_mailsEntity {
  'attachments'?: string;
  'error'?: string | null;
  'headers'?: string | null;
  'host'?: string;
  'mail_id'?: number;
  'message'?: string | null;
  'plugin_version'?: string;
  'receiver'?: string;
  'subject'?: string;
  'timestamp'?: Date;
}
export interface wp_yoast_seo_linksEntity {
  'id'?: string;
  'post_id': string;
  'target_post_id': string;
  'type': string;
  'url': string;
}
export interface wp_yoast_seo_metaEntity {
  'incoming_link_count'?: number | null;
  'internal_link_count'?: number | null;
  'object_id': string;
}
export interface wp_actionscheduler_actionsEntity {
  'action_id'?: string;
  'args'?: string | null;
  'attempts'?: number;
  'claim_id'?: string;
  'extended_args'?: string | null;
  'group_id'?: string;
  'hook': string;
  'last_attempt_gmt'?: Date | null;
  'last_attempt_local'?: Date | null;
  'priority'?: number;
  'schedule'?: string | null;
  'scheduled_date_gmt'?: Date | null;
  'scheduled_date_local'?: Date | null;
  'status': string;
}
export interface wp_actionscheduler_claimsEntity {
  'claim_id'?: string;
  'date_created_gmt'?: Date | null;
}
export interface wp_actionscheduler_groupsEntity {
  'group_id'?: string;
  'slug': string;
}
export interface wp_actionscheduler_logsEntity {
  'action_id': string;
  'log_date_gmt'?: Date | null;
  'log_date_local'?: Date | null;
  'log_id'?: string;
  'message': string;
}
export interface wp_cky_bannersEntity {
  'banner_default'?: number;
  'banner_id'?: string;
  'contents': string;
  'date_created'?: Date;
  'date_modified'?: Date;
  'name'?: string;
  'settings': string;
  'slug'?: string;
  'status'?: number;
}
export interface wp_cky_cookie_categoriesEntity {
  'category_id'?: string;
  'date_created'?: Date;
  'date_modified'?: Date;
  'description': string;
  'meta'?: string | null;
  'name': string;
  'prior_consent'?: number;
  'priority'?: number;
  'sell_personal_data'?: number;
  'slug'?: string;
  'visibility'?: number;
}
export interface wp_cky_cookiesEntity {
  'category': string;
  'cookie_id'?: string;
  'date_created'?: Date;
  'date_modified'?: Date;
  'description': string;
  'discovered'?: number;
  'domain'?: string;
  'duration': string;
  'meta'?: string | null;
  'name'?: string;
  'slug'?: string;
  'type': string;
  'url_pattern'?: string | null;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key': string;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_easywpsmtp_debug_eventsEntity {
  'content'?: string | null;
  'created_at'?: Date;
  'event_type'?: number;
  'id'?: number;
  'initiator'?: string | null;
}
export interface wp_easywpsmtp_tasks_metaEntity {
  'action': string;
  'data': string;
  'date': Date;
  'id'?: string;
}
export interface wp_icl_background_taskEntity {
  'completed_count'?: number;
  'completed_ids'?: string | null;
  'payload'?: string | null;
  'retry_count'?: number;
  'starting_date'?: Date | null;
  'task_id'?: string;
  'task_status'?: number;
  'task_type': string;
  'total_count'?: number;
}
export interface wp_icl_content_statusEntity {
  'md5': string;
  'nid': string;
  'rid': string;
  'timestamp': Date;
}
export interface wp_icl_core_statusEntity {
  'id'?: string;
  'module': string;
  'origin': string;
  'rid': string;
  'status': number;
  'target': string;
  'tp_revision'?: number;
  'ts_status'?: string | null;
}
export interface wp_icl_flagsEntity {
  'flag': string;
  'from_template'?: number;
  'id'?: number;
  'lang_code': string;
}
export interface wp_icl_languagesEntity {
  'active': number;
  'code': string;
  'country'?: string | null;
  'default_locale'?: string | null;
  'encode_url'?: any;
  'english_name': string;
  'id'?: number;
  'major'?: number;
  'tag'?: string | null;
}
export interface wp_icl_languages_translationsEntity {
  'display_language_code': string;
  'id'?: number;
  'language_code': string;
  'name': string;
}
export interface wp_icl_locale_mapEntity {
  'code': string;
  'locale': string;
}
export interface wp_icl_message_statusEntity {
  'from_language': string;
  'id'?: string;
  'md5': string;
  'object_id': string;
  'object_type': string;
  'rid': string;
  'status': number;
  'timestamp'?: Date;
  'to_language': string;
}
export interface wp_icl_mo_files_domainsEntity {
  'component_id'?: string | null;
  'component_type'?: 'plugin' | 'theme' | 'other';
  'domain': string;
  'file_path': string;
  'file_path_md5': string;
  'id'?: number;
  'last_modified': number;
  'num_of_strings'?: number;
  'status'?: string;
}
export interface wp_icl_nodeEntity {
  'links_fixed'?: number;
  'md5': string;
  'nid': string;
}
export interface wp_icl_remindersEntity {
  'can_delete': number;
  'id': string;
  'message': string;
  'show': number;
  'url': string;
}
export interface wp_icl_string_batchesEntity {
  'batch_id': string;
  'id'?: string;
  'string_id': string;
}
export interface wp_icl_string_packagesEntity {
  'edit_link': string;
  'ID'?: string;
  'kind': string;
  'kind_slug': string;
  'name': string;
  'post_id'?: number | null;
  'title': string;
  'view_link': string;
  'word_count'?: string | null;
}
export interface wp_icl_string_positionsEntity {
  'id'?: string;
  'kind'?: number | null;
  'position_in_page': string;
  'string_id': string;
}
export interface wp_icl_string_statusEntity {
  'id'?: string;
  'md5': string;
  'rid': string;
  'string_translation_id': string;
  'timestamp'?: Date;
}
export interface wp_icl_string_translationsEntity {
  'batch_id'?: number;
  'id'?: string;
  'language': string;
  'mo_string'?: string | null;
  'status': number;
  'string_id': string;
  'translation_date'?: Date;
  'translation_service'?: string;
  'translator_id'?: string | null;
  'value'?: string | null;
}
export interface wp_icl_stringsEntity {
  'context': string;
  'domain_name_context_md5': string;
  'gettext_context': string;
  'id'?: string;
  'language': string;
  'location'?: string | null;
  'name': string;
  'status': number;
  'string_package_id'?: string | null;
  'title'?: string | null;
  'translation_priority': string;
  'type'?: string;
  'value': string;
  'word_count'?: number | null;
  'wrap_tag': string;
}
export interface wp_icl_translateEntity {
  'content_id': string;
  'field_data': string;
  'field_data_translated': string;
  'field_finished'?: number;
  'field_format': string;
  'field_translate': number;
  'field_type': string;
  'field_wrap_tag': string;
  'job_id': string;
  'tid'?: string;
  'timestamp'?: Date;
}
export interface wp_icl_translate_jobEntity {
  'ate_sync_count'?: number | null;
  'automatic'?: number;
  'completed_date'?: Date | null;
  'deadline_date'?: Date | null;
  'edit_timestamp'?: number | null;
  'editor'?: string | null;
  'editor_job_id'?: string | null;
  'job_id'?: string;
  'manager_id': number;
  'revision'?: number | null;
  'rid': string;
  'title'?: string | null;
  'translated'?: number;
  'translator_id': number;
}
export interface wp_icl_translation_batchesEntity {
  'batch_name': string;
  'id'?: number;
  'last_update'?: Date | null;
  'tp_id'?: number | null;
  'ts_url'?: string | null;
}
export interface wp_icl_translation_downloadsEntity {
  'download_url': string;
  'editor_job_id': string;
  'lock_timestamp'?: number | null;
}
export interface wp_icl_translation_statusEntity {
  '_prevstate'?: string | null;
  'ate_comm_retry_count'?: number | null;
  'batch_id'?: number;
  'links_fixed'?: number;
  'md5': string;
  'needs_update': number;
  'review_status'?: 'NEEDS_REVIEW' | 'EDITING' | 'ACCEPTED' | null;
  'rid'?: string;
  'status': number;
  'timestamp'?: Date;
  'tp_id'?: number | null;
  'tp_revision'?: number;
  'translation_id': string;
  'translation_package': string;
  'translation_service': string;
  'translator_id': string;
  'ts_status'?: string | null;
  'uuid'?: string | null;
}
export interface wp_icl_translationsEntity {
  'element_id'?: string | null;
  'element_type'?: string;
  'language_code': string;
  'source_language_code'?: string | null;
  'translation_id'?: string;
  'trid': string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key': string;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_redirection_404Entity {
  'agent'?: string | null;
  'created': Date;
  'domain'?: string | null;
  'http_code'?: number;
  'id'?: number;
  'ip'?: string | null;
  'referrer'?: string | null;
  'request_data'?: string | null;
  'request_method'?: string | null;
  'url': string;
}
export interface wp_redirection_groupsEntity {
  'id'?: number;
  'module_id'?: number;
  'name': string;
  'position'?: number;
  'status'?: 'enabled' | 'disabled';
  'tracking'?: number;
}
export interface wp_redirection_itemsEntity {
  'action_code': number;
  'action_data'?: string | null;
  'action_type': string;
  'group_id'?: number;
  'id'?: number;
  'last_access'?: Date;
  'last_count'?: number;
  'match_data'?: string | null;
  'match_type': string;
  'match_url'?: string | null;
  'position'?: number;
  'regex'?: number;
  'status'?: 'enabled' | 'disabled';
  'title'?: string | null;
  'url': string;
}
export interface wp_redirection_logsEntity {
  'agent'?: string | null;
  'created': Date;
  'domain'?: string | null;
  'http_code'?: number;
  'id'?: number;
  'ip'?: string | null;
  'redirect_by'?: string | null;
  'redirection_id'?: number | null;
  'referrer'?: string | null;
  'request_data'?: string | null;
  'request_method'?: string | null;
  'sent_to'?: string | null;
  'url': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key': string;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
}
export interface wp_toolset_associationsEntity {
  'child_id': string;
  'id'?: string;
  'intermediary_id': string;
  'parent_id': string;
  'relationship_id': string;
}
export interface wp_toolset_connected_elementsEntity {
  'domain'?: string;
  'element_id': string;
  'group_id': string;
  'id'?: string;
  'lang_code'?: string | null;
  'wpml_trid'?: string | null;
}
export interface wp_toolset_post_guid_idEntity {
  'guid'?: string;
  'post_id'?: string | null;
}
export interface wp_toolset_relationshipsEntity {
  'autodelete_intermediary'?: any;
  'cardinality_child_max'?: number;
  'cardinality_child_min'?: number;
  'cardinality_parent_max'?: number;
  'cardinality_parent_min'?: number;
  'child_domain'?: string;
  'child_types'?: string;
  'display_name_plural'?: string;
  'display_name_singular'?: string;
  'driver'?: string;
  'id'?: string;
  'intermediary_type'?: string;
  'is_active'?: any;
  'is_distinct'?: any;
  'needs_legacy_support'?: any;
  'origin'?: string;
  'ownership'?: string;
  'parent_domain'?: string;
  'parent_types'?: string;
  'role_label_child_plural'?: string;
  'role_label_child_singular'?: string;
  'role_label_parent_plural'?: string;
  'role_label_parent_singular'?: string;
  'role_name_child'?: string;
  'role_name_intermediary'?: string;
  'role_name_parent'?: string;
  'scope': string;
  'slug'?: string;
}
export interface wp_toolset_type_setsEntity {
  'id'?: string;
  'set_id': string;
  'type'?: string;
}
export interface wp_usermetaEntity {
  'meta_key': string;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_wpforms_entriesEntity {
  'date': Date;
  'date_modified': Date;
  'entry_id'?: string;
  'fields': string;
  'form_id': string;
  'ip_address': string;
  'meta': string;
  'post_id': string;
  'starred'?: any | null;
  'status': string;
  'type': string;
  'user_agent': string;
  'user_id': string;
  'user_uuid': string;
  'viewed'?: any | null;
}
export interface wp_wpforms_entry_fieldsEntity {
  'date': Date;
  'entry_id': string;
  'field_id'?: string | null;
  'form_id': string;
  'id'?: string;
  'value': string;
}
export interface wp_wpforms_entry_metaEntity {
  'data': string;
  'date': Date;
  'entry_id': string;
  'form_id': string;
  'id'?: string;
  'status': string;
  'type': string;
  'user_id': string;
}
export interface wp_wpforms_file_restrictionsEntity {
  'field_id': string;
  'form_id': string;
  'id'?: string;
  'password': string;
  'rules': string;
}
export interface wp_wpforms_logsEntity {
  'create_at': Date;
  'entry_id'?: string | null;
  'form_id'?: string | null;
  'id'?: string;
  'message': string;
  'title': string;
  'types': string;
  'user_id'?: string | null;
}
export interface wp_wpforms_payment_metaEntity {
  'id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'payment_id': string;
}
export interface wp_wpforms_paymentsEntity {
  'currency'?: string;
  'customer_id'?: string;
  'date_created_gmt': Date;
  'date_updated_gmt': Date;
  'discount_amount'?: number;
  'entry_id'?: string;
  'form_id': string;
  'gateway'?: string;
  'id'?: string;
  'is_published'?: any;
  'mode'?: string;
  'status'?: string;
  'subscription_id'?: string;
  'subscription_status'?: string;
  'subtotal_amount'?: number;
  'title'?: string;
  'total_amount'?: number;
  'transaction_id'?: string;
  'type'?: string;
}
export interface wp_wpforms_protected_filesEntity {
  'entry_id': string;
  'file': string;
  'form_id': string;
  'hash': string;
  'id'?: string;
  'last_usage_at': Date;
  'restriction_id': string;
}
export interface wp_wpforms_tasks_metaEntity {
  'action': string;
  'data': string;
  'date': Date;
  'id'?: string;
}
export interface wp_wpmailsmtp_debug_eventsEntity {
  'content'?: string | null;
  'created_at'?: Date;
  'event_type'?: number;
  'id'?: number;
  'initiator'?: string | null;
}
export interface wp_wpmailsmtp_tasks_metaEntity {
  'action': string;
  'data': string;
  'date': Date;
  'id'?: string;
}
export interface wp_wpml_mailsEntity {
  'attachments'?: string;
  'error'?: string | null;
  'headers'?: string | null;
  'host'?: string;
  'mail_id'?: number;
  'message'?: string | null;
  'plugin_version'?: string;
  'receiver'?: string;
  'subject'?: string;
  'timestamp'?: Date;
}
export interface wp_yoast_indexableEntity {
  'author_id'?: string | null;
  'blog_id'?: string;
  'breadcrumb_title'?: string | null;
  'canonical'?: string | null;
  'created_at'?: Date | null;
  'description'?: string | null;
  'estimated_reading_time_minutes'?: number | null;
  'has_ancestors'?: any | null;
  'has_public_posts'?: any | null;
  'id'?: number;
  'inclusive_language_score'?: number | null;
  'incoming_link_count'?: number | null;
  'is_cornerstone'?: any | null;
  'is_protected'?: any | null;
  'is_public'?: any | null;
  'is_robots_noarchive'?: any | null;
  'is_robots_nofollow'?: any | null;
  'is_robots_noimageindex'?: any | null;
  'is_robots_noindex'?: any | null;
  'is_robots_nosnippet'?: any | null;
  'language'?: string | null;
  'link_count'?: number | null;
  'number_of_pages'?: number | null;
  'object_id'?: string | null;
  'object_last_modified'?: Date | null;
  'object_published_at'?: Date | null;
  'object_sub_type'?: string | null;
  'object_type': string;
  'open_graph_description'?: string | null;
  'open_graph_image'?: string | null;
  'open_graph_image_id'?: string | null;
  'open_graph_image_meta'?: string | null;
  'open_graph_image_source'?: string | null;
  'open_graph_title'?: string | null;
  'permalink'?: string | null;
  'permalink_hash'?: string | null;
  'post_parent'?: string | null;
  'post_status'?: string | null;
  'primary_focus_keyword'?: string | null;
  'primary_focus_keyword_score'?: number | null;
  'prominent_words_version'?: number | null;
  'readability_score'?: number | null;
  'region'?: string | null;
  'schema_article_type'?: string | null;
  'schema_page_type'?: string | null;
  'title'?: string | null;
  'twitter_description'?: string | null;
  'twitter_image'?: string | null;
  'twitter_image_id'?: string | null;
  'twitter_image_source'?: string | null;
  'twitter_title'?: string | null;
  'updated_at'?: Date;
  'version'?: number | null;
}
export interface wp_yoast_indexable_hierarchyEntity {
  'ancestor_id': number;
  'blog_id'?: string;
  'depth'?: number | null;
  'indexable_id': number;
}
export interface wp_yoast_migrationsEntity {
  'id'?: number;
  'version'?: string | null;
}
export interface wp_yoast_primary_termEntity {
  'blog_id'?: string;
  'created_at'?: Date | null;
  'id'?: number;
  'post_id'?: string | null;
  'taxonomy': string;
  'term_id'?: string | null;
  'updated_at'?: Date;
}
export interface wp_yoast_seo_linksEntity {
  'height'?: number | null;
  'id'?: string;
  'indexable_id'?: number | null;
  'language'?: string | null;
  'post_id'?: string | null;
  'region'?: string | null;
  'size'?: number | null;
  'target_indexable_id'?: number | null;
  'target_post_id'?: string | null;
  'type'?: string | null;
  'url'?: string | null;
  'width'?: number | null;
}
export interface wp_actionscheduler_actionsEntity {
  'action_id'?: string;
  'args'?: string | null;
  'attempts'?: number;
  'claim_id'?: string;
  'extended_args'?: string | null;
  'group_id'?: string;
  'hook': string;
  'last_attempt_gmt'?: Date | null;
  'last_attempt_local'?: Date | null;
  'priority'?: number;
  'schedule'?: string | null;
  'scheduled_date_gmt'?: Date | null;
  'scheduled_date_local'?: Date | null;
  'status': string;
}
export interface wp_actionscheduler_claimsEntity {
  'claim_id'?: string;
  'date_created_gmt'?: Date | null;
}
export interface wp_actionscheduler_groupsEntity {
  'group_id'?: string;
  'slug': string;
}
export interface wp_actionscheduler_logsEntity {
  'action_id': string;
  'log_date_gmt'?: Date | null;
  'log_date_local'?: Date | null;
  'log_id'?: string;
  'message': string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_ngg_albumEntity {
  'albumdesc'?: string | null;
  'extras_post_id'?: string;
  'id'?: string;
  'name': string;
  'pageid'?: string;
  'previewpic'?: string;
  'slug': string;
  'sortorder': string;
}
export interface wp_ngg_galleryEntity {
  'author'?: string;
  'extras_post_id'?: string;
  'galdesc'?: string | null;
  'gid'?: string;
  'name': string;
  'pageid'?: string;
  'path'?: string | null;
  'previewpic'?: string;
  'slug': string;
  'title'?: string | null;
}
export interface wp_ngg_picturesEntity {
  'alttext'?: string | null;
  'description'?: string | null;
  'exclude'?: number | null;
  'extras_post_id'?: string;
  'filename': string;
  'galleryid'?: string;
  'image_slug': string;
  'imagedate'?: Date;
  'meta_data'?: string | null;
  'pid'?: string;
  'post_id'?: string;
  'sortorder'?: string;
  'updated_at'?: string | null;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string | null;
  'option_value': string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
}
export interface wp_toolset_associationsEntity {
  'child_id': string;
  'id'?: string;
  'intermediary_id': string;
  'parent_id': string;
  'relationship_id': string;
}
export interface wp_toolset_connected_elementsEntity {
  'domain'?: string;
  'element_id': string;
  'group_id': string;
  'id'?: string;
  'lang_code'?: string | null;
  'wpml_trid'?: string | null;
}
export interface wp_toolset_post_guid_idEntity {
  'guid'?: string;
  'post_id'?: string | null;
}
export interface wp_toolset_relationshipsEntity {
  'autodelete_intermediary'?: any;
  'cardinality_child_max'?: number;
  'cardinality_child_min'?: number;
  'cardinality_parent_max'?: number;
  'cardinality_parent_min'?: number;
  'child_domain'?: string;
  'child_types'?: string;
  'display_name_plural'?: string;
  'display_name_singular'?: string;
  'driver'?: string;
  'id'?: string;
  'intermediary_type'?: string;
  'is_active'?: any;
  'is_distinct'?: any;
  'needs_legacy_support'?: any;
  'origin'?: string;
  'ownership'?: string;
  'parent_domain'?: string;
  'parent_types'?: string;
  'role_label_child_plural'?: string;
  'role_label_child_singular'?: string;
  'role_label_parent_plural'?: string;
  'role_label_parent_singular'?: string;
  'role_name_child'?: string;
  'role_name_intermediary'?: string;
  'role_name_parent'?: string;
  'scope': string;
  'slug'?: string;
}
export interface wp_toolset_type_setsEntity {
  'id'?: string;
  'set_id': string;
  'type'?: string;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_actionscheduler_actionsEntity {
  'action_id'?: string;
  'args'?: string | null;
  'attempts'?: number;
  'claim_id'?: string;
  'extended_args'?: string | null;
  'group_id'?: string;
  'hook': string;
  'last_attempt_gmt'?: Date | null;
  'last_attempt_local'?: Date | null;
  'schedule'?: string | null;
  'scheduled_date_gmt'?: Date | null;
  'scheduled_date_local'?: Date | null;
  'status': string;
}
export interface wp_actionscheduler_claimsEntity {
  'claim_id'?: string;
  'date_created_gmt'?: Date | null;
}
export interface wp_actionscheduler_groupsEntity {
  'group_id'?: string;
  'slug': string;
}
export interface wp_actionscheduler_logsEntity {
  'action_id': string;
  'log_date_gmt'?: Date | null;
  'log_date_local'?: Date | null;
  'log_id'?: string;
  'message': string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_wpforms_tasks_metaEntity {
  'action': string;
  'data': string;
  'date': Date;
  'id'?: string;
}
export interface wp_actionscheduler_actionsEntity {
  'action_id'?: string;
  'args'?: string | null;
  'attempts'?: number;
  'claim_id'?: string;
  'extended_args'?: string | null;
  'group_id'?: string;
  'hook': string;
  'last_attempt_gmt'?: Date;
  'last_attempt_local'?: Date;
  'schedule'?: string | null;
  'scheduled_date_gmt'?: Date;
  'scheduled_date_local'?: Date;
  'status': string;
}
export interface wp_actionscheduler_claimsEntity {
  'claim_id'?: string;
  'date_created_gmt'?: Date;
}
export interface wp_actionscheduler_groupsEntity {
  'group_id'?: string;
  'slug': string;
}
export interface wp_actionscheduler_logsEntity {
  'action_id': string;
  'log_date_gmt'?: Date;
  'log_date_local'?: Date;
  'log_id'?: string;
  'message': string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_nextend2_image_storageEntity {
  'hash': string;
  'id'?: number;
  'image': string;
  'value': string;
}
export interface wp_nextend2_section_storageEntity {
  'application': string;
  'editable'?: number;
  'id'?: number;
  'referencekey': string;
  'section': string;
  'system'?: number;
  'value': string;
}
export interface wp_nextend2_smartslider3_generatorsEntity {
  'group': string;
  'id'?: number;
  'params': string;
  'type': string;
}
export interface wp_nextend2_smartslider3_slidersEntity {
  'alias'?: string | null;
  'id'?: number;
  'ordering'?: number;
  'params': string;
  'status'?: string;
  'thumbnail': string;
  'time': Date;
  'title': string;
  'type': string;
}
export interface wp_nextend2_smartslider3_sliders_xrefEntity {
  'group_id': number;
  'ordering'?: number;
  'slider_id': number;
}
export interface wp_nextend2_smartslider3_slidesEntity {
  'description': string;
  'first': number;
  'generator_id': number;
  'id'?: number;
  'ordering': number;
  'params': string;
  'publish_down'?: Date;
  'publish_up'?: Date;
  'published': any;
  'slide'?: string | null;
  'slider': number;
  'thumbnail': string;
  'title': string;
}
export interface wp_nf3_action_metaEntity {
  'id'?: number;
  'key': string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'parent_id': number;
  'value'?: string | null;
}
export interface wp_nf3_actionsEntity {
  'active'?: any | null;
  'created_at'?: Date;
  'id'?: number;
  'key'?: string | null;
  'label'?: string | null;
  'parent_id': number;
  'title'?: string | null;
  'type'?: string | null;
  'updated_at'?: Date | null;
}
export interface wp_nf3_chunksEntity {
  'id'?: number;
  'name'?: string | null;
  'value'?: string | null;
}
export interface wp_nf3_field_metaEntity {
  'id'?: number;
  'key': string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'parent_id': number;
  'value'?: string | null;
}
export interface wp_nf3_fieldsEntity {
  'created_at'?: Date;
  'default_value'?: string | null;
  'field_key'?: string | null;
  'field_label'?: string | null;
  'id'?: number;
  'key'?: string | null;
  'label'?: string | null;
  'label_pos'?: string | null;
  'order'?: number | null;
  'parent_id': number;
  'personally_identifiable'?: boolean | null;
  'required'?: boolean | null;
  'type'?: string | null;
  'updated_at'?: Date | null;
}
export interface wp_nf3_form_metaEntity {
  'id'?: number;
  'key': string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'parent_id': number;
  'value'?: string | null;
}
export interface wp_nf3_formsEntity {
  'clear_complete'?: boolean | null;
  'created_at'?: Date;
  'default_label_pos'?: string | null;
  'form_title'?: string | null;
  'hide_complete'?: boolean | null;
  'id'?: number;
  'key'?: string | null;
  'logged_in'?: boolean | null;
  'seq_num'?: number | null;
  'show_title'?: boolean | null;
  'subs'?: number | null;
  'title'?: string | null;
  'updated_at'?: Date | null;
  'views'?: number | null;
}
export interface wp_nf3_object_metaEntity {
  'id'?: number;
  'key': string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'parent_id': number;
  'value'?: string | null;
}
export interface wp_nf3_objectsEntity {
  'created_at'?: Date;
  'id'?: number;
  'object_title'?: string | null;
  'title'?: string | null;
  'type'?: string | null;
  'updated_at'?: Date | null;
}
export interface wp_nf3_relationshipsEntity {
  'child_id': number;
  'child_type': string;
  'created_at'?: Date;
  'id'?: number;
  'parent_id': number;
  'parent_type': string;
  'updated_at'?: Date | null;
}
export interface wp_nf3_upgradesEntity {
  'cache'?: string | null;
  'id': number;
  'maintenance'?: boolean | null;
  'stage'?: number;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_wpforms_tasks_metaEntity {
  'action': string;
  'data': string;
  'date': Date;
  'id'?: string;
}
export interface wp_admin_columnsEntity {
  'columns'?: string | null;
  'date_created'?: Date;
  'date_modified'?: Date;
  'id'?: string;
  'list_id'?: string;
  'list_key'?: string;
  'settings'?: string | null;
  'title'?: string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'custom_order'?: number;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_wrc_cachesEntity {
  'cache_hits': string;
  'cache_id'?: string;
  'cache_key': string;
  'cache_type': string;
  'cleaned'?: any | null;
  'deleted'?: any | null;
  'expiration': Date;
  'is_single': any;
  'object_type': string;
  'request_headers': string;
  'request_method': string;
  'request_uri': string;
}
export interface wp_wrc_relationsEntity {
  'cache_id': string;
  'object_id': string;
  'object_type': string;
}
export interface wp_yoast_indexableEntity {
  'author_id'?: string | null;
  'blog_id'?: string;
  'breadcrumb_title'?: string | null;
  'canonical'?: string | null;
  'created_at'?: Date | null;
  'description'?: string | null;
  'estimated_reading_time_minutes'?: number | null;
  'has_ancestors'?: any | null;
  'has_public_posts'?: any | null;
  'id'?: number;
  'incoming_link_count'?: number | null;
  'is_cornerstone'?: any | null;
  'is_protected'?: any | null;
  'is_public'?: any | null;
  'is_robots_noarchive'?: any | null;
  'is_robots_nofollow'?: any | null;
  'is_robots_noimageindex'?: any | null;
  'is_robots_noindex'?: any | null;
  'is_robots_nosnippet'?: any | null;
  'language'?: string | null;
  'link_count'?: number | null;
  'number_of_pages'?: number | null;
  'object_id'?: string | null;
  'object_last_modified'?: Date | null;
  'object_published_at'?: Date | null;
  'object_sub_type'?: string | null;
  'object_type': string;
  'open_graph_description'?: string | null;
  'open_graph_image'?: string | null;
  'open_graph_image_id'?: string | null;
  'open_graph_image_meta'?: string | null;
  'open_graph_image_source'?: string | null;
  'open_graph_title'?: string | null;
  'permalink'?: string | null;
  'permalink_hash'?: string | null;
  'post_parent'?: string | null;
  'post_status'?: string | null;
  'primary_focus_keyword'?: string | null;
  'primary_focus_keyword_score'?: number | null;
  'prominent_words_version'?: number | null;
  'readability_score'?: number | null;
  'region'?: string | null;
  'schema_article_type'?: string | null;
  'schema_page_type'?: string | null;
  'title'?: string | null;
  'twitter_description'?: string | null;
  'twitter_image'?: string | null;
  'twitter_image_id'?: string | null;
  'twitter_image_source'?: string | null;
  'twitter_title'?: string | null;
  'updated_at'?: Date;
  'version'?: number | null;
}
export interface wp_yoast_indexable_hierarchyEntity {
  'ancestor_id': number;
  'blog_id'?: string;
  'depth'?: number | null;
  'indexable_id': number;
}
export interface wp_yoast_migrationsEntity {
  'id'?: number;
  'version'?: string | null;
}
export interface wp_yoast_primary_termEntity {
  'blog_id'?: string;
  'created_at'?: Date | null;
  'id'?: number;
  'post_id'?: string | null;
  'taxonomy': string;
  'term_id'?: string | null;
  'updated_at'?: Date;
}
export interface wp_yoast_seo_linksEntity {
  'id'?: string;
  'post_id': string;
  'target_post_id': string;
  'type': string;
  'url': string;
}
export interface wp_yoast_seo_metaEntity {
  'incoming_link_count'?: number | null;
  'internal_link_count'?: number | null;
  'object_id': string;
}
export interface wp_ccpo_post_order_relEntity {
  'category_id': string;
  'id'?: number;
  'incl'?: any;
  'post_id': number;
  'weight'?: number;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_ewwwio_imagesEntity {
  'gallery'?: string | null;
  'id'?: any;
  'image_md5'?: string | null;
  'image_size'?: number | null;
  'path': string;
  'results': string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wp_p2pEntity {
  'p2p_from': string;
  'p2p_id'?: string;
  'p2p_to': string;
  'p2p_type'?: string;
}
export interface wp_p2pmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'p2p_id'?: string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
  'term_order'?: number | null;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_xyz_em_additional_field_infoEntity {
  'default_value': string;
  'field_name': string;
  'id'?: number;
  'options': string;
  'type': number;
}
export interface wp_xyz_em_additional_field_valueEntity {
  'ea_id': number;
  'field1': string;
  'id'?: number;
}
export interface wp_xyz_em_address_list_mappingEntity {
  'create_time': number;
  'ea_id': string;
  'el_id': number;
  'id'?: string;
  'last_update_time': number;
  'status': number;
}
export interface wp_xyz_em_attachmentEntity {
  'campaigns_id': number;
  'id'?: number;
  'name': string;
}
export interface wp_xyz_em_email_addressEntity {
  'create_time': number;
  'email': string;
  'id'?: string;
  'last_update_time': number;
}
export interface wp_xyz_em_email_campaignEntity {
  'alt_body': string;
  'batch_size': number;
  'body': string;
  'campaign_template_id': number;
  'end_time': string;
  'id'?: number;
  'join_after_campaign_started'?: number;
  'last_fired_time': string;
  'last_send_mapping_id': number;
  'list_id': number;
  'name': string;
  'send_count': number;
  'sender_email': string;
  'sender_email_id': number;
  'sender_name': string;
  'start_time': string;
  'status': number;
  'subject': string;
  'track_count': number;
  'type': number;
  'unsubscription_link': string;
}
export interface wp_xyz_em_email_templateEntity {
  'id'?: number;
  'message': string;
  'subject': string;
}
export interface wp_xyz_em_sender_email_addressEntity {
  'authentication': string;
  'host': string;
  'id'?: number;
  'password': string;
  'port': number;
  'security': string;
  'set_default': number;
  'status': number;
  'user': string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_ngg_albumEntity {
  'albumdesc'?: string | null;
  'extras_post_id'?: string;
  'id'?: string;
  'name': string;
  'pageid'?: string;
  'previewpic'?: string;
  'slug': string;
  'sortorder': string;
}
export interface wp_ngg_galleryEntity {
  'author'?: string;
  'extras_post_id'?: string;
  'galdesc'?: string | null;
  'gid'?: string;
  'name': string;
  'pageid'?: string;
  'path'?: string | null;
  'previewpic'?: string;
  'slug': string;
  'title'?: string | null;
}
export interface wp_ngg_picturesEntity {
  'alttext'?: string | null;
  'description'?: string | null;
  'exclude'?: number | null;
  'extras_post_id'?: string;
  'filename': string;
  'galleryid'?: string;
  'image_slug': string;
  'imagedate'?: Date;
  'meta_data'?: string | null;
  'pid'?: string;
  'post_id'?: string;
  'sortorder'?: string;
  'updated_at'?: string | null;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_rp4wp_cacheEntity {
  'post_id': string;
  'post_type': string;
  'weight': number;
  'word': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_nf3_action_metaEntity {
  'id'?: number;
  'key': string;
  'parent_id': number;
  'value'?: string | null;
}
export interface wp_nf3_actionsEntity {
  'active'?: any | null;
  'created_at'?: Date;
  'id'?: number;
  'key'?: string | null;
  'parent_id': number;
  'title'?: string | null;
  'type'?: string | null;
  'updated_at'?: Date | null;
}
export interface wp_nf3_field_metaEntity {
  'id'?: number;
  'key': string;
  'parent_id': number;
  'value'?: string | null;
}
export interface wp_nf3_fieldsEntity {
  'created_at'?: Date;
  'id'?: number;
  'key'?: string | null;
  'label'?: string | null;
  'parent_id': number;
  'type'?: string | null;
  'updated_at'?: Date | null;
}
export interface wp_nf3_form_metaEntity {
  'id'?: number;
  'key': string;
  'parent_id': number;
  'value'?: string | null;
}
export interface wp_nf3_formsEntity {
  'created_at'?: Date;
  'id'?: number;
  'key'?: string | null;
  'subs'?: number | null;
  'title'?: string | null;
  'updated_at'?: Date | null;
  'views'?: number | null;
}
export interface wp_nf3_object_metaEntity {
  'id'?: number;
  'key': string;
  'parent_id': number;
  'value'?: string | null;
}
export interface wp_nf3_objectsEntity {
  'created_at'?: Date;
  'id'?: number;
  'title'?: string | null;
  'type'?: string | null;
  'updated_at'?: Date | null;
}
export interface wp_nf3_relationshipsEntity {
  'child_id': number;
  'child_type': string;
  'created_at'?: Date;
  'id'?: number;
  'parent_id': number;
  'parent_type': string;
  'updated_at'?: Date | null;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_yoast_indexableEntity {
  'author_id'?: string | null;
  'blog_id'?: string;
  'breadcrumb_title'?: string | null;
  'canonical'?: string | null;
  'created_at'?: Date | null;
  'description'?: string | null;
  'estimated_reading_time_minutes'?: number | null;
  'has_ancestors'?: any | null;
  'has_public_posts'?: any | null;
  'id'?: number;
  'incoming_link_count'?: number | null;
  'is_cornerstone'?: any | null;
  'is_protected'?: any | null;
  'is_public'?: any | null;
  'is_robots_noarchive'?: any | null;
  'is_robots_nofollow'?: any | null;
  'is_robots_noimageindex'?: any | null;
  'is_robots_noindex'?: any | null;
  'is_robots_nosnippet'?: any | null;
  'language'?: string | null;
  'link_count'?: number | null;
  'number_of_pages'?: number | null;
  'object_id'?: string | null;
  'object_sub_type'?: string | null;
  'object_type': string;
  'open_graph_description'?: string | null;
  'open_graph_image'?: string | null;
  'open_graph_image_id'?: string | null;
  'open_graph_image_meta'?: string | null;
  'open_graph_image_source'?: string | null;
  'open_graph_title'?: string | null;
  'permalink'?: string | null;
  'permalink_hash'?: string | null;
  'post_parent'?: string | null;
  'post_status'?: string | null;
  'primary_focus_keyword'?: string | null;
  'primary_focus_keyword_score'?: number | null;
  'prominent_words_version'?: number | null;
  'readability_score'?: number | null;
  'region'?: string | null;
  'schema_article_type'?: string | null;
  'schema_page_type'?: string | null;
  'title'?: string | null;
  'twitter_description'?: string | null;
  'twitter_image'?: string | null;
  'twitter_image_id'?: string | null;
  'twitter_image_source'?: string | null;
  'twitter_title'?: string | null;
  'updated_at'?: Date;
}
export interface wp_yoast_indexable_hierarchyEntity {
  'ancestor_id': number;
  'blog_id'?: string;
  'depth'?: number | null;
  'indexable_id': number;
}
export interface wp_yoast_migrationsEntity {
  'id'?: number;
  'version'?: string | null;
}
export interface wp_yoast_primary_termEntity {
  'blog_id'?: string;
  'created_at'?: Date | null;
  'id'?: number;
  'post_id'?: string | null;
  'taxonomy': string;
  'term_id'?: string | null;
  'updated_at'?: Date;
}
export interface wp_yoast_seo_linksEntity {
  'height'?: number | null;
  'id'?: string;
  'indexable_id'?: number | null;
  'language'?: string | null;
  'post_id': string;
  'region'?: string | null;
  'size'?: number | null;
  'target_indexable_id'?: number | null;
  'target_post_id': string;
  'type': string;
  'url': string;
  'width'?: number | null;
}
export interface wp_yoast_seo_metaEntity {
  'incoming_link_count'?: number | null;
  'internal_link_count'?: number | null;
  'object_id': string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wp_pmxi_filesEntity {
  'id'?: string;
  'import_id': string;
  'name'?: string | null;
  'path'?: string | null;
  'registered_on'?: Date;
}
export interface wp_pmxi_hashEntity {
  'hash': Buffer;
  'import_id': number;
  'post_id': string;
  'post_type'?: string;
}
export interface wp_pmxi_historyEntity {
  'date'?: Date;
  'id'?: string;
  'import_id': string;
  'summary'?: string | null;
  'time_run'?: string | null;
  'type'?: 'manual' | 'processing' | 'trigger' | 'continue' | 'cli' | '';
}
export interface wp_pmxi_imagesEntity {
  'attachment_id': string;
  'id'?: string;
  'image_filename'?: string;
  'image_url'?: string;
}
export interface wp_pmxi_importsEntity {
  'canceled'?: any;
  'canceled_on'?: Date;
  'count'?: string;
  'created'?: string;
  'deleted'?: string;
  'executing'?: any;
  'failed'?: any;
  'failed_on'?: Date;
  'feed_type'?: 'xml' | 'csv' | 'zip' | 'gz' | '';
  'first_import'?: Date;
  'friendly_name'?: string;
  'id'?: string;
  'imported'?: string;
  'iteration'?: string;
  'last_activity'?: Date;
  'name'?: string | null;
  'options'?: string | null;
  'parent_import_id'?: string;
  'path'?: string | null;
  'processing'?: any;
  'queue_chunk_number'?: string;
  'registered_on'?: Date;
  'root_element'?: string | null;
  'settings_update_on'?: Date;
  'skipped'?: string;
  'triggered'?: any;
  'type'?: string;
  'updated'?: string;
  'xpath'?: string | null;
}
export interface wp_pmxi_postsEntity {
  'id'?: string;
  'import_id': string;
  'iteration'?: string;
  'post_id': string;
  'product_key'?: string | null;
  'specified'?: any;
  'unique_key'?: string | null;
}
export interface wp_pmxi_templatesEntity {
  'content'?: string | null;
  'fix_characters'?: any;
  'id'?: string;
  'is_keep_linebreaks'?: any;
  'is_leave_html'?: any;
  'meta'?: string | null;
  'name'?: string;
  'options'?: string | null;
  'scheduled'?: string;
  'title'?: string | null;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
  'term_order'?: number | null;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_wpie_templateEntity {
  'create_date': Date;
  'id'?: number;
  'last_update_date': Date;
  'opration': string;
  'opration_type': string;
  'options'?: string | null;
  'process_lock'?: number | null;
  'process_log'?: string | null;
  'status'?: string | null;
  'unique_id': string;
  'username': string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_import_detail_logEntity {
  'created'?: string;
  'file_name': string;
  'filesize': string;
  'hash_key': string;
  'id'?: number;
  'processing_records'?: number | null;
  'remaining_records'?: number | null;
  'running'?: any;
  'skipped'?: string;
  'status': string;
  'total_records'?: number | null;
  'updated'?: string;
}
export interface wp_import_log_detailEntity {
  'categories': string;
  'hash_key': string;
  'id'?: number;
  'message': string;
  'post_id'?: number | null;
  'status': string;
  'tags': string;
  'verify': any;
}
export interface wp_import_postIDEntity {
  'line_number': number;
  'post_id': number;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_smackcsv_file_eventsEntity {
  'file_name': string;
  'hash_key': string;
  'id'?: number;
  'lock'?: any | null;
  'mode': string;
  'progress'?: number | null;
  'status': string;
  'total_rows': number;
}
export interface wp_smackuci_eventsEntity {
  'count'?: string;
  'created'?: string;
  'deleted'?: string;
  'deletelog'?: any | null;
  'event_started_at'?: Date;
  'eventKey'?: string | null;
  'executing'?: any;
  'filepath'?: string | null;
  'filetype'?: string | null;
  'friendly_name'?: string | null;
  'id'?: string;
  'import_type'?: string | null;
  'is_terminated'?: any;
  'last_activity'?: Date;
  'month'?: string | null;
  'name'?: string | null;
  'original_file_name'?: string | null;
  'parent_node'?: string | null;
  'processed'?: string;
  'processing'?: any;
  'registered_on'?: Date;
  'revision'?: string;
  'siteid'?: number;
  'skipped'?: string;
  'terminated_on'?: Date;
  'triggered'?: any;
  'updated'?: string;
  'year'?: string | null;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
  'term_order'?: number | null;
}
export interface wp_ultimate_csv_importer_acf_fieldsEntity {
  'fdOption'?: string | null;
  'fieldId': string;
  'fieldLabel': string;
  'fieldName': string;
  'fieldType': string;
  'groupId': string;
  'id'?: number;
}
export interface wp_ultimate_csv_importer_mappingtemplateEntity {
  'createdtime'?: Date;
  'csvname'?: string | null;
  'deleted'?: number | null;
  'eventKey'?: string | null;
  'id'?: number;
  'mapping': any;
  'mapping_type'?: string | null;
  'module'?: string | null;
  'templatename': string;
  'templateused'?: number | null;
}
export interface wp_ultimate_csv_importer_mediaEntity {
  'attach_id': number;
  'hash_key': string;
  'image_type'?: string | null;
  'image_url': string;
  'module'?: string | null;
  'post_id'?: number | null;
  'status'?: string | null;
}
export interface wp_ultimate_csv_importer_shortcode_managerEntity {
  'hash_key': string;
  'image_shortcode': string;
  'original_image': string;
  'post_id'?: number | null;
  'status'?: string | null;
}
export interface wp_ultimate_post_entriesEntity {
  'file_name'?: string | null;
  'ID'?: number | null;
  'revision'?: number | null;
  'status'?: string | null;
  'type'?: string | null;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_wpie_templateEntity {
  'create_date': Date;
  'id'?: number;
  'last_update_date': Date;
  'opration': string;
  'opration_type': string;
  'options'?: string | null;
  'process_lock'?: number | null;
  'process_log'?: string | null;
  'status'?: string | null;
  'unique_id': string;
  'username': string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_nf3_action_metaEntity {
  'id'?: number;
  'key': string;
  'parent_id': number;
  'value'?: string | null;
}
export interface wp_nf3_actionsEntity {
  'active'?: any | null;
  'created_at'?: Date;
  'id'?: number;
  'key'?: string | null;
  'parent_id': number;
  'title'?: string | null;
  'type'?: string | null;
  'updated_at'?: Date | null;
}
export interface wp_nf3_field_metaEntity {
  'id'?: number;
  'key': string;
  'parent_id': number;
  'value'?: string | null;
}
export interface wp_nf3_fieldsEntity {
  'created_at'?: Date;
  'id'?: number;
  'key'?: string | null;
  'label'?: string | null;
  'parent_id': number;
  'type'?: string | null;
  'updated_at'?: Date | null;
}
export interface wp_nf3_form_metaEntity {
  'id'?: number;
  'key': string;
  'parent_id': number;
  'value'?: string | null;
}
export interface wp_nf3_formsEntity {
  'created_at'?: Date;
  'id'?: number;
  'key'?: string | null;
  'subs'?: number | null;
  'title'?: string | null;
  'updated_at'?: Date | null;
  'views'?: number | null;
}
export interface wp_nf3_object_metaEntity {
  'id'?: number;
  'key': string;
  'parent_id': number;
  'value'?: string | null;
}
export interface wp_nf3_objectsEntity {
  'created_at'?: Date;
  'id'?: number;
  'title'?: string | null;
  'type'?: string | null;
  'updated_at'?: Date | null;
}
export interface wp_nf3_relationshipsEntity {
  'child_id': number;
  'child_type': string;
  'created_at'?: Date;
  'id'?: number;
  'parent_id': number;
  'parent_type': string;
  'updated_at'?: Date | null;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wp_pmxi_filesEntity {
  'id'?: string;
  'import_id': string;
  'name'?: string;
  'path'?: string | null;
  'registered_on'?: Date;
}
export interface wp_pmxi_historyEntity {
  'date'?: Date;
  'id'?: string;
  'import_id': string;
  'summary'?: string | null;
  'time_run'?: string | null;
  'type'?: 'manual' | 'processing' | 'trigger' | 'continue' | '';
}
export interface wp_pmxi_importsEntity {
  'canceled'?: any;
  'canceled_on'?: Date;
  'count'?: string;
  'created'?: string;
  'deleted'?: string;
  'executing'?: any;
  'failed'?: any;
  'failed_on'?: Date;
  'feed_type'?: 'xml' | 'csv' | 'zip' | 'gz' | '';
  'first_import'?: Date;
  'friendly_name'?: string;
  'id'?: string;
  'imported'?: string;
  'iteration'?: string;
  'last_activity'?: Date;
  'name'?: string;
  'options'?: string | null;
  'parent_import_id'?: string;
  'path'?: string | null;
  'processing'?: any;
  'queue_chunk_number'?: string;
  'registered_on'?: Date;
  'root_element'?: string | null;
  'settings_update_on'?: Date;
  'skipped'?: string;
  'triggered'?: any;
  'type'?: string;
  'updated'?: string;
  'xpath'?: string | null;
}
export interface wp_pmxi_postsEntity {
  'id'?: string;
  'import_id': string;
  'iteration'?: string;
  'post_id': string;
  'product_key'?: string | null;
  'specified'?: any;
  'unique_key'?: string | null;
}
export interface wp_pmxi_templatesEntity {
  'content'?: string | null;
  'fix_characters'?: any;
  'id'?: string;
  'is_keep_linebreaks'?: any;
  'is_leave_html'?: any;
  'meta'?: string | null;
  'name'?: string;
  'options'?: string | null;
  'scheduled'?: string;
  'title'?: string | null;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_pp_activity_logsEntity {
  'browser': string;
  'created_at': string;
  'id'?: any;
  'ip': string;
  'status': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
}
export interface wp_toolset_post_guid_idEntity {
  'guid'?: string;
  'post_id'?: string | null;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_wfblockediplogEntity {
  'blockCount'?: number;
  'blockType'?: string;
  'countryCode': string;
  'IP'?: Buffer;
  'unixday': number;
}
export interface wp_wfblocks7Entity {
  'blockedHits'?: number | null;
  'blockedTime': string;
  'expiration'?: string;
  'id'?: string;
  'IP'?: Buffer;
  'lastAttempt'?: number | null;
  'parameters'?: string | null;
  'reason': string;
  'type'?: number;
}
export interface wp_wfconfigEntity {
  'autoload'?: 'no' | 'yes';
  'name': string;
  'val'?: any | null;
}
export interface wp_wfcrawlersEntity {
  'IP'?: Buffer;
  'lastUpdate': number;
  'patternSig': Buffer;
  'PTR'?: string | null;
  'status': string;
}
export interface wp_wffilechangesEntity {
  'file': string;
  'filenameHash': string;
  'md5': string;
}
export interface wp_wffilemodsEntity {
  'filename': string;
  'filenameMD5': Buffer;
  'isSafeFile'?: string;
  'knownFile': number;
  'newMD5': Buffer;
  'oldMD5': Buffer;
  'real_path': string;
  'SHAC'?: Buffer;
  'stoppedOnPosition'?: number;
  'stoppedOnSignature'?: string;
}
export interface wp_wfhitsEntity {
  'action'?: string;
  'actionData'?: string | null;
  'actionDescription'?: string | null;
  'attackLogTime': number;
  'ctime': number;
  'id'?: number;
  'IP'?: Buffer | null;
  'isGoogle': number;
  'jsRun'?: number | null;
  'newVisit': number;
  'referer'?: string | null;
  'statusCode'?: number;
  'UA'?: string | null;
  'URL'?: string | null;
  'userID': number;
}
export interface wp_wfhooverEntity {
  'host'?: string | null;
  'hostKey'?: string | null;
  'id'?: number;
  'owner'?: string | null;
  'path'?: string | null;
}
export interface wp_wfissuesEntity {
  'data'?: string | null;
  'id'?: number;
  'ignoreC': string;
  'ignoreP': string;
  'lastUpdated': number;
  'longMsg'?: string | null;
  'severity': number;
  'shortMsg': string;
  'status': string;
  'time': number;
  'type': string;
}
export interface wp_wfknownfilelistEntity {
  'id'?: number;
  'path': string;
  'wordpress_path': string;
}
export interface wp_wflivetraffichumanEntity {
  'expiration': number;
  'identifier'?: Buffer;
  'IP'?: Buffer;
}
export interface wp_wflocsEntity {
  'city'?: string | null;
  'countryCode'?: string | null;
  'countryName'?: string | null;
  'ctime': number;
  'failed': number;
  'IP'?: Buffer;
  'lat'?: number | null;
  'lon'?: number | null;
  'region'?: string | null;
}
export interface wp_wfloginsEntity {
  'action': string;
  'ctime': number;
  'fail': number;
  'hitID'?: number | null;
  'id'?: number;
  'IP'?: Buffer | null;
  'UA'?: string | null;
  'userID': number;
  'username': string;
}
export interface wp_wfls_2fa_secretsEntity {
  'ctime': number;
  'id'?: number;
  'mode'?: 'authenticator';
  'recovery': any;
  'secret': any;
  'user_id': string;
  'vtime': number;
}
export interface wp_wfls_role_countsEntity {
  'serialized_roles': string;
  'two_factor_inactive': any;
  'user_count'?: string;
}
export interface wp_wfls_settingsEntity {
  'autoload'?: 'no' | 'yes';
  'name'?: string;
  'value'?: any | null;
}
export interface wp_wfnotificationsEntity {
  'category': string;
  'ctime': number;
  'html': string;
  'id'?: string;
  'links': string;
  'new'?: number;
  'priority'?: number;
}
export interface wp_wfpendingissuesEntity {
  'data'?: string | null;
  'id'?: number;
  'ignoreC': string;
  'ignoreP': string;
  'lastUpdated': number;
  'longMsg'?: string | null;
  'severity': number;
  'shortMsg': string;
  'status': string;
  'time': number;
  'type': string;
}
export interface wp_wfreversecacheEntity {
  'host': string;
  'IP'?: Buffer;
  'lastUpdate': number;
}
export interface wp_wfsecurityeventsEntity {
  'data': string;
  'event_time': number;
  'id'?: string;
  'state'?: 'new' | 'sending' | 'sent';
  'state_timestamp'?: Date;
  'type'?: string;
}
export interface wp_wfsnipcacheEntity {
  'body'?: string;
  'count'?: number;
  'expiration'?: Date;
  'id'?: number;
  'IP'?: string;
  'type'?: number;
}
export interface wp_wfstatusEntity {
  'ctime': number;
  'id'?: string;
  'level': number;
  'msg': string;
  'type': string;
}
export interface wp_wftrafficratesEntity {
  'eMin': number;
  'hits': number;
  'hitType'?: 'hit' | '404';
  'IP'?: Buffer;
}
export interface wp_wfwaffailuresEntity {
  'id'?: number;
  'rule_id'?: number | null;
  'throwable': string;
  'timestamp'?: Date;
}
export interface wp_yoast_indexableEntity {
  'author_id'?: string | null;
  'blog_id'?: string;
  'breadcrumb_title'?: string | null;
  'canonical'?: string | null;
  'created_at'?: Date | null;
  'description'?: string | null;
  'estimated_reading_time_minutes'?: number | null;
  'has_ancestors'?: any | null;
  'has_public_posts'?: any | null;
  'id'?: number;
  'inclusive_language_score'?: number | null;
  'incoming_link_count'?: number | null;
  'is_cornerstone'?: any | null;
  'is_protected'?: any | null;
  'is_public'?: any | null;
  'is_robots_noarchive'?: any | null;
  'is_robots_nofollow'?: any | null;
  'is_robots_noimageindex'?: any | null;
  'is_robots_noindex'?: any | null;
  'is_robots_nosnippet'?: any | null;
  'language'?: string | null;
  'link_count'?: number | null;
  'number_of_pages'?: number | null;
  'object_id'?: string | null;
  'object_last_modified'?: Date | null;
  'object_published_at'?: Date | null;
  'object_sub_type'?: string | null;
  'object_type': string;
  'open_graph_description'?: string | null;
  'open_graph_image'?: string | null;
  'open_graph_image_id'?: string | null;
  'open_graph_image_meta'?: string | null;
  'open_graph_image_source'?: string | null;
  'open_graph_title'?: string | null;
  'permalink'?: string | null;
  'permalink_hash'?: string | null;
  'post_parent'?: string | null;
  'post_status'?: string | null;
  'primary_focus_keyword'?: string | null;
  'primary_focus_keyword_score'?: number | null;
  'prominent_words_version'?: number | null;
  'readability_score'?: number | null;
  'region'?: string | null;
  'schema_article_type'?: string | null;
  'schema_page_type'?: string | null;
  'title'?: string | null;
  'twitter_description'?: string | null;
  'twitter_image'?: string | null;
  'twitter_image_id'?: string | null;
  'twitter_image_source'?: string | null;
  'twitter_title'?: string | null;
  'updated_at'?: Date;
  'version'?: number | null;
}
export interface wp_yoast_indexable_hierarchyEntity {
  'ancestor_id'?: number;
  'blog_id'?: string;
  'depth'?: number | null;
  'indexable_id'?: number;
}
export interface wp_yoast_migrationsEntity {
  'id'?: number;
  'version'?: string | null;
}
export interface wp_yoast_primary_termEntity {
  'blog_id'?: string;
  'created_at'?: Date | null;
  'id'?: number;
  'post_id'?: string | null;
  'taxonomy': string;
  'term_id'?: string | null;
  'updated_at'?: Date;
}
export interface wp_yoast_seo_linksEntity {
  'height'?: number | null;
  'id'?: string;
  'indexable_id'?: number | null;
  'language'?: string | null;
  'post_id': string;
  'region'?: string | null;
  'size'?: number | null;
  'target_indexable_id'?: number | null;
  'target_post_id': string;
  'type': string;
  'url': string;
  'width'?: number | null;
}
export interface wp_yoast_seo_metaEntity {
  'incoming_link_count'?: number | null;
  'internal_link_count'?: number | null;
  'object_id': string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
}
export interface wp_toolset_post_guid_idEntity {
  'guid'?: string;
  'post_id': string;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string | null;
  'option_value': string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_db7_formsEntity {
  'form_date'?: Date;
  'form_id'?: string;
  'form_post_id': string;
  'form_value': string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_pp_activity_logsEntity {
  'browser': string;
  'created_at': string;
  'id'?: any;
  'ip': string;
  'status': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
}
export interface wp_toolset_post_guid_idEntity {
  'guid'?: string;
  'post_id': string;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_w3tc_cdn_queueEntity {

  /* 1 - Upload, 2 - Delete, 3 - Purge */
  'command'?: number;
  'date'?: Date;
  'id'?: number;
  'last_error'?: string;
  'local_path'?: string;
  'remote_path'?: string;
}
export interface wp_wfBadLeechersEntity {
  'eMin': number;
  'hits': number;
  'IP'?: Buffer;
}
export interface wp_wfBlockedIPLogEntity {
  'blockCount'?: number;
  'blockType'?: string;
  'countryCode': string;
  'IP'?: Buffer;
  'unixday': number;
}
export interface wp_wfBlocksEntity {
  'blockedHits'?: number | null;
  'blockedTime': string;
  'IP'?: Buffer;
  'lastAttempt'?: number | null;
  'permanent'?: number | null;
  'reason': string;
  'wfsn'?: number | null;
}
export interface wp_wfBlocksAdvEntity {
  'blockString': string;
  'blockType': string;
  'ctime': number;
  'id'?: number;
  'lastBlocked'?: number | null;
  'reason': string;
  'totalBlocked'?: number | null;
}
export interface wp_wfConfigEntity {
  'autoload'?: 'no' | 'yes';
  'name': string;
  'val'?: any | null;
}
export interface wp_wfCrawlersEntity {
  'IP'?: Buffer;
  'lastUpdate': number;
  'patternSig': Buffer;
  'PTR'?: string | null;
  'status': string;
}
export interface wp_wfFileModsEntity {
  'filename': string;
  'filenameMD5': Buffer;
  'isSafeFile'?: string;
  'knownFile': number;
  'newMD5': Buffer;
  'oldMD5': Buffer;
  'SHAC'?: Buffer;
  'stoppedOnPosition'?: number;
  'stoppedOnSignature'?: string;
}
export interface wp_wfHitsEntity {
  'action'?: string;
  'actionData'?: string | null;
  'actionDescription'?: string | null;
  'attackLogTime': number;
  'ctime': number;
  'id'?: number;
  'IP'?: Buffer | null;
  'isGoogle': number;
  'jsRun'?: number | null;
  'newVisit': number;
  'referer'?: string | null;
  'statusCode'?: number;
  'UA'?: string | null;
  'URL'?: string | null;
  'userID': number;
}
export interface wp_wfHooverEntity {
  'host'?: string | null;
  'hostKey'?: string | null;
  'id'?: number;
  'owner'?: string | null;
  'path'?: string | null;
}
export interface wp_wfIssuesEntity {
  'data'?: string | null;
  'id'?: number;
  'ignoreC': string;
  'ignoreP': string;
  'longMsg'?: string | null;
  'severity': number;
  'shortMsg': string;
  'status': string;
  'time': number;
  'type': string;
}
export interface wp_wfKnownFileListEntity {
  'id'?: number;
  'path': string;
}
export interface wp_wfLeechersEntity {
  'eMin': number;
  'hits': number;
  'IP'?: Buffer;
}
export interface wp_wfLockedOutEntity {
  'blockedHits'?: number | null;
  'blockedTime': string;
  'IP'?: Buffer;
  'lastAttempt'?: number | null;
  'reason': string;
}
export interface wp_wfLocsEntity {
  'city'?: string | null;
  'countryCode'?: string | null;
  'countryName'?: string | null;
  'ctime': number;
  'failed': number;
  'IP'?: Buffer;
  'lat'?: number | null;
  'lon'?: number | null;
  'region'?: string | null;
}
export interface wp_wfLoginsEntity {
  'action': string;
  'ctime': number;
  'fail': number;
  'hitID'?: number | null;
  'id'?: number;
  'IP'?: Buffer | null;
  'UA'?: string | null;
  'userID': number;
  'username': string;
}
export interface wp_wfNet404sEntity {
  'ctime': number;
  'sig': Buffer;
  'URI': string;
}
export interface wp_wfNotificationsEntity {
  'category': string;
  'ctime': number;
  'html': string;
  'id'?: string;
  'links': string;
  'new'?: number;
  'priority'?: number;
}
export interface wp_wfPendingIssuesEntity {
  'data'?: string | null;
  'id'?: number;
  'ignoreC': string;
  'ignoreP': string;
  'longMsg'?: string | null;
  'severity': number;
  'shortMsg': string;
  'status': string;
  'time': number;
  'type': string;
}
export interface wp_wfReverseCacheEntity {
  'host': string;
  'IP'?: Buffer;
  'lastUpdate': number;
}
export interface wp_wfScannersEntity {
  'eMin': number;
  'hits': number;
  'IP'?: Buffer;
}
export interface wp_wfSNIPCacheEntity {
  'body'?: string;
  'count'?: number;
  'expiration'?: Date;
  'id'?: number;
  'IP'?: string;
  'type'?: number;
}
export interface wp_wfStatusEntity {
  'ctime': number;
  'id'?: string;
  'level': number;
  'msg': string;
  'type': string;
}
export interface wp_wfThrottleLogEntity {
  'endTime': number;
  'IP'?: Buffer;
  'lastReason': string;
  'startTime': number;
  'timesThrottled': number;
}
export interface wp_wfVulnScannersEntity {
  'ctime': number;
  'hits': number;
  'IP'?: Buffer;
}
export interface wp_yoast_indexableEntity {
  'author_id'?: string | null;
  'blog_id'?: string;
  'breadcrumb_title'?: string | null;
  'canonical'?: string | null;
  'created_at'?: Date | null;
  'description'?: string | null;
  'estimated_reading_time_minutes'?: number | null;
  'has_ancestors'?: any | null;
  'has_public_posts'?: any | null;
  'id'?: number;
  'inclusive_language_score'?: number | null;
  'incoming_link_count'?: number | null;
  'is_cornerstone'?: any | null;
  'is_protected'?: any | null;
  'is_public'?: any | null;
  'is_robots_noarchive'?: any | null;
  'is_robots_nofollow'?: any | null;
  'is_robots_noimageindex'?: any | null;
  'is_robots_noindex'?: any | null;
  'is_robots_nosnippet'?: any | null;
  'language'?: string | null;
  'link_count'?: number | null;
  'number_of_pages'?: number | null;
  'object_id'?: string | null;
  'object_last_modified'?: Date | null;
  'object_published_at'?: Date | null;
  'object_sub_type'?: string | null;
  'object_type': string;
  'open_graph_description'?: string | null;
  'open_graph_image'?: string | null;
  'open_graph_image_id'?: string | null;
  'open_graph_image_meta'?: string | null;
  'open_graph_image_source'?: string | null;
  'open_graph_title'?: string | null;
  'permalink'?: string | null;
  'permalink_hash'?: string | null;
  'post_parent'?: string | null;
  'post_status'?: string | null;
  'primary_focus_keyword'?: string | null;
  'primary_focus_keyword_score'?: number | null;
  'prominent_words_version'?: number | null;
  'readability_score'?: number | null;
  'region'?: string | null;
  'schema_article_type'?: string | null;
  'schema_page_type'?: string | null;
  'title'?: string | null;
  'twitter_description'?: string | null;
  'twitter_image'?: string | null;
  'twitter_image_id'?: string | null;
  'twitter_image_source'?: string | null;
  'twitter_title'?: string | null;
  'updated_at'?: Date;
  'version'?: number | null;
}
export interface wp_yoast_indexable_hierarchyEntity {
  'ancestor_id'?: number;
  'blog_id'?: string;
  'depth'?: number | null;
  'indexable_id'?: number;
}
export interface wp_yoast_migrationsEntity {
  'id'?: number;
  'version'?: string | null;
}
export interface wp_yoast_primary_termEntity {
  'blog_id'?: string;
  'created_at'?: Date | null;
  'id'?: number;
  'post_id'?: string | null;
  'taxonomy': string;
  'term_id'?: string | null;
  'updated_at'?: Date;
}
export interface wp_yoast_seo_linksEntity {
  'height'?: number | null;
  'id'?: string;
  'indexable_id'?: number | null;
  'language'?: string | null;
  'post_id': string;
  'region'?: string | null;
  'size'?: number | null;
  'target_indexable_id'?: number | null;
  'target_post_id': string;
  'type': string;
  'url': string;
  'width'?: number | null;
}
export interface wp_yoast_seo_metaEntity {
  'incoming_link_count'?: number | null;
  'internal_link_count'?: number | null;
  'object_id': string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string;
  'option_value': string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
export interface wp_commentmetaEntity {
  'comment_id'?: string;
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
}
export interface wp_commentsEntity {
  'comment_agent'?: string;
  'comment_approved'?: string;
  'comment_author': string;
  'comment_author_email'?: string;
  'comment_author_IP'?: string;
  'comment_author_url'?: string;
  'comment_content': string;
  'comment_date'?: Date;
  'comment_date_gmt'?: Date;
  'comment_ID'?: string;
  'comment_karma'?: number;
  'comment_parent'?: string;
  'comment_post_ID'?: string;
  'comment_type'?: string;
  'user_id'?: string;
}
export interface wp_hugeit_slider_slideEntity {
  'attachment_id'?: string | null;
  'description'?: string | null;
  'draft'?: number | null;
  'id'?: number;
  'in_new_tab'?: number;
  'order': number;
  'post_go_to_post'?: number | null;
  'post_max_post_count'?: number | null;
  'post_show_description'?: number | null;
  'post_show_title'?: number | null;
  'post_term_id'?: string | null;
  'slider_id': number;
  'title'?: string | null;
  'type': 'image' | 'video' | 'post';
  'url'?: string | null;
  'video_control_color'?: number | null;
  'video_quality'?: number | null;
  'video_show_controls'?: number | null;
  'video_show_info'?: number | null;
  'video_volume'?: number | null;
}
export interface wp_hugeit_slider_sliderEntity {
  'arrows_style'?: 'arrows_1' | 'arrows_2' | 'arrows_3' | 'arrows_4' | 'arrows_5' | 'arrows_6';
  'change_speed'?: number;
  'controls'?: number | null;
  'desconoff'?: number | null;
  'descsymbollimit'?: number;
  'dragdrop'?: number | null;
  'effect'?: 'none' | 'cube_h' | 'cube_v' | 'fade' | 'slice_h' | 'slice_v' | 'slide_h' | 'slide_v' | 'scale_out' | 'scale_in' | 'block_scale' | 'kaleidoscope' | 'fan' | 'blind_h' | 'blind_v' | 'random';
  'fullscreen'?: number | null;
  'height'?: number;
  'hthumbheight'?: number;
  'id'?: number;
  'itemscount'?: number;
  'lightbox'?: number | null;
  'mode'?: 'slide' | 'fade';
  'name'?: string;
  'navigate_by'?: 'dot' | 'thumbnail' | 'none';
  'open_close_effect'?: 'none' | 'unfold' | 'unfold_r' | 'blowup' | 'blowup_r' | 'roadrunner' | 'roadrunner_r' | 'runner' | 'runner_r' | 'rotate' | 'rotate_r';
  'pager'?: number | null;
  'pause_on_hover'?: number;
  'pause_time'?: number;
  'position'?: 'left' | 'right' | 'center';
  'random'?: number | null;
  'show_loading_icon'?: number | null;
  'slide_effect'?: 'effect_1' | 'effect_2' | 'effect_3' | 'effect_4' | 'effect_5' | 'effect_6' | 'effect_7' | 'effect_8' | 'effect_9' | 'effect_10';
  'swipe'?: number | null;
  'thumbcontrols'?: number | null;
  'thumbdragdrop'?: number | null;
  'thumbitem'?: number;
  'thumbmargin'?: number;
  'thumbposition'?: number | null;
  'thumbswipe'?: number | null;
  'titleonoff'?: number | null;
  'titlesymbollimit'?: number;
  'vertical'?: number | null;
  'video_autoplay'?: number | null;
  'view'?: 'none' | 'carousel1' | 'thumb_view';
  'vthumbwidth'?: number;
  'width'?: number;
}
export interface wp_linksEntity {
  'link_description'?: string;
  'link_id'?: string;
  'link_image'?: string;
  'link_name'?: string;
  'link_notes': string;
  'link_owner'?: string;
  'link_rating'?: number;
  'link_rel'?: string;
  'link_rss'?: string;
  'link_target'?: string;
  'link_updated'?: Date;
  'link_url'?: string;
  'link_visible'?: string;
}
export interface wp_optionsEntity {
  'autoload'?: string;
  'option_id'?: string;
  'option_name'?: string | null;
  'option_value': string;
}
export interface wp_postmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'post_id'?: string;
}
export interface wp_postsEntity {
  'comment_count'?: string;
  'comment_status'?: string;
  'guid'?: string;
  'ID'?: string;
  'menu_order'?: number;
  'ping_status'?: string;
  'pinged': string;
  'post_author'?: string;
  'post_content': string;
  'post_content_filtered': string;
  'post_date'?: Date;
  'post_date_gmt'?: Date;
  'post_excerpt': string;
  'post_mime_type'?: string;
  'post_modified'?: Date;
  'post_modified_gmt'?: Date;
  'post_name'?: string;
  'post_parent'?: string;
  'post_password'?: string;
  'post_status'?: string;
  'post_title': string;
  'post_type'?: string;
  'to_ping': string;
}
export interface wp_term_relationshipsEntity {
  'object_id'?: string;
  'term_order'?: number;
  'term_taxonomy_id'?: string;
}
export interface wp_term_taxonomyEntity {
  'count'?: string;
  'description': string;
  'parent'?: string;
  'taxonomy'?: string;
  'term_id'?: string;
  'term_taxonomy_id'?: string;
}
export interface wp_termmetaEntity {
  'meta_id'?: string;
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'term_id'?: string;
}
export interface wp_termsEntity {
  'name'?: string;
  'slug'?: string;
  'term_group'?: string;
  'term_id'?: string;
}
export interface wp_usermetaEntity {
  'meta_key'?: string | null;
  'meta_value'?: string | null;
  'umeta_id'?: string;
  'user_id'?: string;
}
export interface wp_usersEntity {
  'display_name'?: string;
  'ID'?: string;
  'user_activation_key'?: string;
  'user_email'?: string;
  'user_login'?: string;
  'user_nicename'?: string;
  'user_pass'?: string;
  'user_registered'?: Date;
  'user_status'?: number;
  'user_url'?: string;
}
